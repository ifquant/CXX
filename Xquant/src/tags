!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ACCOUNT_SUMMARY	ib/jts/EDecoder.h	/^const int ACCOUNT_SUMMARY                           = 63;$/;"	v
ACCOUNT_SUMMARY_END	ib/jts/EDecoder.h	/^const int ACCOUNT_SUMMARY_END                       = 64;$/;"	v
ACCOUNT_UPDATE_MULTI	ib/jts/EDecoder.h	/^const int ACCOUNT_UPDATE_MULTI                      = 73;$/;"	v
ACCOUNT_UPDATE_MULTI_END	ib/jts/EDecoder.h	/^const int ACCOUNT_UPDATE_MULTI_END                  = 74;$/;"	v
ACCT_DOWNLOAD_END	ib/jts/EDecoder.h	/^const int ACCT_DOWNLOAD_END                         = 54;$/;"	v
ACCT_UPDATE_TIME	ib/jts/EDecoder.h	/^const int ACCT_UPDATE_TIME                          = 8;$/;"	v
ACCT_VALUE	ib/jts/EDecoder.h	/^const int ACCT_VALUE                                = 6;$/;"	v
ALGO_TWAP_TWAP_H_	algo/twap/twap.h	2;"	d
ALIASES	ib/jts/CommonDefs.h	/^enum faDataType { GROUPS=1, PROFILES, ALIASES } ;$/;"	e	enum:faDataType
API_SIGN	ib/jts/EDecoder.h	/^const char API_SIGN[4] = { 'A', 'P', 'I', '\\0' }; \/\/ "API"$/;"	v
ASK	ib/jts/EWrapper.h	/^enum TickType { BID_SIZE, BID, ASK, ASK_SIZE, LAST, LAST_SIZE,$/;"	e	enum:TickType
ASK_EFP_COMPUTATION	ib/jts/EWrapper.h	/^				ASK_EFP_COMPUTATION,$/;"	e	enum:TickType
ASK_EXCH	ib/jts/EWrapper.h	/^				ASK_EXCH,$/;"	e	enum:TickType
ASK_OPTION_COMPUTATION	ib/jts/EWrapper.h	/^				ASK_OPTION_COMPUTATION,$/;"	e	enum:TickType
ASK_SIZE	ib/jts/EWrapper.h	/^enum TickType { BID_SIZE, BID, ASK, ASK_SIZE, LAST, LAST_SIZE,$/;"	e	enum:TickType
ASK_YIELD	ib/jts/EWrapper.h	/^				ASK_YIELD,$/;"	e	enum:TickType
AUCTION_IMBALANCE	ib/jts/EWrapper.h	/^				AUCTION_IMBALANCE,$/;"	e	enum:TickType
AUCTION_IMPROVEMENT	ib/jts/Order.h	/^                       AUCTION_IMPROVEMENT = 2,$/;"	e	enum:AuctionStrategy
AUCTION_MATCH	ib/jts/Order.h	/^                       AUCTION_MATCH = 1,$/;"	e	enum:AuctionStrategy
AUCTION_PRICE	ib/jts/EWrapper.h	/^				AUCTION_PRICE,$/;"	e	enum:TickType
AUCTION_TRANSPARENT	ib/jts/Order.h	/^                       AUCTION_TRANSPARENT = 3 };$/;"	e	enum:AuctionStrategy
AUCTION_UNSET	ib/jts/Order.h	/^enum AuctionStrategy { AUCTION_UNSET = 0,$/;"	e	enum:AuctionStrategy
AUCTION_VOLUME	ib/jts/EWrapper.h	/^				AUCTION_VOLUME,$/;"	e	enum:TickType
AVG_OPT_VOLUME	ib/jts/EWrapper.h	/^				AVG_OPT_VOLUME,$/;"	e	enum:TickType
AVG_VOLUME	ib/jts/EWrapper.h	/^				AVG_VOLUME,$/;"	e	enum:TickType
AccountBase	opentrade/account.h	/^struct AccountBase {$/;"	s	namespace:opentrade
AccountBase	xquant/account.h	/^struct AccountBase {$/;"	s	namespace:opentrade
AccountBase	xquant/account1.h	/^struct AccountBase {$/;"	s	namespace:opentrade
AccountManager	opentrade/account.h	/^class AccountManager : public Singleton<AccountManager> {$/;"	c	namespace:opentrade
AccountManager	xquant/account.h	/^class AccountManager : public Singleton<AccountManager> {$/;"	c	namespace:opentrade
AccountManager	xquant/account1.h	/^class AccountManager : public Singleton<AccountManager> {$/;"	c	namespace:opentrade
Adapter	opentrade/adapter.h	/^class Adapter {$/;"	c	namespace:opentrade
Adapter	xquant/adapter.h	/^class Adapter {$/;"	c	namespace:opentrade
AdapterManager	opentrade/adapter.h	/^class AdapterManager {$/;"	c	namespace:opentrade
AdapterManager	xquant/adapter.h	/^class AdapterManager {$/;"	c	namespace:opentrade
AdapterMap	opentrade/adapter.h	/^  typedef std::unordered_map<std::string, T*> AdapterMap;$/;"	t	class:opentrade::AdapterManager
AdapterMap	xquant/adapter.h	/^  typedef std::unordered_map<std::string, T*> AdapterMap;$/;"	t	class:opentrade::AdapterManager
Add	opentrade/adapter.h	/^  void Add(T* adapter) { adapters_[adapter->name()] = adapter; }$/;"	f	class:opentrade::AdapterManager
Add	opentrade/market_data.cc	/^void MarketDataManager::Add(MarketDataAdapter* adapter) {$/;"	f	class:opentrade::MarketDataManager
Add	xquant/adapter.h	/^  void Add(T* adapter) { adapters_[adapter->name()] = adapter; }$/;"	f	class:opentrade::AdapterManager
Add	xquant/market_data.cc	/^void MarketDataManager::Add(MarketDataAdapter* adapter) {$/;"	f	class:opentrade::MarketDataManager
AddObj	opentrade/python.h	/^  void AddObj(const void* native, PyObject* obj) { objs_[native] = obj; }$/;"	f	class:opentrade::Python
AddObj	xquant/python.h	/^  void AddObj(const void* native, PyObject* obj) { objs_[native] = obj; }$/;"	f	class:opentrade::Python
AddTask	opentrade/task_pool.h	/^  void AddTask(const T& func) {$/;"	f	class:opentrade::TaskPool
AddTask	opentrade/task_pool.h	/^  void AddTask(const T& func, Tm t) {$/;"	f	class:opentrade::TaskPool
AddTask	xquant/task_pool.h	/^  void AddTask(const T& func) {$/;"	f	class:xquant::TaskPool
AddTask	xquant/task_pool.h	/^  void AddTask(const T& func, Tm t) {$/;"	f	class:xquant::TaskPool
AddTaskForward	xquant/task_pool.h	/^  void AddTaskForward(T &&func, Args&&...args) {$/;"	f	class:xquant::TaskPool
Aggression	algo/twap/twap.h	/^enum Aggression {$/;"	g	namespace:opentrade
Algo	opentrade/algo.h	/^class Algo : public Adapter {$/;"	c	namespace:opentrade
Algo	xquant/algo.h	/^class Algo : public Adapter {$/;"	c	namespace:opentrade
AlgoManager	opentrade/algo.h	/^class AlgoManager : public AdapterManager<Algo>, public Singleton<AlgoManager> {$/;"	c	namespace:opentrade
AlgoManager	xquant/algo.h	/^class AlgoManager : public AdapterManager<Algo>, public Singleton<AlgoManager> {$/;"	c	namespace:opentrade
AlgoRunner	opentrade/algo.h	/^class AlgoRunner {$/;"	c	namespace:opentrade
AlgoRunner	xquant/algo.h	/^class AlgoRunner {$/;"	c	namespace:opentrade
AsyncFileLog	fix/filelog.h	/^  AsyncFileLog(const std::string& path, const SessionID& sessionID)$/;"	f	class:FIX::AsyncFileLog
AsyncFileLog	fix/filelog.h	/^  AsyncFileLog(const std::string& path, const std::string& backupPath,$/;"	f	class:FIX::AsyncFileLog
AsyncFileLog	fix/filelog.h	/^  explicit AsyncFileLog(const std::string& path) : FileLog(path) {}$/;"	f	class:FIX::AsyncFileLog
AsyncFileLog	fix/filelog.h	/^class AsyncFileLog : public FileLog {$/;"	c	namespace:FIX
AsyncFileLogFactory	fix/filelog.h	/^  AsyncFileLogFactory(const std::string& path, const std::string& backupPath)$/;"	f	class:FIX::AsyncFileLogFactory
AsyncFileLogFactory	fix/filelog.h	/^  explicit AsyncFileLogFactory(const SessionSettings& settings)$/;"	f	class:FIX::AsyncFileLogFactory
AsyncFileLogFactory	fix/filelog.h	/^  explicit AsyncFileLogFactory(const std::string& path)$/;"	f	class:FIX::AsyncFileLogFactory
AsyncFileLogFactory	fix/filelog.h	/^class AsyncFileLogFactory : public FileLogFactory {$/;"	c	namespace:FIX
AsyncFileStore	fix/filestore.h	/^  AsyncFileStore(std::string path, const SessionID& s) : FileStore(path, s) {}$/;"	f	class:FIX::AsyncFileStore
AsyncFileStore	fix/filestore.h	/^class AsyncFileStore : public FileStore {$/;"	c	namespace:FIX
AsyncFileStoreFactory	fix/filestore.h	/^  explicit AsyncFileStoreFactory(const SessionSettings& settings)$/;"	f	class:FIX::AsyncFileStoreFactory
AsyncFileStoreFactory	fix/filestore.h	/^  explicit AsyncFileStoreFactory(const std::string& path)$/;"	f	class:FIX::AsyncFileStoreFactory
AsyncFileStoreFactory	fix/filestore.h	/^class AsyncFileStoreFactory : public FileStoreFactory {$/;"	c	namespace:FIX
AuctionStrategy	ib/jts/Order.h	/^enum AuctionStrategy { AUCTION_UNSET = 0,$/;"	g
BID	ib/jts/EWrapper.h	/^enum TickType { BID_SIZE, BID, ASK, ASK_SIZE, LAST, LAST_SIZE,$/;"	e	enum:TickType
BID_EFP_COMPUTATION	ib/jts/EWrapper.h	/^				BID_EFP_COMPUTATION,$/;"	e	enum:TickType
BID_EXCH	ib/jts/EWrapper.h	/^				BID_EXCH,$/;"	e	enum:TickType
BID_OPTION_COMPUTATION	ib/jts/EWrapper.h	/^				BID_OPTION_COMPUTATION,$/;"	e	enum:TickType
BID_SIZE	ib/jts/EWrapper.h	/^enum TickType { BID_SIZE, BID, ASK, ASK_SIZE, LAST, LAST_SIZE,$/;"	e	enum:TickType
BID_YIELD	ib/jts/EWrapper.h	/^				BID_YIELD,$/;"	e	enum:TickType
BOND_CONTRACT_DATA	ib/jts/EDecoder.h	/^const int BOND_CONTRACT_DATA                        = 18;$/;"	v
BOND_FACTOR_MULTIPLIER	ib/jts/EWrapper.h	/^				BOND_FACTOR_MULTIPLIER,$/;"	e	enum:TickType
BPIPE	md/bpipe/bpipe.h	/^class BPIPE : public opentrade::MarketDataAdapter, public bbg::EventHandler {$/;"	c
Bar	ib/jts/bar.h	/^struct Bar$/;"	s
BarData	ib/jts/EDecoder.h	/^struct BarData {$/;"	s	namespace:__anon1
BidAsk	ib/jts/PriceCondition.h	/^		BidAsk = 4,$/;"	e	enum:PriceCondition::Method
Bod	opentrade/position.h	/^struct Bod {$/;"	s	namespace:opentrade
Bod	xquant/position.h	/^struct Bod {$/;"	s	namespace:opentrade
BrokerAccount	opentrade/account.h	/^struct BrokerAccount : public AccountBase {$/;"	s	namespace:opentrade
BrokerAccount	xquant/account.h	/^struct BrokerAccount : public AccountBase {$/;"	s	namespace:opentrade
BrokerAccount	xquant/account1.h	/^struct BrokerAccount : public AccountBase {$/;"	s	namespace:opentrade
BrokerAccountMap	opentrade/account.h	/^  typedef std::unordered_map<Exchange::IdType, BrokerAccount*> BrokerAccountMap;$/;"	t	struct:opentrade::SubAccount
BrokerAccountMap	xquant/account.h	/^  typedef std::unordered_map<Exchange::IdType, BrokerAccount*> BrokerAccountMap;$/;"	t	struct:opentrade::SubAccount
BrokerAccountMap	xquant/account1.h	/^  typedef std::unordered_map<Exchange::IdType, BrokerAccount*> BrokerAccountMap;$/;"	t	struct:opentrade::SubAccount
BufferSizeHighMark	ib/jts/ESocket.cpp	/^static const size_t BufferSizeHighMark = 1 * 1024 * 1024; \/\/ 1Mb$/;"	v	file:
CANCEL_ACCOUNT_SUMMARY	ib/jts/EClient.h	/^const int CANCEL_ACCOUNT_SUMMARY        = 63;$/;"	m	namespace:ibapi::client_constants
CANCEL_ACCOUNT_UPDATES_MULTI	ib/jts/EClient.h	/^const int CANCEL_ACCOUNT_UPDATES_MULTI  = 77;$/;"	m	namespace:ibapi::client_constants
CANCEL_CALC_IMPLIED_VOLAT	ib/jts/EClient.h	/^const int CANCEL_CALC_IMPLIED_VOLAT     = 56;$/;"	m	namespace:ibapi::client_constants
CANCEL_CALC_OPTION_PRICE	ib/jts/EClient.h	/^const int CANCEL_CALC_OPTION_PRICE      = 57;$/;"	m	namespace:ibapi::client_constants
CANCEL_FUNDAMENTAL_DATA	ib/jts/EClient.h	/^const int CANCEL_FUNDAMENTAL_DATA       = 53;$/;"	m	namespace:ibapi::client_constants
CANCEL_HEAD_TIMESTAMP	ib/jts/EClient.h	/^const int CANCEL_HEAD_TIMESTAMP         = 90;$/;"	m	namespace:ibapi::client_constants
CANCEL_HISTOGRAM_DATA	ib/jts/EClient.h	/^const int CANCEL_HISTOGRAM_DATA         = 89;$/;"	m	namespace:ibapi::client_constants
CANCEL_HISTORICAL_DATA	ib/jts/EClient.h	/^const int CANCEL_HISTORICAL_DATA        = 25;$/;"	m	namespace:ibapi::client_constants
CANCEL_MKT_DATA	ib/jts/EClient.h	/^const int CANCEL_MKT_DATA               = 2;$/;"	m	namespace:ibapi::client_constants
CANCEL_MKT_DEPTH	ib/jts/EClient.h	/^const int CANCEL_MKT_DEPTH              = 11;$/;"	m	namespace:ibapi::client_constants
CANCEL_NEWS_BULLETINS	ib/jts/EClient.h	/^const int CANCEL_NEWS_BULLETINS         = 13;$/;"	m	namespace:ibapi::client_constants
CANCEL_ORDER	ib/jts/EClient.h	/^const int CANCEL_ORDER                  = 4;$/;"	m	namespace:ibapi::client_constants
CANCEL_PNL	ib/jts/EClient.h	/^const int CANCEL_PNL                    = 93;$/;"	m	namespace:ibapi::client_constants
CANCEL_PNL_SINGLE	ib/jts/EClient.h	/^const int CANCEL_PNL_SINGLE             = 95;$/;"	m	namespace:ibapi::client_constants
CANCEL_POSITIONS	ib/jts/EClient.h	/^const int CANCEL_POSITIONS              = 64;$/;"	m	namespace:ibapi::client_constants
CANCEL_POSITIONS_MULTI	ib/jts/EClient.h	/^const int CANCEL_POSITIONS_MULTI        = 75;$/;"	m	namespace:ibapi::client_constants
CANCEL_REAL_TIME_BARS	ib/jts/EClient.h	/^const int CANCEL_REAL_TIME_BARS         = 51;$/;"	m	namespace:ibapi::client_constants
CANCEL_SCANNER_SUBSCRIPTION	ib/jts/EClient.h	/^const int CANCEL_SCANNER_SUBSCRIPTION   = 23;$/;"	m	namespace:ibapi::client_constants
CANCEL_TICK_BY_TICK_DATA	ib/jts/EClient.h	/^const int CANCEL_TICK_BY_TICK_DATA      = 98;$/;"	m	namespace:ibapi::client_constants
CFunc	opentrade/adapter.h	/^  typedef Adapter* (*CFunc)();$/;"	t	class:opentrade::Adapter
CFunc	xquant/adapter.h	/^  typedef Adapter* (*CFunc)();$/;"	t	class:opentrade::Adapter
CLIENT_VERSION	ib/jts/EClient.h	/^const int CLIENT_VERSION    = 66;$/;"	m	namespace:ibapi::client_constants
CLOSE	ib/jts/EWrapper.h	/^				HIGH, LOW, VOLUME, CLOSE,$/;"	e	enum:TickType
CLOSE_EFP_COMPUTATION	ib/jts/EWrapper.h	/^				CLOSE_EFP_COMPUTATION,$/;"	e	enum:TickType
CLOSE_POS	ib/jts/Contract.h	/^enum LegOpenClose { SAME_POS, OPEN_POS, CLOSE_POS, UNKNOWN_POS };$/;"	e	enum:LegOpenClose
COMMISSION_REPORT	ib/jts/EDecoder.h	/^const int COMMISSION_REPORT                         = 59;$/;"	v
CONTRACT_DATA	ib/jts/EDecoder.h	/^const int CONTRACT_DATA                             = 10;$/;"	v
CONTRACT_DATA_END	ib/jts/EDecoder.h	/^const int CONTRACT_DATA_END                         = 52;$/;"	v
CREDITMAN_MARK_PRICE	ib/jts/EWrapper.h	/^				CREDITMAN_MARK_PRICE,$/;"	e	enum:TickType
CREDITMAN_SLOW_MARK_PRICE	ib/jts/EWrapper.h	/^				CREDITMAN_SLOW_MARK_PRICE,$/;"	e	enum:TickType
CS_CONNECTED	ib/jts/EClient.h	/^		CS_CONNECTED,$/;"	e	enum:EClient::ConnState
CS_CONNECTING	ib/jts/EClient.h	/^		CS_CONNECTING,$/;"	e	enum:EClient::ConnState
CS_DISCONNECTED	ib/jts/EClient.h	/^		CS_DISCONNECTED,$/;"	e	enum:EClient::ConnState
CS_REDIRECT	ib/jts/EClient.h	/^		CS_REDIRECT$/;"	e	enum:EClient::ConnState
CURRENT_TIME	ib/jts/EDecoder.h	/^const int CURRENT_TIME                              = 49;$/;"	v
CUSTOMER	ib/jts/Order.h	/^enum Origin { CUSTOMER,$/;"	e	enum:Origin
CUST_OPTION_COMPUTATION	ib/jts/EWrapper.h	/^				CUST_OPTION_COMPUTATION,$/;"	e	enum:TickType
Cancel	opentrade/algo.cc	/^bool Algo::Cancel(const Order& ord) {$/;"	f	class:opentrade::Algo
Cancel	opentrade/exchange_connectivity.cc	/^bool ExchangeConnectivityManager::Cancel(const Order& orig_ord) {$/;"	f	class:opentrade::ExchangeConnectivityManager
Cancel	opentrade/exchange_connectivity.cc	/^static inline bool Cancel(Order* cancel_order) {$/;"	f	namespace:opentrade
Cancel	opentrade/order.cc	/^void GlobalOrderBook::Cancel() {$/;"	f	class:opentrade::GlobalOrderBook
Cancel	xquant/algo.cc	/^bool Algo::Cancel(const Order& ord) {$/;"	f	class:opentrade::Algo
Cancel	xquant/exchange_connectivity.cc	/^bool ExchangeConnectivityManager::Cancel(const Order& orig_ord) {$/;"	f	class:opentrade::ExchangeConnectivityManager
Cancel	xquant/exchange_connectivity.cc	/^static inline bool Cancel(Order* cancel_order) {$/;"	f	namespace:opentrade
Cancel	xquant/order.cc	/^void GlobalOrderBook::Cancel() {$/;"	f	class:opentrade::GlobalOrderBook
Check	opentrade/risk.cc	/^bool RiskManager::Check(const Order& ord) {$/;"	f	class:opentrade::RiskManager
Check	opentrade/risk.cc	/^static bool Check(const char* name, const Order& ord, const AccountBase& acc,$/;"	f	namespace:opentrade
Check	xquant/risk.cc	/^bool RiskManager::Check(const Order& ord) {$/;"	f	class:opentrade::RiskManager
Check	xquant/risk.cc	/^static bool Check(const char* name, const Order& ord, const AccountBase& acc,$/;"	f	namespace:opentrade
CheckAdapter	opentrade/exchange_connectivity.cc	/^static inline bool CheckAdapter(ExchangeConnectivityAdapter* adapter,$/;"	f	namespace:opentrade
CheckAdapter	xquant/exchange_connectivity.cc	/^static inline bool CheckAdapter(ExchangeConnectivityAdapter* adapter,$/;"	f	namespace:opentrade
CheckMsgRate	opentrade/risk.cc	/^bool RiskManager::CheckMsgRate(const Order& ord) {$/;"	f	class:opentrade::RiskManager
CheckMsgRate	opentrade/risk.cc	/^static bool CheckMsgRate(const char* name, const AccountBase& acc,$/;"	f	namespace:opentrade
CheckMsgRate	xquant/risk.cc	/^bool RiskManager::CheckMsgRate(const Order& ord) {$/;"	f	class:opentrade::RiskManager
CheckMsgRate	xquant/risk.cc	/^static bool CheckMsgRate(const char* name, const AccountBase& acc,$/;"	f	namespace:opentrade
CheckOffset	ib/jts/EDecoder.cpp	/^bool EDecoder::CheckOffset(const char* ptr, const char* endPtr)$/;"	f	class:EDecoder
CleanupBuffer	ib/jts/ESocket.cpp	/^void ESocket::CleanupBuffer(std::vector<char>& buffer, int processed)$/;"	f	class:ESocket
Clone	opentrade/adapter.h	/^  Adapter* Clone() { return create_func_(); }$/;"	f	class:opentrade::Adapter
Clone	xquant/adapter.h	/^  Adapter* Clone() { return create_func_(); }$/;"	f	class:opentrade::Adapter
CloneComboLegs	ib/jts/Contract.h	/^Contract::CloneComboLegs(ComboLegListSPtr& dst, const ComboLegListSPtr& src)$/;"	f	class:Contract
CloneOrderComboLegs	ib/jts/Order.h	/^Order::CloneOrderComboLegs(OrderComboLegListSPtr& dst, const OrderComboLegListSPtr& src)$/;"	f	class:Order
Close	opentrade/connection.h	/^  void Close() { closed_ = true; }$/;"	f	class:opentrade::Connection
Close	xquant/connection.h	/^  void Close() { closed_ = true; }$/;"	f	class:opentrade::Connection
CodeMsgPair	ib/jts/TwsSocketClientErrors.h	/^	CodeMsgPair(int code, std::string msg) : m_errorCode(code), m_errorMsg(msg) {$/;"	f	class:CodeMsgPair
CodeMsgPair	ib/jts/TwsSocketClientErrors.h	/^class CodeMsgPair {$/;"	c
ComboLeg	ib/jts/Contract.h	/^	ComboLeg()$/;"	f	struct:ComboLeg
ComboLeg	ib/jts/Contract.h	/^struct ComboLeg$/;"	s
ComboLegList	ib/jts/Contract.h	/^	typedef std::vector<ComboLegSPtr> ComboLegList;$/;"	t	struct:Contract
ComboLegListSPtr	ib/jts/Contract.h	/^	typedef std::shared_ptr<ComboLegList> ComboLegListSPtr;$/;"	t	struct:Contract
ComboLegSPtr	ib/jts/Contract.h	/^typedef std::shared_ptr<ComboLeg> ComboLegSPtr;$/;"	t
CommissionReport	ib/jts/CommissionReport.h	/^	CommissionReport()$/;"	f	struct:CommissionReport
CommissionReport	ib/jts/CommissionReport.h	/^struct CommissionReport$/;"	s
Confirmation	opentrade/order.h	/^struct Confirmation {$/;"	s	namespace:opentrade
Confirmation	xquant/order.h	/^struct Confirmation {$/;"	s	namespace:opentrade
ConnState	ib/jts/EClient.h	/^	enum ConnState {$/;"	g	class:EClient
Connect	ib/ib.cc	/^bool IB::Connect(const char* host, unsigned int port, int client_id) {$/;"	f	class:IB
Connect	ib/ib.cc	/^void IB::Connect(bool delay) {$/;"	f	class:IB
Connection	opentrade/connection.cc	/^Connection::Connection(Transport::Ptr transport,$/;"	f	class:opentrade::Connection
Connection	opentrade/connection.h	/^class Connection : public std::enable_shared_from_this<Connection> {$/;"	c	namespace:opentrade
Connection	xquant/connection.cc	/^Connection::Connection(Transport::Ptr transport,$/;"	f	class:opentrade::Connection
Connection	xquant/connection.h	/^class Connection : public std::enable_shared_from_this<Connection> {$/;"	c	namespace:opentrade
Contract	ib/jts/Contract.h	/^	Contract()$/;"	f	struct:Contract
Contract	ib/jts/Contract.h	/^struct Contract$/;"	s
Contract	opentrade/order.h	/^struct Contract {$/;"	s	namespace:opentrade
Contract	xquant/order.h	/^struct Contract {$/;"	s	namespace:opentrade
ContractCondition	ib/jts/ContractCondition.h	/^class TWSAPIDLLEXP ContractCondition : public OperatorCondition {$/;"	c
ContractDescription	ib/jts/Contract.h	/^struct ContractDescription$/;"	s
ContractDetails	ib/jts/Contract.h	/^	ContractDetails()$/;"	f	struct:ContractDetails
ContractDetails	ib/jts/Contract.h	/^struct ContractDetails$/;"	s
CreateAlgo	opentrade/python.cc	/^static PyObject *CreateAlgo(Algo *algo) {$/;"	f	namespace:opentrade
CreateAlgo	xquant/python.cc	/^static PyObject *CreateAlgo(Algo *algo) {$/;"	f	namespace:opentrade
CreateContract	ib/ib.cc	/^static inline decltype(auto) CreateContract(const opentrade::Security& sec) {$/;"	f
CreateInstrument	opentrade/python.cc	/^static PyObject *CreateInstrument(Algo *algo, const Instrument *inst,$/;"	f	namespace:opentrade
CreateInstrument	xquant/python.cc	/^static PyObject *CreateInstrument(Algo *algo, const Instrument *inst,$/;"	f	namespace:opentrade
CreateMd	opentrade/python.cc	/^static PyObject *CreateMd(const MarketData *md) {$/;"	f	namespace:opentrade
CreateMd	xquant/python.cc	/^static PyObject *CreateMd(const MarketData *md) {$/;"	f	namespace:opentrade
CreateObject	opentrade/python.cc	/^static inline PyObject *CreateObject(const void *native = nullptr,$/;"	f	namespace:opentrade
CreateObject	xquant/python.cc	/^static inline PyObject *CreateObject(const void *native = nullptr,$/;"	f	namespace:opentrade
CreateOrder	opentrade/python.cc	/^static PyObject *CreateOrder(Order *order, PyObject *instrument,$/;"	f	namespace:opentrade
CreateOrder	xquant/python.cc	/^static PyObject *CreateOrder(Order *order, PyObject *instrument,$/;"	f	namespace:opentrade
CreateParamsDict	opentrade/python.cc	/^static PyObject *CreateParamsDict(const Algo::ParamMap &params) {$/;"	f	namespace:opentrade
CreateParamsDict	xquant/python.cc	/^static PyObject *CreateParamsDict(const Algo::ParamMap &params) {$/;"	f	namespace:opentrade
CreateSecurity	opentrade/python.cc	/^static PyObject *CreateSecurity(const Security *sec) {$/;"	f	namespace:opentrade
CreateSecurity	xquant/python.cc	/^static PyObject *CreateSecurity(const Security *sec) {$/;"	f	namespace:opentrade
CreateSubAccount	opentrade/python.cc	/^static inline PyObject *CreateSubAccount(const SubAccount *acc) {$/;"	f	namespace:opentrade
CreateSubAccount	xquant/python.cc	/^static inline PyObject *CreateSubAccount(const SubAccount *acc) {$/;"	f	namespace:opentrade
CurrentPrice	opentrade/security.cc	/^double Security::CurrentPrice() const {$/;"	f	class:opentrade::Security
CurrentPrice	xquant/security.cc	/^double Security::CurrentPrice() const {$/;"	f	class:opentrade::Security
DECODE_FIELD	ib/jts/EDecoder.h	334;"	d
DECODE_FIELD_MAX	ib/jts/EDecoder.h	336;"	d
DECODE_FIELD_TIME	ib/jts/EDecoder.h	335;"	d
DELAYED	ib/jts/CommonDefs.h	/^	DELAYED = 3,$/;"	e	enum:MarketDataType
DELAYED_ASK	ib/jts/EWrapper.h	/^				DELAYED_ASK,$/;"	e	enum:TickType
DELAYED_ASK_OPTION_COMPUTATION	ib/jts/EWrapper.h	/^				DELAYED_ASK_OPTION_COMPUTATION,$/;"	e	enum:TickType
DELAYED_ASK_SIZE	ib/jts/EWrapper.h	/^				DELAYED_ASK_SIZE,$/;"	e	enum:TickType
DELAYED_BID	ib/jts/EWrapper.h	/^				DELAYED_BID,$/;"	e	enum:TickType
DELAYED_BID_OPTION_COMPUTATION	ib/jts/EWrapper.h	/^				DELAYED_BID_OPTION_COMPUTATION,$/;"	e	enum:TickType
DELAYED_BID_SIZE	ib/jts/EWrapper.h	/^				DELAYED_BID_SIZE,$/;"	e	enum:TickType
DELAYED_CLOSE	ib/jts/EWrapper.h	/^				DELAYED_CLOSE,$/;"	e	enum:TickType
DELAYED_FROZEN	ib/jts/CommonDefs.h	/^	DELAYED_FROZEN = 4$/;"	e	enum:MarketDataType
DELAYED_HIGH	ib/jts/EWrapper.h	/^				DELAYED_HIGH,$/;"	e	enum:TickType
DELAYED_LAST	ib/jts/EWrapper.h	/^				DELAYED_LAST,$/;"	e	enum:TickType
DELAYED_LAST_OPTION_COMPUTATION	ib/jts/EWrapper.h	/^				DELAYED_LAST_OPTION_COMPUTATION,$/;"	e	enum:TickType
DELAYED_LAST_SIZE	ib/jts/EWrapper.h	/^				DELAYED_LAST_SIZE,$/;"	e	enum:TickType
DELAYED_LAST_TIMESTAMP	ib/jts/EWrapper.h	/^				DELAYED_LAST_TIMESTAMP,$/;"	e	enum:TickType
DELAYED_LOW	ib/jts/EWrapper.h	/^				DELAYED_LOW,$/;"	e	enum:TickType
DELAYED_MODEL_OPTION_COMPUTATION	ib/jts/EWrapper.h	/^				DELAYED_MODEL_OPTION_COMPUTATION,$/;"	e	enum:TickType
DELAYED_OPEN	ib/jts/EWrapper.h	/^				DELAYED_OPEN,$/;"	e	enum:TickType
DELAYED_VOLUME	ib/jts/EWrapper.h	/^				DELAYED_VOLUME,$/;"	e	enum:TickType
DELTA_NEUTRAL_VALIDATION	ib/jts/EDecoder.h	/^const int DELTA_NEUTRAL_VALIDATION                  = 56;$/;"	v
DISPLAY_GROUP_LIST	ib/jts/EDecoder.h	/^const int DISPLAY_GROUP_LIST                        = 67;$/;"	v
DISPLAY_GROUP_UPDATED	ib/jts/EDecoder.h	/^const int DISPLAY_GROUP_UPDATED                     = 68;$/;"	v
DataSrc	opentrade/market_data.h	/^struct DataSrc {$/;"	s	namespace:opentrade
DataSrc	xquant/market_data.h	/^struct DataSrc {$/;"	s	namespace:opentrade
Database	opentrade/database.h	/^class Database {$/;"	c	namespace:opentrade
Database	xquant/database.h	/^class Database {$/;"	c	namespace:opentrade
DecodeField	ib/jts/EDecoder.cpp	/^bool EDecoder::DecodeField(bool& boolValue, const char*& ptr, const char* endPtr)$/;"	f	class:EDecoder
DecodeField	ib/jts/EDecoder.cpp	/^bool EDecoder::DecodeField(char& charValue,$/;"	f	class:EDecoder
DecodeField	ib/jts/EDecoder.cpp	/^bool EDecoder::DecodeField(double& doubleValue, const char*& ptr, const char* endPtr)$/;"	f	class:EDecoder
DecodeField	ib/jts/EDecoder.cpp	/^bool EDecoder::DecodeField(int& intValue, const char*& ptr, const char* endPtr)$/;"	f	class:EDecoder
DecodeField	ib/jts/EDecoder.cpp	/^bool EDecoder::DecodeField(long long& longLongValue, const char*& ptr, const char* endPtr)$/;"	f	class:EDecoder
DecodeField	ib/jts/EDecoder.cpp	/^bool EDecoder::DecodeField(long& longValue, const char*& ptr, const char* endPtr)$/;"	f	class:EDecoder
DecodeField	ib/jts/EDecoder.cpp	/^bool EDecoder::DecodeField(std::string& stringValue,$/;"	f	class:EDecoder
DecodeFieldMax	ib/jts/EDecoder.cpp	/^bool EDecoder::DecodeFieldMax(double& doubleValue, const char*& ptr, const char* endPtr)$/;"	f	class:EDecoder
DecodeFieldMax	ib/jts/EDecoder.cpp	/^bool EDecoder::DecodeFieldMax(int& intValue, const char*& ptr, const char* endPtr)$/;"	f	class:EDecoder
DecodeFieldMax	ib/jts/EDecoder.cpp	/^bool EDecoder::DecodeFieldMax(long& longValue, const char*& ptr, const char* endPtr)$/;"	f	class:EDecoder
DecodeFieldTime	ib/jts/EDecoder.cpp	/^bool EDecoder::DecodeFieldTime(time_t& time_tValue, const char*& ptr, const char* endPtr)$/;"	f	class:EDecoder
Default	ib/jts/PriceCondition.h	/^		Default = 0,$/;"	e	enum:PriceCondition::Method
DefaultEWrapper	ib/jts/DefaultEWrapper.h	/^class TWSAPIDLLEXP DefaultEWrapper :$/;"	c
DeltaNeutralContract	ib/jts/Contract.h	/^	DeltaNeutralContract()$/;"	f	struct:DeltaNeutralContract
DeltaNeutralContract	ib/jts/Contract.h	/^struct DeltaNeutralContract$/;"	s
Depth	opentrade/market_data.h	/^  typedef Quote Depth[kDepthSize];$/;"	t	struct:opentrade::MarketData
Depth	xquant/market_data.h	/^  typedef Quote Depth[kDepthSize];$/;"	t	struct:opentrade::MarketData
DepthMktDataDescription	ib/jts/DepthMktDataDescription.h	/^	DepthMktDataDescription()$/;"	f	struct:DepthMktDataDescription
DepthMktDataDescription	ib/jts/DepthMktDataDescription.h	/^struct DepthMktDataDescription$/;"	s
DerivativeSecTypesList	ib/jts/Contract.h	/^	typedef std::vector<std::string> DerivativeSecTypesList;$/;"	t	struct:ContractDescription
Disconnect	ib/ib.cc	/^void IB::Disconnect() {$/;"	f	class:IB
DoubleBidAsk	ib/jts/PriceCondition.h	/^		DoubleBidAsk = 1,$/;"	e	enum:PriceCondition::Method
DoubleLast	ib/jts/PriceCondition.h	/^		DoubleLast = 3,$/;"	e	enum:PriceCondition::Method
ECONNREFUSED	ib/jts/EPosixClientSocketPlatform.h	19;"	d
EClient	ib/jts/EClient.cpp	/^EClient::EClient( EWrapper *ptr, ETransport *pTransport)$/;"	f	class:EClient
EClient	ib/jts/EClient.h	/^class TWSAPIDLLEXP EClient$/;"	c
EClientMsgSink	ib/jts/EClientMsgSink.h	/^struct EClientMsgSink$/;"	s
EClientSocket	ib/jts/EClientSocket.cpp	/^EClientSocket::EClientSocket(EWrapper *ptr, EReaderSignal *pSignal) : EClient( ptr, new ESocket())$/;"	f	class:EClientSocket
EClientSocket	ib/jts/EClientSocket.h	/^class TWSAPIDLLEXP EClientSocket : public EClient, public EClientMsgSink$/;"	c
EDecoder	ib/jts/EDecoder.cpp	/^EDecoder::EDecoder(int serverVersion, EWrapper *callback, EClientMsgSink *clientMsgSink) {$/;"	f	class:EDecoder
EDecoder	ib/jts/EDecoder.h	/^class TWSAPIDLLEXP EDecoder$/;"	c
EISCONN	ib/jts/EPosixClientSocketPlatform.h	17;"	d
EMessage	ib/jts/EMessage.cpp	/^EMessage::EMessage(const std::vector<char> &data) {$/;"	f	class:EMessage
EMessage	ib/jts/EMessage.h	/^class TWSAPIDLLEXP EMessage$/;"	c
EMutex	ib/jts/EMutex.cpp	/^EMutex::EMutex() {$/;"	f	class:EMutex
EMutex	ib/jts/EMutex.h	/^class TWSAPIDLLEXP EMutex$/;"	c
EMutexGuard	ib/jts/EMutex.cpp	/^EMutexGuard::EMutexGuard(EMutex& m) : m_mutex(m) {$/;"	f	class:EMutexGuard
EMutexGuard	ib/jts/EMutex.h	/^class TWSAPIDLLEXP EMutexGuard$/;"	c
ENCODE_CONTRACT	ib/jts/EClient.h	430;"	d
ENCODE_FIELD	ib/jts/EClient.h	432;"	d
ENCODE_FIELD_MAX	ib/jts/EClient.h	433;"	d
ENCODE_TAGVALUELIST	ib/jts/EClient.h	431;"	d
ERR_MSG	ib/jts/EDecoder.h	/^const int ERR_MSG                                   = 4;$/;"	v
EReader	ib/jts/EReader.cpp	/^EReader::EReader(EClientSocket *clientSocket, EReaderSignal *signal)$/;"	f	class:EReader
EReader	ib/jts/EReader.h	/^class TWSAPIDLLEXP EReader$/;"	c
EReaderOSSignal	ib/jts/EReaderOSSignal.cpp	/^EReaderOSSignal::EReaderOSSignal(unsigned long waitTimeout)$/;"	f	class:EReaderOSSignal
EReaderOSSignal	ib/jts/EReaderOSSignal.h	/^class TWSAPIDLLEXP EReaderOSSignal :$/;"	c
EReaderSignal	ib/jts/EReaderSignal.h	/^struct EReaderSignal$/;"	s
EReaderWMSignal	ib/jts/EReaderWMSignal.cpp	/^EReaderWMSignal::EReaderWMSignal(HWND hWnd, int wmUserOffset) {$/;"	f	class:EReaderWMSignal
EReaderWMSignal	ib/jts/EReaderWMSignal.h	/^class EReaderWMSignal :$/;"	c
ESocket	ib/jts/ESocket.cpp	/^ESocket::ESocket() {$/;"	f	class:ESocket
ESocket	ib/jts/ESocket.h	/^class ESocket :$/;"	c
ETransport	ib/jts/ETransport.h	/^struct ETransport$/;"	s
EWOULDBLOCK	ib/jts/EPosixClientSocketPlatform.h	18;"	d
EWRAPPER_VIRTUAL_IMPL	ib/jts/EWrapper.h	130;"	d
EWRAPPER_VIRTUAL_IMPL	ib/jts/EWrapper_prototypes.h	105;"	d
EWRAPPER_VIRTUAL_IMPL	ib/jts/EWrapper_prototypes.h	7;"	d
EWrapper	ib/jts/EWrapper.h	/^class EWrapper$/;"	c
EXCHANGE_AVAIL_MSG	ib/jts/EClient.h	/^const int EXCHANGE_AVAIL_MSG    = 2;    \/\/ control message specifing that an exchange is available for trading$/;"	m	namespace:ibapi::client_constants
EXCHANGE_UNAVAIL_MSG	ib/jts/EClient.h	/^const int EXCHANGE_UNAVAIL_MSG  = 3;    \/\/ control message specifing that an exchange is unavailable for trading$/;"	m	namespace:ibapi::client_constants
EXECUTION_DATA	ib/jts/EDecoder.h	/^const int EXECUTION_DATA                            = 11;$/;"	v
EXECUTION_DATA_END	ib/jts/EDecoder.h	/^const int EXECUTION_DATA_END                        = 55;$/;"	v
EXERCISE_OPTIONS	ib/jts/EClient.h	/^const int EXERCISE_OPTIONS              = 21;$/;"	m	namespace:ibapi::client_constants
EncodeContract	ib/jts/EClient.cpp	/^void EClient::EncodeContract(std::ostream& os, const Contract &contract)$/;"	f	class:EClient
EncodeField	ib/jts/EClient.cpp	/^void EClient::EncodeField<bool>(std::ostream& os, bool boolValue)$/;"	f	class:EClient
EncodeField	ib/jts/EClient.cpp	/^void EClient::EncodeField<double>(std::ostream& os, double doubleValue)$/;"	f	class:EClient
EncodeField	ib/jts/EClient.h	/^void EClient::EncodeField(std::ostream& os, T value)$/;"	f	class:EClient
EncodeFieldMax	ib/jts/EClient.cpp	/^void EClient::EncodeFieldMax(std::ostream& os, double doubleValue)$/;"	f	class:EClient
EncodeFieldMax	ib/jts/EClient.cpp	/^void EClient::EncodeFieldMax(std::ostream& os, int intValue)$/;"	f	class:EClient
EncodeTagValueList	ib/jts/EClient.cpp	/^void EClient::EncodeTagValueList(std::ostream& os, const TagValueListSPtr &tagValueList) $/;"	f	class:EClient
Enter	ib/jts/EMutex.cpp	/^void EMutex::Enter() {$/;"	f	class:EMutex
Exchange	opentrade/security.h	/^struct Exchange {$/;"	s	namespace:opentrade
Exchange	xquant/security.h	/^struct Exchange {$/;"	s	namespace:opentrade
ExchangeConnectivityAdapter	opentrade/exchange_connectivity.h	/^class ExchangeConnectivityAdapter : public virtual NetworkAdapter {$/;"	c	namespace:opentrade
ExchangeConnectivityAdapter	xquant/exchange_connectivity.h	/^class ExchangeConnectivityAdapter : public virtual NetworkAdapter {$/;"	c	namespace:opentrade
ExchangeConnectivityManager	opentrade/exchange_connectivity.h	/^class ExchangeConnectivityManager$/;"	c	namespace:opentrade
ExchangeConnectivityManager	xquant/exchange_connectivity.h	/^class ExchangeConnectivityManager$/;"	c	namespace:opentrade
Execution	ib/jts/Execution.h	/^	Execution()$/;"	f	struct:Execution
Execution	ib/jts/Execution.h	/^struct Execution$/;"	s
Execution	ib/jts/OrderCondition.h	/^		Execution = 5,$/;"	e	enum:OrderCondition::OrderConditionType
ExecutionCondition	ib/jts/executioncondition.h	/^	ExecutionCondition() { }$/;"	f	class:ExecutionCondition
ExecutionCondition	ib/jts/executioncondition.h	/^class TWSAPIDLLEXP ExecutionCondition : public OrderCondition {$/;"	c
ExecutionFilter	ib/jts/Execution.h	/^	ExecutionFilter()$/;"	f	struct:ExecutionFilter
ExecutionFilter	ib/jts/Execution.h	/^struct ExecutionFilter$/;"	s
FAMILY_CODES	ib/jts/EDecoder.h	/^const int FAMILY_CODES                              = 78;$/;"	v
FIRM	ib/jts/Order.h	/^              FIRM,$/;"	e	enum:Origin
FIX	fix/filelog.h	/^namespace FIX {$/;"	n
FIX	fix/filestore.h	/^namespace FIX {$/;"	n
FIX_FILELOG_H_	fix/filelog.h	2;"	d
FIX_FILESTORE_H_	fix/filestore.h	2;"	d
FIX_FIX_H_	fix/fix.h	2;"	d
FROZEN	ib/jts/CommonDefs.h	/^	FROZEN = 2,$/;"	e	enum:MarketDataType
FUNDAMENTAL_DATA	ib/jts/EDecoder.h	/^const int FUNDAMENTAL_DATA                          = 51;$/;"	v
FUNDAMENTAL_RATIOS	ib/jts/EWrapper.h	/^				FUNDAMENTAL_RATIOS,$/;"	e	enum:TickType
FUTURES_OPEN_INTEREST	ib/jts/EWrapper.h	/^				FUTURES_OPEN_INTEREST,$/;"	e	enum:TickType
FamilyCode	ib/jts/FamilyCode.h	/^struct FamilyCode$/;"	s
FindFieldEnd	ib/jts/EDecoder.cpp	/^const char* EDecoder::FindFieldEnd(const char* ptr, const char* endPtr)$/;"	f	class:EDecoder
FindInMap	opentrade/utility.h	/^const typename V::mapped_type& FindInMap(const V& map,$/;"	f	namespace:opentrade
FindInMap	xquant/utility.h	/^const typename V::mapped_type& FindInMap(const V& map,$/;"	f	namespace:xquant
Fix	fix/fix.h	/^class Fix : public FIX::Application,$/;"	c	namespace:opentrade
Func	opentrade/adapter.h	/^  typedef std::function<Adapter*()> Func;$/;"	t	class:opentrade::Adapter
Func	xquant/adapter.h	/^  typedef std::function<Adapter*()> Func;$/;"	t	class:opentrade::Adapter
GROUPS	ib/jts/CommonDefs.h	/^enum faDataType { GROUPS=1, PROFILES, ALIASES } ;$/;"	e	enum:faDataType
Get	opentrade/algo.h	/^  Algo* Get(const std::string& token) {$/;"	f	class:opentrade::AlgoManager
Get	opentrade/connection.cc	/^inline T Get(const json& j) {$/;"	f	namespace:opentrade
Get	opentrade/connection.cc	/^inline bool Get(const json& j) {$/;"	f	namespace:opentrade
Get	opentrade/connection.cc	/^inline double Get(const json& j) {$/;"	f	namespace:opentrade
Get	opentrade/connection.cc	/^inline std::string Get(const json& j) {$/;"	f	namespace:opentrade
Get	opentrade/logger.h	/^  static auto Get(const std::string& name) {$/;"	f	class:opentrade::Logger
Get	opentrade/market_data.cc	/^const MarketData& MarketDataManager::Get(Security::IdType id,$/;"	f	class:opentrade::MarketDataManager
Get	opentrade/market_data.cc	/^const MarketData& MarketDataManager::Get(const Security& sec,$/;"	f	class:opentrade::MarketDataManager
Get	opentrade/order.h	/^  Order* Get(Order::IdType id) {$/;"	f	class:opentrade::GlobalOrderBook
Get	opentrade/position.h	/^  const Position& Get(const BrokerAccount& acc, const Security& sec) const {$/;"	f	class:opentrade::PositionManager
Get	opentrade/position.h	/^  const Position& Get(const SubAccount& acc, const Security& sec) const {$/;"	f	class:opentrade::PositionManager
Get	opentrade/position.h	/^  const Position& Get(const User& user, const Security& sec) const {$/;"	f	class:opentrade::PositionManager
Get	opentrade/security.h	/^  const Security* Get(Security::IdType id) {$/;"	f	class:opentrade::SecurityManager
Get	xquant/algo.h	/^  Algo* Get(const std::string& token) {$/;"	f	class:opentrade::AlgoManager
Get	xquant/connection.cc	/^inline T Get(const json& j) {$/;"	f	namespace:opentrade
Get	xquant/connection.cc	/^inline bool Get(const json& j) {$/;"	f	namespace:opentrade
Get	xquant/connection.cc	/^inline double Get(const json& j) {$/;"	f	namespace:opentrade
Get	xquant/connection.cc	/^inline std::string Get(const json& j) {$/;"	f	namespace:opentrade
Get	xquant/logger.h	/^  static auto Get(const std::string& name) {$/;"	f	class:opentrade::Logger
Get	xquant/market_data.cc	/^const MarketData& MarketDataManager::Get(Security::IdType id,$/;"	f	class:opentrade::MarketDataManager
Get	xquant/market_data.cc	/^const MarketData& MarketDataManager::Get(const Security& sec,$/;"	f	class:opentrade::MarketDataManager
Get	xquant/order.h	/^  Order* Get(Order::IdType id) {$/;"	f	class:opentrade::GlobalOrderBook
Get	xquant/position.h	/^  const Position& Get(const BrokerAccount& acc, const Security& sec) const {$/;"	f	class:opentrade::PositionManager
Get	xquant/position.h	/^  const Position& Get(const SubAccount& acc, const Security& sec) const {$/;"	f	class:opentrade::PositionManager
Get	xquant/position.h	/^  const Position& Get(const User& user, const Security& sec) const {$/;"	f	class:opentrade::PositionManager
Get	xquant/security.h	/^  const Security* Get(Security::IdType id) {$/;"	f	class:opentrade::SecurityManager
GetAdapter	opentrade/adapter.h	/^  T* GetAdapter(const std::string& name) { return FindInMap(adapters_, name); }$/;"	f	class:opentrade::AdapterManager
GetAdapter	xquant/adapter.h	/^  T* GetAdapter(const std::string& name) { return FindInMap(adapters_, name); }$/;"	f	class:opentrade::AdapterManager
GetAddress	opentrade/connection.h	/^  std::string GetAddress() const { return transport_->GetAddress(); }$/;"	f	class:opentrade::Connection
GetAddress	opentrade/server.cc	/^  std::string GetAddress() const { return ws_->remote_endpoint_address(); }$/;"	f	struct:opentrade::WsSocketWrapper
GetAddress	xquant/connection.h	/^  std::string GetAddress() const { return transport_->GetAddress(); }$/;"	f	class:opentrade::Connection
GetAddress	xquant/server.cc	/^  std::string GetAddress() const { return ws_->remote_endpoint_address(); }$/;"	f	struct:opentrade::WsSocketWrapper
GetAttrString	opentrade/python.cc	/^static inline std::string GetAttrString(PyObject *obj, const char **names,$/;"	f	namespace:opentrade
GetAttrString	xquant/python.cc	/^static inline std::string GetAttrString(PyObject *obj, const char **names,$/;"	f	namespace:opentrade
GetBrokerAccount	opentrade/account.h	/^  const BrokerAccount* GetBrokerAccount(BrokerAccount::IdType id) {$/;"	f	class:opentrade::AccountManager
GetBrokerAccount	xquant/account.h	/^  const BrokerAccount* GetBrokerAccount(BrokerAccount::IdType id) {$/;"	f	class:opentrade::AccountManager
GetBrokerAccount	xquant/account1.h	/^  const BrokerAccount* GetBrokerAccount(BrokerAccount::IdType id) {$/;"	f	class:opentrade::AccountManager
GetCallable	opentrade/python.cc	/^static inline PyObject *GetCallable(PyObject *m, const char *name) {$/;"	f	namespace:opentrade
GetCallable	xquant/python.cc	/^static inline PyObject *GetCallable(PyObject *m, const char *name) {$/;"	f	namespace:opentrade
GetDouble	opentrade/python.cc	/^static inline double GetDouble(PyObject *obj) {$/;"	f	namespace:opentrade
GetDouble	xquant/python.cc	/^static inline double GetDouble(PyObject *obj) {$/;"	f	namespace:opentrade
GetExchange	opentrade/security.h	/^  const Exchange* GetExchange(Exchange::IdType id) {$/;"	f	class:opentrade::SecurityManager
GetExchange	opentrade/security.h	/^  const Exchange* GetExchange(const std::string& name) {$/;"	f	class:opentrade::SecurityManager
GetExchange	xquant/security.h	/^  const Exchange* GetExchange(Exchange::IdType id) {$/;"	f	class:opentrade::SecurityManager
GetExchange	xquant/security.h	/^  const Exchange* GetExchange(const std::string& name) {$/;"	f	class:opentrade::SecurityManager
GetId	opentrade/market_data.h	/^  static constexpr IdType GetId(const char* src) {$/;"	f	struct:opentrade::DataSrc
GetId	xquant/market_data.h	/^  static constexpr IdType GetId(const char* src) {$/;"	f	struct:opentrade::DataSrc
GetMarketData	opentrade/connection.cc	/^static inline void GetMarketData(const MarketData& md, const MarketData& md0,$/;"	f	namespace:opentrade
GetMarketData	xquant/connection.cc	/^static inline void GetMarketData(const MarketData& md, const MarketData& md0,$/;"	f	namespace:opentrade
GetNative	opentrade/python.cc	/^Python *GetNative(PyObject *self) {$/;"	f	namespace:opentrade
GetNative	xquant/python.cc	/^Python *GetNative(PyObject *self) {$/;"	f	namespace:opentrade
GetNativePtr	opentrade/python.cc	/^void *GetNativePtr(PyObject *self, const char *name = "__native__") {$/;"	f	namespace:opentrade
GetNativePtr	xquant/python.cc	/^void *GetNativePtr(PyObject *self, const char *name = "__native__") {$/;"	f	namespace:opentrade
GetNowStr	opentrade/utility.h	/^static inline const char* GetNowStr() {$/;"	f	namespace:opentrade
GetNowStr	xquant/utility.h	/^static inline const char* GetNowStr() {$/;"	f	namespace:xquant
GetNum	opentrade/connection.cc	/^inline double GetNum(const json& j) {$/;"	f	namespace:opentrade
GetNum	xquant/connection.cc	/^inline double GetNum(const json& j) {$/;"	f	namespace:opentrade
GetObj	opentrade/python.h	/^  PyObject* GetObj(const void* native) { return objs_[native]; }$/;"	f	class:opentrade::Python
GetObj	xquant/python.h	/^  PyObject* GetObj(const void* native) { return objs_[native]; }$/;"	f	class:opentrade::Python
GetOrderSide	opentrade/order.h	/^static inline bool GetOrderSide(const std::string& side_str, OrderSide* side) {$/;"	f	namespace:opentrade
GetOrderSide	xquant/order.h	/^static inline bool GetOrderSide(const std::string& side_str, OrderSide* side) {$/;"	f	namespace:opentrade
GetParam	opentrade/utility.h	/^inline V GetParam(const M& var_map, const std::string& name, V default_value) {$/;"	f	namespace:opentrade
GetParam	opentrade/utility.h	/^inline int GetParam(const M& var_map, const std::string& name,$/;"	f	namespace:opentrade
GetParam	opentrade/utility.h	/^inline std::string GetParam(const M& var_map, const std::string& name,$/;"	f	namespace:opentrade
GetParam	opentrade/utility.h	/^std::optional<V> GetParam(const M& var_map, const std::string& name) {$/;"	f	namespace:opentrade
GetParam	xquant/utility.h	/^inline V GetParam(const M& var_map, const std::string& name, V default_value) {$/;"	f	namespace:xquant
GetParam	xquant/utility.h	/^inline int GetParam(const M& var_map, const std::string& name,$/;"	f	namespace:xquant
GetParam	xquant/utility.h	/^inline std::string GetParam(const M& var_map, const std::string& name,$/;"	f	namespace:xquant
GetParam	xquant/utility.h	/^std::optional<V> GetParam(const M& var_map, const std::string& name) {$/;"	f	namespace:xquant
GetRoute	opentrade/market_data.cc	/^inline MarketDataAdapter* MarketDataManager::GetRoute(const Security& sec,$/;"	f	class:opentrade::MarketDataManager
GetRoute	xquant/market_data.cc	/^inline MarketDataAdapter* MarketDataManager::GetRoute(const Security& sec,$/;"	f	class:opentrade::MarketDataManager
GetSide	opentrade/connection.cc	/^static inline const char* GetSide(OrderSide c) {$/;"	f	namespace:opentrade
GetSide	xquant/connection.cc	/^static inline const char* GetSide(OrderSide c) {$/;"	f	namespace:opentrade
GetStr	opentrade/market_data.h	/^  static const char* GetStr(IdType id) {$/;"	f	struct:opentrade::DataSrc
GetStr	xquant/market_data.h	/^  static const char* GetStr(IdType id) {$/;"	f	struct:opentrade::DataSrc
GetString	opentrade/python.cc	/^static inline std::string GetString(PyObject *obj, bool convert2str = false) {$/;"	f	namespace:opentrade
GetString	xquant/python.cc	/^static inline std::string GetString(PyObject *obj, bool convert2str = false) {$/;"	f	namespace:opentrade
GetSubAccount	opentrade/account.h	/^  const SubAccount* GetSubAccount(SubAccount::IdType id) {$/;"	f	class:opentrade::AccountManager
GetSubAccount	opentrade/account.h	/^  const SubAccount* GetSubAccount(const std::string& name) {$/;"	f	class:opentrade::AccountManager
GetSubAccount	xquant/account.h	/^  const SubAccount* GetSubAccount(SubAccount::IdType id) {$/;"	f	class:opentrade::AccountManager
GetSubAccount	xquant/account.h	/^  const SubAccount* GetSubAccount(const std::string& name) {$/;"	f	class:opentrade::AccountManager
GetSubAccount	xquant/account1.h	/^  const SubAccount* GetSubAccount(SubAccount::IdType id) {$/;"	f	class:opentrade::AccountManager
GetSubAccount	xquant/account1.h	/^  const SubAccount* GetSubAccount(const std::string& name) {$/;"	f	class:opentrade::AccountManager
GetTickSize	opentrade/security.cc	/^double Exchange::GetTickSize(double ref) const {$/;"	f	class:opentrade::Exchange
GetTickSize	opentrade/security.h	/^  double GetTickSize(double px) const {$/;"	f	struct:opentrade::Security
GetTickSize	xquant/security.cc	/^double Exchange::GetTickSize(double ref) const {$/;"	f	class:opentrade::Exchange
GetTickSize	xquant/security.h	/^  double GetTickSize(double px) const {$/;"	f	struct:opentrade::Security
GetTif	opentrade/connection.cc	/^static inline const char* GetTif(TimeInForce c) {$/;"	f	namespace:opentrade
GetTif	xquant/connection.cc	/^static inline const char* GetTif(TimeInForce c) {$/;"	f	namespace:opentrade
GetTime	ib/ib.cc	/^static inline decltype(auto) GetTime(const char* timestr) {$/;"	f
GetTime	opentrade/security.h	/^  int GetTime() const {  \/\/ seconds since midnight in exchange time zone$/;"	f	struct:opentrade::Exchange
GetTime	xquant/security.h	/^  int GetTime() const {  \/\/ seconds since midnight in exchange time zone$/;"	f	struct:opentrade::Exchange
GetType	opentrade/connection.cc	/^static inline const char* GetType(OrderType c) {$/;"	f	namespace:opentrade
GetType	xquant/connection.cc	/^static inline const char* GetType(OrderType c) {$/;"	f	namespace:opentrade
GetUser	opentrade/account.h	/^  const User* GetUser(User::IdType id) { return FindInMap(users_, id); }$/;"	f	class:opentrade::AccountManager
GetUser	opentrade/account.h	/^  const User* GetUser(const std::string& name) {$/;"	f	class:opentrade::AccountManager
GetUser	xquant/account.h	/^  const User* GetUser(User::IdType id) { return FindInMap(users_, id); }$/;"	f	class:opentrade::AccountManager
GetUser	xquant/account.h	/^  const User* GetUser(const std::string& name) {$/;"	f	class:opentrade::AccountManager
GetUser	xquant/account1.h	/^  const User* GetUser(User::IdType id) { return FindInMap(users_, id); }$/;"	f	class:opentrade::AccountManager
GetUser	xquant/account1.h	/^  const User* GetUser(const std::string& name) {$/;"	f	class:opentrade::AccountManager
GetUtcSinceMidNight	opentrade/utility.h	/^static inline int GetUtcSinceMidNight(int tm_gmtoff) {$/;"	f	namespace:opentrade
GetUtcSinceMidNight	xquant/utility.h	/^static inline int GetUtcSinceMidNight(int tm_gmtoff) {$/;"	f	namespace:xquant
GetUtcTimeOffset	opentrade/utility.h	/^static inline int GetUtcTimeOffset(const char* tz) {$/;"	f	namespace:opentrade
GetUtcTimeOffset	xquant/utility.h	/^static inline int GetUtcTimeOffset(const char* tz) {$/;"	f	namespace:xquant
GetValue	opentrade/database.h	/^  static T GetValue(soci::row const& row, int index, T default_value) {$/;"	f	class:opentrade::Database
GetValue	opentrade/database.h	/^  static const char* GetValue(soci::row const& row, int index,$/;"	f	class:opentrade::Database
GetValue	xquant/database.h	/^  static T GetValue(soci::row const& row, int index, T default_value) {$/;"	f	class:opentrade::Database
GetValue	xquant/database.h	/^  static const char* GetValue(soci::row const& row, int index,$/;"	f	class:opentrade::Database
GetValueScalar	opentrade/python.cc	/^static inline bool GetValueScalar(PyObject *pvalue, T *out) {$/;"	f	namespace:opentrade
GetValueScalar	xquant/python.cc	/^static inline bool GetValueScalar(PyObject *pvalue, T *out) {$/;"	f	namespace:opentrade
GetVersion	opentrade/adapter.h	/^  int GetVersion() const { return kApiVersion; }$/;"	f	class:opentrade::Adapter
GetVersion	xquant/adapter.h	/^  int GetVersion() const { return kApiVersion; }$/;"	f	class:opentrade::Adapter
GlobalOrderBook	opentrade/order.h	/^class GlobalOrderBook : public Singleton<GlobalOrderBook> {$/;"	c	namespace:opentrade
GlobalOrderBook	xquant/order.h	/^class GlobalOrderBook : public Singleton<GlobalOrderBook> {$/;"	c	namespace:opentrade
HALTED	ib/jts/EWrapper.h	/^				HALTED,$/;"	e	enum:TickType
HEADER_LEN	ib/jts/EDecoder.h	/^const int HEADER_LEN = 4; \/\/ 4 bytes for msg length$/;"	v
HEAD_TIMESTAMP	ib/jts/EDecoder.h	/^const int HEAD_TIMESTAMP                            = 88;$/;"	v
HIGH	ib/jts/EWrapper.h	/^				HIGH, LOW, VOLUME, CLOSE,$/;"	e	enum:TickType
HIGH_13_WEEK	ib/jts/EWrapper.h	/^				HIGH_13_WEEK,$/;"	e	enum:TickType
HIGH_26_WEEK	ib/jts/EWrapper.h	/^				HIGH_26_WEEK,$/;"	e	enum:TickType
HIGH_52_WEEK	ib/jts/EWrapper.h	/^				HIGH_52_WEEK,$/;"	e	enum:TickType
HIGH_EFP_COMPUTATION	ib/jts/EWrapper.h	/^				HIGH_EFP_COMPUTATION,$/;"	e	enum:TickType
HISTOGRAM_DATA	ib/jts/EDecoder.h	/^const int HISTOGRAM_DATA                            = 89;$/;"	v
HISTORICAL_DATA	ib/jts/EDecoder.h	/^const int HISTORICAL_DATA                           = 17;$/;"	v
HISTORICAL_DATA_UPDATE	ib/jts/EDecoder.h	/^const int HISTORICAL_DATA_UPDATE                    = 90;$/;"	v
HISTORICAL_NEWS	ib/jts/EDecoder.h	/^const int HISTORICAL_NEWS                           = 86;$/;"	v
HISTORICAL_NEWS_END	ib/jts/EDecoder.h	/^const int HISTORICAL_NEWS_END                       = 87;$/;"	v
HISTORICAL_TICKS	ib/jts/EDecoder.h	/^const int HISTORICAL_TICKS                          = 96;$/;"	v
HISTORICAL_TICKS_BID_ASK	ib/jts/EDecoder.h	/^const int HISTORICAL_TICKS_BID_ASK                  = 97;$/;"	v
HISTORICAL_TICKS_LAST	ib/jts/EDecoder.h	/^const int HISTORICAL_TICKS_LAST                     = 98;$/;"	v
Handle	opentrade/algo.cc	/^void AlgoManager::Handle(Confirmation::Ptr cm) {$/;"	f	class:opentrade::AlgoManager
Handle	opentrade/exchange_connectivity.cc	/^static inline void Handle(const std::string& name, Order::IdType id, T desc,$/;"	f	namespace:opentrade
Handle	opentrade/exchange_connectivity.cc	/^static inline void Handle(const std::string& name, Order::IdType id,$/;"	f	namespace:opentrade
Handle	opentrade/order.cc	/^void GlobalOrderBook::Handle(Confirmation::Ptr cm, bool offline) {$/;"	f	class:opentrade::GlobalOrderBook
Handle	opentrade/position.cc	/^void PositionManager::Handle(Confirmation::Ptr cm, bool offline) {$/;"	f	class:opentrade::PositionManager
Handle	xquant/algo.cc	/^void AlgoManager::Handle(Confirmation::Ptr cm) {$/;"	f	class:opentrade::AlgoManager
Handle	xquant/exchange_connectivity.cc	/^static inline void Handle(const std::string& name, Order::IdType id, T desc,$/;"	f	namespace:opentrade
Handle	xquant/exchange_connectivity.cc	/^static inline void Handle(const std::string& name, Order::IdType id,$/;"	f	namespace:opentrade
Handle	xquant/order.cc	/^void GlobalOrderBook::Handle(Confirmation::Ptr cm, bool offline) {$/;"	f	class:opentrade::GlobalOrderBook
Handle	xquant/position.cc	/^void PositionManager::Handle(Confirmation::Ptr cm, bool offline) {$/;"	f	class:opentrade::PositionManager
HandleCancelRejected	opentrade/exchange_connectivity.cc	/^void ExchangeConnectivityAdapter::HandleCancelRejected($/;"	f	class:opentrade::ExchangeConnectivityAdapter
HandleCancelRejected	xquant/exchange_connectivity.cc	/^void ExchangeConnectivityAdapter::HandleCancelRejected($/;"	f	class:opentrade::ExchangeConnectivityAdapter
HandleCanceled	opentrade/exchange_connectivity.cc	/^void ExchangeConnectivityAdapter::HandleCanceled(Order::IdType id,$/;"	f	class:opentrade::ExchangeConnectivityAdapter
HandleCanceled	xquant/exchange_connectivity.cc	/^void ExchangeConnectivityAdapter::HandleCanceled(Order::IdType id,$/;"	f	class:opentrade::ExchangeConnectivityAdapter
HandleConfirmation	opentrade/exchange_connectivity.cc	/^static inline void HandleConfirmation(Order* ord, OrderStatus exec_type,$/;"	f	namespace:opentrade
HandleConfirmation	opentrade/exchange_connectivity.cc	/^static inline void HandleConfirmation(Order* ord, double qty, double price,$/;"	f	namespace:opentrade
HandleConfirmation	xquant/exchange_connectivity.cc	/^static inline void HandleConfirmation(Order* ord, OrderStatus exec_type,$/;"	f	namespace:opentrade
HandleConfirmation	xquant/exchange_connectivity.cc	/^static inline void HandleConfirmation(Order* ord, double qty, double price,$/;"	f	namespace:opentrade
HandleFill	opentrade/exchange_connectivity.cc	/^void ExchangeConnectivityAdapter::HandleFill($/;"	f	class:opentrade::ExchangeConnectivityAdapter
HandleFill	xquant/exchange_connectivity.cc	/^void ExchangeConnectivityAdapter::HandleFill($/;"	f	class:opentrade::ExchangeConnectivityAdapter
HandleFinish	opentrade/common.h	/^inline void PositionValue::HandleFinish(bool is_buy, double leaves_qty,$/;"	f	class:opentrade::PositionValue
HandleFinish	opentrade/position.cc	/^inline void Position::HandleFinish(bool is_buy, double leaves_qty,$/;"	f	class:opentrade::Position
HandleFinish	xquant/common.h	/^inline void PositionValue::HandleFinish(bool is_buy, double leaves_qty,$/;"	f	class:xquant::PositionValue
HandleFinish	xquant/common1.h	/^inline void PositionValue::HandleFinish(bool is_buy, double leaves_qty,$/;"	f	class:opentrade::PositionValue
HandleFinish	xquant/position.cc	/^inline void Position::HandleFinish(bool is_buy, double leaves_qty,$/;"	f	class:opentrade::Position
HandleNew	opentrade/common.h	/^inline void PositionValue::HandleNew(bool is_buy, double qty, double price,$/;"	f	class:opentrade::PositionValue
HandleNew	opentrade/exchange_connectivity.cc	/^void ExchangeConnectivityAdapter::HandleNew(Order::IdType id,$/;"	f	class:opentrade::ExchangeConnectivityAdapter
HandleNew	opentrade/position.cc	/^inline void Position::HandleNew(bool is_buy, double qty, double price,$/;"	f	class:opentrade::Position
HandleNew	xquant/common.h	/^inline void PositionValue::HandleNew(bool is_buy, double qty, double price,$/;"	f	class:xquant::PositionValue
HandleNew	xquant/common1.h	/^inline void PositionValue::HandleNew(bool is_buy, double qty, double price,$/;"	f	class:opentrade::PositionValue
HandleNew	xquant/exchange_connectivity.cc	/^void ExchangeConnectivityAdapter::HandleNew(Order::IdType id,$/;"	f	class:opentrade::ExchangeConnectivityAdapter
HandleNew	xquant/position.cc	/^inline void Position::HandleNew(bool is_buy, double qty, double price,$/;"	f	class:opentrade::Position
HandleNewRejected	opentrade/exchange_connectivity.cc	/^void ExchangeConnectivityAdapter::HandleNewRejected(Order::IdType id,$/;"	f	class:opentrade::ExchangeConnectivityAdapter
HandleNewRejected	xquant/exchange_connectivity.cc	/^void ExchangeConnectivityAdapter::HandleNewRejected(Order::IdType id,$/;"	f	class:opentrade::ExchangeConnectivityAdapter
HandleOthers	opentrade/exchange_connectivity.cc	/^void ExchangeConnectivityAdapter::HandleOthers(Order::IdType id,$/;"	f	class:opentrade::ExchangeConnectivityAdapter
HandleOthers	xquant/exchange_connectivity.cc	/^void ExchangeConnectivityAdapter::HandleOthers(Order::IdType id,$/;"	f	class:opentrade::ExchangeConnectivityAdapter
HandlePendingCancel	opentrade/exchange_connectivity.cc	/^void ExchangeConnectivityAdapter::HandlePendingCancel($/;"	f	class:opentrade::ExchangeConnectivityAdapter
HandlePendingCancel	xquant/exchange_connectivity.cc	/^void ExchangeConnectivityAdapter::HandlePendingCancel($/;"	f	class:opentrade::ExchangeConnectivityAdapter
HandlePendingNew	opentrade/exchange_connectivity.cc	/^void ExchangeConnectivityAdapter::HandlePendingNew(Order::IdType id,$/;"	f	class:opentrade::ExchangeConnectivityAdapter
HandlePendingNew	xquant/exchange_connectivity.cc	/^void ExchangeConnectivityAdapter::HandlePendingNew(Order::IdType id,$/;"	f	class:opentrade::ExchangeConnectivityAdapter
HandlePnl	opentrade/position.cc	/^inline void HandlePnl(double qty, double price, double multiplier, bool is_fx,$/;"	f	namespace:opentrade
HandlePnl	xquant/position.cc	/^inline void HandlePnl(double qty, double price, double multiplier, bool is_fx,$/;"	f	namespace:opentrade
HandleTrade	opentrade/common.h	/^inline void PositionValue::HandleTrade(bool is_buy, double qty, double price,$/;"	f	class:opentrade::PositionValue
HandleTrade	opentrade/position.cc	/^inline void Position::HandleTrade(bool is_buy, double qty, double price,$/;"	f	class:opentrade::Position
HandleTrade	xquant/common.h	/^inline void PositionValue::HandleTrade(bool is_buy, double qty, double price,$/;"	f	class:xquant::PositionValue
HandleTrade	xquant/common1.h	/^inline void PositionValue::HandleTrade(bool is_buy, double qty, double price,$/;"	f	class:opentrade::PositionValue
HandleTrade	xquant/position.cc	/^inline void Position::HandleTrade(bool is_buy, double qty, double price,$/;"	f	class:opentrade::Position
Heartbeat	ib/ib.cc	/^void IB::Heartbeat() {$/;"	f	class:IB
HistogramDataVector	ib/jts/EWrapper.h	/^typedef std::vector<HistogramEntry> HistogramDataVector;$/;"	t
HistogramEntry	ib/jts/HistogramEntry.h	/^struct HistogramEntry$/;"	s
HistoricalTick	ib/jts/HistoricalTick.h	/^struct HistoricalTick$/;"	s
HistoricalTickBidAsk	ib/jts/HistoricalTickBidAsk.h	/^struct HistoricalTickBidAsk$/;"	s
HistoricalTickLast	ib/jts/HistoricalTickLast.h	/^struct HistoricalTickLast$/;"	s
IB	ib/ib.cc	/^IB::IB() : client_(new EClientSocket(this, &os_signal_)) {}$/;"	f	class:IB
IB	ib/ib.h	/^class IB : public opentrade::ExchangeConnectivityAdapter,$/;"	c
IBAPI_STD_MUTEX	ib/jts/StdAfx.h	28;"	d
IB_DIVIDENDS	ib/jts/EWrapper.h	/^				IB_DIVIDENDS,$/;"	e	enum:TickType
IB_IB_H_	ib/ib.h	2;"	d
IB_POSIX	ib/jts/StdAfx.h	26;"	d
IB_WIN32	ib/jts/StdAfx.h	18;"	d
IExternalizable	ib/jts/IExternalizable.h	/^struct IExternalizable$/;"	s
INDEX_FUTURE_PREMIUM	ib/jts/EWrapper.h	/^				INDEX_FUTURE_PREMIUM,$/;"	e	enum:TickType
INFINITE	ib/jts/EReaderOSSignal.h	10;"	d
IN_BUF_SIZE_DEFAULT	ib/jts/EReader.cpp	15;"	d	file:
IdType	opentrade/account.h	/^  typedef uint16_t IdType;$/;"	t	struct:opentrade::BrokerAccount
IdType	opentrade/account.h	/^  typedef uint16_t IdType;$/;"	t	struct:opentrade::SubAccount
IdType	opentrade/account.h	/^  typedef uint16_t IdType;$/;"	t	struct:opentrade::User
IdType	opentrade/algo.h	/^  typedef uint32_t IdType;$/;"	t	class:opentrade::Algo
IdType	opentrade/market_data.h	/^  typedef uint32_t IdType;$/;"	t	struct:opentrade::DataSrc
IdType	opentrade/order.h	/^  typedef uint32_t IdType;$/;"	t	struct:opentrade::Order
IdType	opentrade/security.h	/^  typedef uint16_t IdType;$/;"	t	struct:opentrade::Exchange
IdType	opentrade/security.h	/^  typedef uint32_t IdType;$/;"	t	struct:opentrade::Security
IdType	xquant/account.h	/^  typedef uint16_t IdType;$/;"	t	struct:opentrade::BrokerAccount
IdType	xquant/account.h	/^  typedef uint16_t IdType;$/;"	t	struct:opentrade::SubAccount
IdType	xquant/account.h	/^  typedef uint16_t IdType;$/;"	t	struct:opentrade::User
IdType	xquant/account1.h	/^  typedef uint16_t IdType;$/;"	t	struct:opentrade::BrokerAccount
IdType	xquant/account1.h	/^  typedef uint16_t IdType;$/;"	t	struct:opentrade::SubAccount
IdType	xquant/account1.h	/^  typedef uint16_t IdType;$/;"	t	struct:opentrade::User
IdType	xquant/algo.h	/^  typedef uint32_t IdType;$/;"	t	class:opentrade::Algo
IdType	xquant/market_data.h	/^  typedef uint32_t IdType;$/;"	t	struct:opentrade::DataSrc
IdType	xquant/order.h	/^  typedef uint32_t IdType;$/;"	t	struct:opentrade::Order
IdType	xquant/security.h	/^  typedef uint16_t IdType;$/;"	t	struct:opentrade::Exchange
IdType	xquant/security.h	/^  typedef uint32_t IdType;$/;"	t	struct:opentrade::Security
InitalizePy	opentrade/python.cc	/^void InitalizePy() {$/;"	f	namespace:opentrade
InitalizePy	xquant/python.cc	/^void InitalizePy() {$/;"	f	namespace:opentrade
Initialize	opentrade/account.cc	/^void AccountManager::Initialize() {$/;"	f	class:opentrade::AccountManager
Initialize	opentrade/algo.cc	/^void AlgoManager::Initialize() {$/;"	f	class:opentrade::AlgoManager
Initialize	opentrade/database.cc	/^void Database::Initialize(const std::string& url, uint8_t pool_size,$/;"	f	class:opentrade::Database
Initialize	opentrade/logger.h	/^  static void Initialize(const std::string& name,$/;"	f	class:opentrade::Logger
Initialize	opentrade/order.cc	/^void GlobalOrderBook::Initialize() {$/;"	f	class:opentrade::GlobalOrderBook
Initialize	opentrade/position.cc	/^void PositionManager::Initialize() {$/;"	f	class:opentrade::PositionManager
Initialize	opentrade/security.cc	/^void SecurityManager::Initialize() {$/;"	f	class:opentrade::SecurityManager
Initialize	xquant/account.cc	/^void AccountManager::Initialize() {$/;"	f	class:opentrade::AccountManager
Initialize	xquant/algo.cc	/^void AlgoManager::Initialize() {$/;"	f	class:opentrade::AlgoManager
Initialize	xquant/database.cc	/^void Database::Initialize(const std::string& url, uint8_t pool_size,$/;"	f	class:opentrade::Database
Initialize	xquant/logger.h	/^  static void Initialize(const std::string& name,$/;"	f	class:opentrade::Logger
Initialize	xquant/order.cc	/^void GlobalOrderBook::Initialize() {$/;"	f	class:opentrade::GlobalOrderBook
Initialize	xquant/position.cc	/^void PositionManager::Initialize() {$/;"	f	class:opentrade::PositionManager
Initialize	xquant/security.cc	/^void SecurityManager::Initialize() {$/;"	f	class:opentrade::SecurityManager
Instance	opentrade/common.h	/^  static V& Instance() {$/;"	f	class:opentrade::Singleton
Instance	xquant/common.h	/^    static T& Instance() {$/;"	f	class:xquant::Singleton
Instance	xquant/common1.h	/^  static V& Instance() {$/;"	f	class:opentrade::Singleton
Instrument	opentrade/algo.h	/^  Instrument(Algo* algo, const Security& sec, DataSrc::IdType src)$/;"	f	class:opentrade::Instrument
Instrument	opentrade/algo.h	/^class Instrument {$/;"	c	namespace:opentrade
Instrument	xquant/algo.h	/^  Instrument(Algo* algo, const Security& sec, DataSrc::IdType src)$/;"	f	class:opentrade::Instrument
Instrument	xquant/algo.h	/^class Instrument {$/;"	c	namespace:opentrade
IsBuy	opentrade/order.h	/^  bool IsBuy() const { return opentrade::IsBuy(side); }$/;"	f	struct:opentrade::Contract
IsBuy	opentrade/order.h	/^static inline bool IsBuy(OrderSide side) { return side == kBuy; }$/;"	f	namespace:opentrade
IsBuy	xquant/order.h	/^  bool IsBuy() const { return opentrade::IsBuy(side); }$/;"	f	struct:opentrade::Contract
IsBuy	xquant/order.h	/^static inline bool IsBuy(OrderSide side) { return side == kBuy; }$/;"	f	namespace:opentrade
IsDupExecId	opentrade/order.h	/^  bool IsDupExecId(Order::IdType id, const std::string& exec_id) {$/;"	f	class:opentrade::GlobalOrderBook
IsDupExecId	xquant/order.h	/^  bool IsDupExecId(Order::IdType id, const std::string& exec_id) {$/;"	f	class:opentrade::GlobalOrderBook
IsInTradePeriod	opentrade/security.h	/^  bool IsInTradePeriod() const { return exchange->IsInTradePeriod(); }$/;"	f	struct:opentrade::Security
IsInTradePeriod	opentrade/security.h	/^  bool IsInTradePeriod() const {$/;"	f	struct:opentrade::Exchange
IsInTradePeriod	xquant/security.h	/^  bool IsInTradePeriod() const { return exchange->IsInTradePeriod(); }$/;"	f	struct:opentrade::Security
IsInTradePeriod	xquant/security.h	/^  bool IsInTradePeriod() const {$/;"	f	struct:opentrade::Exchange
IsLive	opentrade/order.h	/^  bool IsLive() const {$/;"	f	struct:opentrade::Order
IsLive	xquant/order.h	/^  bool IsLive() const {$/;"	f	struct:opentrade::Order
IsSubscribed	opentrade/algo.h	/^  bool IsSubscribed(DataSrc::IdType src, Security::IdType id) {$/;"	f	class:opentrade::AlgoManager
IsSubscribed	xquant/algo.h	/^  bool IsSubscribed(DataSrc::IdType src, Security::IdType id) {$/;"	f	class:opentrade::AlgoManager
IsType	opentrade/python.cc	/^static inline bool IsType(PyObject *obj, const char *type) {$/;"	f	namespace:opentrade
IsType	xquant/python.cc	/^static inline bool IsType(PyObject *obj, const char *type) {$/;"	f	namespace:opentrade
Jsonify	opentrade/connection.cc	/^static inline void Jsonify(const ParamDef::Value& v, json* j) {$/;"	f	namespace:opentrade
Jsonify	xquant/connection.cc	/^static inline void Jsonify(const ParamDef::Value& v, json* j) {$/;"	f	namespace:opentrade
JsonifyScala	opentrade/connection.cc	/^static inline bool JsonifyScala(const T& v, json* j) {$/;"	f	namespace:opentrade
JsonifyScala	xquant/connection.cc	/^static inline bool JsonifyScala(const T& v, json* j) {$/;"	f	namespace:opentrade
LAST	ib/jts/EWrapper.h	/^enum TickType { BID_SIZE, BID, ASK, ASK_SIZE, LAST, LAST_SIZE,$/;"	e	enum:TickType
LAST_EFP_COMPUTATION	ib/jts/EWrapper.h	/^				LAST_EFP_COMPUTATION,$/;"	e	enum:TickType
LAST_EXCH	ib/jts/EWrapper.h	/^				LAST_EXCH,$/;"	e	enum:TickType
LAST_OPTION_COMPUTATION	ib/jts/EWrapper.h	/^				LAST_OPTION_COMPUTATION,$/;"	e	enum:TickType
LAST_REG_TIME	ib/jts/EWrapper.h	/^				LAST_REG_TIME,$/;"	e	enum:TickType
LAST_RTH_TRADE	ib/jts/EWrapper.h	/^				LAST_RTH_TRADE,$/;"	e	enum:TickType
LAST_SIZE	ib/jts/EWrapper.h	/^enum TickType { BID_SIZE, BID, ASK, ASK_SIZE, LAST, LAST_SIZE,$/;"	e	enum:TickType
LAST_TIMESTAMP	ib/jts/EWrapper.h	/^				LAST_TIMESTAMP,$/;"	e	enum:TickType
LAST_YIELD	ib/jts/EWrapper.h	/^				LAST_YIELD,$/;"	e	enum:TickType
LOG_DEBUG	opentrade/logger.h	74;"	d
LOG_DEBUG	xquant/logger.h	74;"	d
LOG_ERROR	opentrade/logger.h	77;"	d
LOG_ERROR	xquant/logger.h	77;"	d
LOG_FATAL	opentrade/logger.h	78;"	d
LOG_FATAL	xquant/logger.h	78;"	d
LOG_INFO	opentrade/logger.h	75;"	d
LOG_INFO	xquant/logger.h	75;"	d
LOG_TRACE	opentrade/logger.h	73;"	d
LOG_TRACE	xquant/logger.h	73;"	d
LOG_WARN	opentrade/logger.h	76;"	d
LOG_WARN	xquant/logger.h	76;"	d
LOW	ib/jts/EWrapper.h	/^				HIGH, LOW, VOLUME, CLOSE,$/;"	e	enum:TickType
LOW_13_WEEK	ib/jts/EWrapper.h	/^				LOW_13_WEEK,$/;"	e	enum:TickType
LOW_26_WEEK	ib/jts/EWrapper.h	/^				LOW_26_WEEK,$/;"	e	enum:TickType
LOW_52_WEEK	ib/jts/EWrapper.h	/^				LOW_52_WEEK,$/;"	e	enum:TickType
LOW_EFP_COMPUTATION	ib/jts/EWrapper.h	/^				LOW_EFP_COMPUTATION,$/;"	e	enum:TickType
Last	ib/jts/PriceCondition.h	/^		Last = 2,$/;"	e	enum:PriceCondition::Method
LastBidAsk	ib/jts/PriceCondition.h	/^		LastBidAsk = 7,$/;"	e	enum:PriceCondition::Method
Leave	ib/jts/EMutex.cpp	/^void EMutex::Leave() {$/;"	f	class:EMutex
LegOpenClose	ib/jts/Contract.h	/^enum LegOpenClose { SAME_POS, OPEN_POS, CLOSE_POS, UNKNOWN_POS };$/;"	g
Limits	opentrade/common.h	/^struct Limits {$/;"	s	namespace:opentrade
Limits	xquant/common.h	/^struct Limits {$/;"	s	namespace:xquant
Limits	xquant/common1.h	/^struct Limits {$/;"	s	namespace:opentrade
Load	opentrade/adapter.cc	/^Adapter* Adapter::Load(const std::string& sofile) {$/;"	f	class:opentrade::Adapter
Load	opentrade/python.cc	/^Python *Python::Load(const std::string &module_name) {$/;"	f	class:opentrade::Python
Load	xquant/adapter.cc	/^Adapter* Adapter::Load(const std::string& sofile) {$/;"	f	class:opentrade::Adapter
Load	xquant/python.cc	/^Python *Python::Load(const std::string &module_name) {$/;"	f	class:opentrade::Python
LoadFromDatabase	opentrade/security.cc	/^void SecurityManager::LoadFromDatabase() {$/;"	f	class:opentrade::SecurityManager
LoadFromDatabase	xquant/security.cc	/^void SecurityManager::LoadFromDatabase() {$/;"	f	class:opentrade::SecurityManager
LoadPyModule	opentrade/python.cc	/^PyModule LoadPyModule(const std::string &module_name) {$/;"	f	namespace:opentrade
LoadPyModule	xquant/python.cc	/^PyModule LoadPyModule(const std::string &module_name) {$/;"	f	namespace:opentrade
LoadStore	opentrade/algo.cc	/^void AlgoManager::LoadStore(uint32_t seq0, Connection* conn) {$/;"	f	class:opentrade::AlgoManager
LoadStore	opentrade/order.cc	/^void GlobalOrderBook::LoadStore(uint32_t seq0, Connection* conn) {$/;"	f	class:opentrade::GlobalOrderBook
LoadStore	xquant/algo.cc	/^void AlgoManager::LoadStore(uint32_t seq0, Connection* conn) {$/;"	f	class:opentrade::AlgoManager
LoadStore	xquant/order.cc	/^void GlobalOrderBook::LoadStore(uint32_t seq0, Connection* conn) {$/;"	f	class:opentrade::GlobalOrderBook
LockGIL	opentrade/python.cc	/^  LockGIL() { m.lock(); }$/;"	f	struct:opentrade::LockGIL
LockGIL	opentrade/python.cc	/^struct LockGIL {$/;"	s	namespace:opentrade	file:
LockGIL	xquant/python.cc	/^  LockGIL() { m.lock(); }$/;"	f	struct:opentrade::LockGIL
LockGIL	xquant/python.cc	/^struct LockGIL {$/;"	s	namespace:opentrade	file:
LockGuard	opentrade/algo.h	/^  typedef std::lock_guard<std::mutex> LockGuard;$/;"	t	class:opentrade::AlgoRunner
LockGuard	opentrade/server.cc	/^typedef std::lock_guard<std::mutex> LockGuard;$/;"	t	namespace:opentrade	file:
LockGuard	xquant/algo.h	/^  typedef std::lock_guard<std::mutex> LockGuard;$/;"	t	class:opentrade::AlgoRunner
LockGuard	xquant/server.cc	/^typedef std::lock_guard<std::mutex> LockGuard;$/;"	t	namespace:opentrade	file:
LogEvent	md/bpipe/bpipe.cc	/^void BPIPE::LogEvent(const bbg::Event& evt) {$/;"	f	class:BPIPE
Logger	opentrade/logger.h	/^class Logger {$/;"	c	namespace:opentrade
Logger	xquant/logger.h	/^class Logger {$/;"	c	namespace:opentrade
MANAGED_ACCTS	ib/jts/EDecoder.h	/^const int MANAGED_ACCTS                             = 15;$/;"	v
MARKET_DATA_TYPE	ib/jts/EDecoder.h	/^const int MARKET_DATA_TYPE                          = 58;$/;"	v
MARKET_DEPTH	ib/jts/EDecoder.h	/^const int MARKET_DEPTH                              = 12;$/;"	v
MARKET_DEPTH_L2	ib/jts/EDecoder.h	/^const int MARKET_DEPTH_L2                           = 13;$/;"	v
MARKET_RULE	ib/jts/EDecoder.h	/^const int MARKET_RULE                               = 93;$/;"	v
MARK_PRICE	ib/jts/EWrapper.h	/^				MARK_PRICE,$/;"	e	enum:TickType
MAX_CLIENT_VER	ib/jts/EDecoder.h	/^const int MAX_CLIENT_VER = MIN_SERVER_VER_WHAT_IF_EXT_FIELDS;$/;"	v
MAX_MSG_LEN	ib/jts/EDecoder.h	/^const int MAX_MSG_LEN = 0xFFFFFF; \/\/ 16Mb - 1byte$/;"	v
MD_BPIPE_BPIPE_H_	md/bpipe/bpipe.h	2;"	d
MIN_CLIENT_VER	ib/jts/EDecoder.h	/^const int MIN_CLIENT_VER = 100;$/;"	v
MIN_SERVER_VER_ACCOUNT_SUMMARY	ib/jts/EDecoder.h	/^const int MIN_SERVER_VER_ACCOUNT_SUMMARY            = 67;$/;"	v
MIN_SERVER_VER_AGG_GROUP	ib/jts/EDecoder.h	/^const int MIN_SERVER_VER_AGG_GROUP                  = 121;$/;"	v
MIN_SERVER_VER_ALGO_ID	ib/jts/EDecoder.h	/^const int MIN_SERVER_VER_ALGO_ID                    = 71;$/;"	v
MIN_SERVER_VER_ALGO_ORDERS	ib/jts/EDecoder.h	/^const int MIN_SERVER_VER_ALGO_ORDERS                = 41;$/;"	v
MIN_SERVER_VER_AUTO_PRICE_FOR_HEDGE	ib/jts/EDecoder.h	/^const int MIN_SERVER_VER_AUTO_PRICE_FOR_HEDGE       = 141;$/;"	v
MIN_SERVER_VER_CANCEL_CALC_IMPLIED_VOLAT	ib/jts/EDecoder.h	/^const int MIN_SERVER_VER_CANCEL_CALC_IMPLIED_VOLAT  = 50;$/;"	v
MIN_SERVER_VER_CANCEL_CALC_OPTION_PRICE	ib/jts/EDecoder.h	/^const int MIN_SERVER_VER_CANCEL_CALC_OPTION_PRICE   = 50;$/;"	v
MIN_SERVER_VER_CANCEL_HEADTIMESTAMP	ib/jts/EDecoder.h	/^const int MIN_SERVER_VER_CANCEL_HEADTIMESTAMP       = 123;$/;"	v
MIN_SERVER_VER_CASH_QTY	ib/jts/EDecoder.h	/^const int MIN_SERVER_VER_CASH_QTY                   = 111;$/;"	v
MIN_SERVER_VER_CFD_REROUTE	ib/jts/EDecoder.h	/^const int MIN_SERVER_VER_CFD_REROUTE                = 125;$/;"	v
MIN_SERVER_VER_CONTRACT_DATA_CHAIN	ib/jts/EDecoder.h	/^const int MIN_SERVER_VER_CONTRACT_DATA_CHAIN        = 40;$/;"	v
MIN_SERVER_VER_DAILY_PNL	ib/jts/EDecoder.h	/^const int MIN_SERVER_VER_DAILY_PNL                  = 127;$/;"	v
MIN_SERVER_VER_DECISION_MAKER	ib/jts/EDecoder.h	/^const int MIN_SERVER_VER_DECISION_MAKER             = 138;$/;"	v
MIN_SERVER_VER_DELTA_NEUTRAL	ib/jts/EDecoder.h	/^const int MIN_SERVER_VER_DELTA_NEUTRAL              = 40;$/;"	v
MIN_SERVER_VER_DELTA_NEUTRAL_CONID	ib/jts/EDecoder.h	/^const int MIN_SERVER_VER_DELTA_NEUTRAL_CONID        = 58;$/;"	v
MIN_SERVER_VER_DELTA_NEUTRAL_OPEN_CLOSE	ib/jts/EDecoder.h	/^const int MIN_SERVER_VER_DELTA_NEUTRAL_OPEN_CLOSE   = 66;$/;"	v
MIN_SERVER_VER_EXECUTION_DATA_CHAIN	ib/jts/EDecoder.h	/^const int MIN_SERVER_VER_EXECUTION_DATA_CHAIN       = 42;$/;"	v
MIN_SERVER_VER_EXT_OPERATOR	ib/jts/EDecoder.h	/^const int MIN_SERVER_VER_EXT_OPERATOR               = 105;$/;"	v
MIN_SERVER_VER_FRACTIONAL_POSITIONS	ib/jts/EDecoder.h	/^const int MIN_SERVER_VER_FRACTIONAL_POSITIONS       = 101;$/;"	v
MIN_SERVER_VER_FUNDAMENTAL_DATA	ib/jts/EDecoder.h	/^const int MIN_SERVER_VER_FUNDAMENTAL_DATA           = 40;$/;"	v
MIN_SERVER_VER_HEDGE_ORDERS	ib/jts/EDecoder.h	/^const int MIN_SERVER_VER_HEDGE_ORDERS               = 54;$/;"	v
MIN_SERVER_VER_HISTORICAL_TICKS	ib/jts/EDecoder.h	/^const int MIN_SERVER_VER_HISTORICAL_TICKS           = 130;$/;"	v
MIN_SERVER_VER_LAST_LIQUIDITY	ib/jts/EDecoder.h	/^const int MIN_SERVER_VER_LAST_LIQUIDITY             = 136;$/;"	v
MIN_SERVER_VER_LINKING	ib/jts/EDecoder.h	/^const int MIN_SERVER_VER_LINKING                    = 70;$/;"	v
MIN_SERVER_VER_LINKING_AUTH	ib/jts/EDecoder.h	/^const int MIN_SERVER_VER_LINKING_AUTH               = 74;$/;"	v
MIN_SERVER_VER_MARKET_CAP_PRICE	ib/jts/EDecoder.h	/^const int MIN_SERVER_VER_MARKET_CAP_PRICE           = 131;$/;"	v
MIN_SERVER_VER_MARKET_RULES	ib/jts/EDecoder.h	/^const int MIN_SERVER_VER_MARKET_RULES               = 126;$/;"	v
MIN_SERVER_VER_MD_SIZE_MULTIPLIER	ib/jts/EDecoder.h	/^const int MIN_SERVER_VER_MD_SIZE_MULTIPLIER         = 110;$/;"	v
MIN_SERVER_VER_MIFID_EXECUTION	ib/jts/EDecoder.h	/^const int MIN_SERVER_VER_MIFID_EXECUTION            = 139;$/;"	v
MIN_SERVER_VER_MODELS_SUPPORT	ib/jts/EDecoder.h	/^const int MIN_SERVER_VER_MODELS_SUPPORT             = 103;$/;"	v
MIN_SERVER_VER_NEWS_QUERY_ORIGINS	ib/jts/EDecoder.h	/^const int MIN_SERVER_VER_NEWS_QUERY_ORIGINS         = 128;$/;"	v
MIN_SERVER_VER_NOT_HELD	ib/jts/EDecoder.h	/^const int MIN_SERVER_VER_NOT_HELD                   = 44;$/;"	v
MIN_SERVER_VER_OPTIONAL_CAPABILITIES	ib/jts/EDecoder.h	/^const int MIN_SERVER_VER_OPTIONAL_CAPABILITIES      = 72;$/;"	v
MIN_SERVER_VER_OPT_OUT_SMART_ROUTING	ib/jts/EDecoder.h	/^const int MIN_SERVER_VER_OPT_OUT_SMART_ROUTING      = 56;$/;"	v
MIN_SERVER_VER_ORDER_COMBO_LEGS_PRICE	ib/jts/EDecoder.h	/^const int MIN_SERVER_VER_ORDER_COMBO_LEGS_PRICE     = 61;$/;"	v
MIN_SERVER_VER_ORDER_SOLICITED	ib/jts/EDecoder.h	/^const int MIN_SERVER_VER_ORDER_SOLICITED            = 73;$/;"	v
MIN_SERVER_VER_PAST_LIMIT	ib/jts/EDecoder.h	/^const int MIN_SERVER_VER_PAST_LIMIT                 = 109;$/;"	v
MIN_SERVER_VER_PEGGED_TO_BENCHMARK	ib/jts/EDecoder.h	/^const int MIN_SERVER_VER_PEGGED_TO_BENCHMARK        = 102;$/;"	v
MIN_SERVER_VER_PLACE_ORDER_CONID	ib/jts/EDecoder.h	/^const int MIN_SERVER_VER_PLACE_ORDER_CONID          = 46;$/;"	v
MIN_SERVER_VER_PNL	ib/jts/EDecoder.h	/^const int MIN_SERVER_VER_PNL                        = 127;$/;"	v
MIN_SERVER_VER_POSITIONS	ib/jts/EDecoder.h	/^const int MIN_SERVER_VER_POSITIONS                  = 67;$/;"	v
MIN_SERVER_VER_PRE_OPEN_BID_ASK	ib/jts/EDecoder.h	/^const int MIN_SERVER_VER_PRE_OPEN_BID_ASK           = 132;$/;"	v
MIN_SERVER_VER_PRIMARYEXCH	ib/jts/EDecoder.h	/^const int MIN_SERVER_VER_PRIMARYEXCH                = 75;$/;"	v
MIN_SERVER_VER_PTA_ORDERS	ib/jts/EDecoder.h	/^const int MIN_SERVER_VER_PTA_ORDERS                 = 39;$/;"	v
MIN_SERVER_VER_RANDOMIZE_SIZE_AND_PRICE	ib/jts/EDecoder.h	/^const int MIN_SERVER_VER_RANDOMIZE_SIZE_AND_PRICE   = 76;$/;"	v
MIN_SERVER_VER_REALIZED_PNL	ib/jts/EDecoder.h	/^const int MIN_SERVER_VER_REALIZED_PNL               = 135;$/;"	v
MIN_SERVER_VER_REAL_EXPIRATION_DATE	ib/jts/EDecoder.h	/^const int MIN_SERVER_VER_REAL_EXPIRATION_DATE       = 134;$/;"	v
MIN_SERVER_VER_REQ_CALC_IMPLIED_VOLAT	ib/jts/EDecoder.h	/^const int MIN_SERVER_VER_REQ_CALC_IMPLIED_VOLAT     = 49;$/;"	v
MIN_SERVER_VER_REQ_CALC_OPTION_PRICE	ib/jts/EDecoder.h	/^const int MIN_SERVER_VER_REQ_CALC_OPTION_PRICE      = 50;$/;"	v
MIN_SERVER_VER_REQ_FAMILY_CODES	ib/jts/EDecoder.h	/^const int MIN_SERVER_VER_REQ_FAMILY_CODES           = 107;$/;"	v
MIN_SERVER_VER_REQ_GLOBAL_CANCEL	ib/jts/EDecoder.h	/^const int MIN_SERVER_VER_REQ_GLOBAL_CANCEL          = 53;$/;"	v
MIN_SERVER_VER_REQ_HEAD_TIMESTAMP	ib/jts/EDecoder.h	/^const int MIN_SERVER_VER_REQ_HEAD_TIMESTAMP         = 118;$/;"	v
MIN_SERVER_VER_REQ_HISTOGRAM	ib/jts/EDecoder.h	/^const int MIN_SERVER_VER_REQ_HISTOGRAM              = 119;$/;"	v
MIN_SERVER_VER_REQ_HISTORICAL_NEWS	ib/jts/EDecoder.h	/^const int MIN_SERVER_VER_REQ_HISTORICAL_NEWS        = 117;$/;"	v
MIN_SERVER_VER_REQ_MARKET_DATA_TYPE	ib/jts/EDecoder.h	/^const int MIN_SERVER_VER_REQ_MARKET_DATA_TYPE       = 55;$/;"	v
MIN_SERVER_VER_REQ_MATCHING_SYMBOLS	ib/jts/EDecoder.h	/^const int MIN_SERVER_VER_REQ_MATCHING_SYMBOLS       = 108;$/;"	v
MIN_SERVER_VER_REQ_MKT_DATA_CONID	ib/jts/EDecoder.h	/^const int MIN_SERVER_VER_REQ_MKT_DATA_CONID         = 47;$/;"	v
MIN_SERVER_VER_REQ_MKT_DEPTH_EXCHANGES	ib/jts/EDecoder.h	/^const int MIN_SERVER_VER_REQ_MKT_DEPTH_EXCHANGES    = 112;$/;"	v
MIN_SERVER_VER_REQ_NEWS_ARTICLE	ib/jts/EDecoder.h	/^const int MIN_SERVER_VER_REQ_NEWS_ARTICLE           = 116;$/;"	v
MIN_SERVER_VER_REQ_NEWS_PROVIDERS	ib/jts/EDecoder.h	/^const int MIN_SERVER_VER_REQ_NEWS_PROVIDERS         = 115;$/;"	v
MIN_SERVER_VER_REQ_SMART_COMPONENTS	ib/jts/EDecoder.h	/^const int MIN_SERVER_VER_REQ_SMART_COMPONENTS       = 114;$/;"	v
MIN_SERVER_VER_SCALE_ORDERS2	ib/jts/EDecoder.h	/^const int MIN_SERVER_VER_SCALE_ORDERS2              = 40;$/;"	v
MIN_SERVER_VER_SCALE_ORDERS3	ib/jts/EDecoder.h	/^const int MIN_SERVER_VER_SCALE_ORDERS3              = 60;$/;"	v
MIN_SERVER_VER_SCALE_TABLE	ib/jts/EDecoder.h	/^const int MIN_SERVER_VER_SCALE_TABLE                = 69;$/;"	v
MIN_SERVER_VER_SEC_DEF_OPT_PARAMS_REQ	ib/jts/EDecoder.h	/^const int MIN_SERVER_VER_SEC_DEF_OPT_PARAMS_REQ     = 104;$/;"	v
MIN_SERVER_VER_SEC_ID_TYPE	ib/jts/EDecoder.h	/^const int MIN_SERVER_VER_SEC_ID_TYPE                = 45;$/;"	v
MIN_SERVER_VER_SERVICE_DATA_TYPE	ib/jts/EDecoder.h	/^const int MIN_SERVER_VER_SERVICE_DATA_TYPE          = 120;$/;"	v
MIN_SERVER_VER_SMART_COMBO_ROUTING_PARAMS	ib/jts/EDecoder.h	/^const int MIN_SERVER_VER_SMART_COMBO_ROUTING_PARAMS = 57;$/;"	v
MIN_SERVER_VER_SOFT_DOLLAR_TIER	ib/jts/EDecoder.h	/^const int MIN_SERVER_VER_SOFT_DOLLAR_TIER           = 106;$/;"	v
MIN_SERVER_VER_SSHORTX	ib/jts/EDecoder.h	/^const int MIN_SERVER_VER_SSHORTX                    = 52;$/;"	v
MIN_SERVER_VER_SSHORTX_OLD	ib/jts/EDecoder.h	/^const int MIN_SERVER_VER_SSHORTX_OLD                = 51;$/;"	v
MIN_SERVER_VER_SUPPORTED	ib/jts/EClientSocket.cpp	/^const int MIN_SERVER_VER_SUPPORTED    = 38; \/\/all supported server versions are defined in EDecoder.h$/;"	v
MIN_SERVER_VER_SYNT_REALTIME_BARS	ib/jts/EDecoder.h	/^const int MIN_SERVER_VER_SYNT_REALTIME_BARS         = 124;$/;"	v
MIN_SERVER_VER_TICK_BY_TICK	ib/jts/EDecoder.h	/^const int MIN_SERVER_VER_TICK_BY_TICK               = 137;$/;"	v
MIN_SERVER_VER_TICK_BY_TICK_IGNORE_SIZE	ib/jts/EDecoder.h	/^const int MIN_SERVER_VER_TICK_BY_TICK_IGNORE_SIZE   = 140;$/;"	v
MIN_SERVER_VER_TICK_NEWS	ib/jts/EDecoder.h	/^const int MIN_SERVER_VER_TICK_NEWS                  = 113;$/;"	v
MIN_SERVER_VER_TRADING_CLASS	ib/jts/EDecoder.h	/^const int MIN_SERVER_VER_TRADING_CLASS              = 68;$/;"	v
MIN_SERVER_VER_TRAILING_PERCENT	ib/jts/EDecoder.h	/^const int MIN_SERVER_VER_TRAILING_PERCENT           = 62;$/;"	v
MIN_SERVER_VER_UNDERLYING_INFO	ib/jts/EDecoder.h	/^const int MIN_SERVER_VER_UNDERLYING_INFO            = 122;$/;"	v
MIN_SERVER_VER_UNREALIZED_PNL	ib/jts/EDecoder.h	/^const int MIN_SERVER_VER_UNREALIZED_PNL             = 129;$/;"	v
MIN_SERVER_VER_WHAT_IF_EXT_FIELDS	ib/jts/EDecoder.h	/^const int MIN_SERVER_VER_WHAT_IF_EXT_FIELDS         = 142;$/;"	v
MKT_DEPTH_EXCHANGES	ib/jts/EDecoder.h	/^const int MKT_DEPTH_EXCHANGES                       = 80;$/;"	v
MODEL_OPTION	ib/jts/EWrapper.h	/^				MODEL_OPTION,$/;"	e	enum:TickType
Margin	ib/jts/OrderCondition.h	/^		Margin = 4,$/;"	e	enum:OrderCondition::OrderConditionType
MarginCondition	ib/jts/MarginCondition.h	/^	MarginCondition() { }$/;"	f	class:MarginCondition
MarginCondition	ib/jts/MarginCondition.h	/^class TWSAPIDLLEXP MarginCondition : public OperatorCondition {$/;"	c
MarketData	opentrade/market_data.h	/^struct MarketData {$/;"	s	namespace:opentrade
MarketData	xquant/market_data.h	/^struct MarketData {$/;"	s	namespace:opentrade
MarketDataAdapter	opentrade/market_data.h	/^class MarketDataAdapter : public virtual NetworkAdapter {$/;"	c	namespace:opentrade
MarketDataAdapter	xquant/market_data.h	/^class MarketDataAdapter : public virtual NetworkAdapter {$/;"	c	namespace:opentrade
MarketDataManager	opentrade/market_data.h	/^class MarketDataManager : public AdapterManager<MarketDataAdapter>,$/;"	c	namespace:opentrade
MarketDataManager	xquant/market_data.h	/^class MarketDataManager : public AdapterManager<MarketDataAdapter>,$/;"	c	namespace:opentrade
MarketDataMap	opentrade/market_data.h	/^      MarketDataMap;$/;"	t	class:opentrade::MarketDataAdapter
MarketDataMap	xquant/market_data.h	/^      MarketDataMap;$/;"	t	class:opentrade::MarketDataAdapter
MarketDataType	ib/jts/CommonDefs.h	/^enum MarketDataType { $/;"	g
Method	ib/jts/PriceCondition.h	/^	enum Method {$/;"	g	class:PriceCondition
MidPoint	ib/jts/PriceCondition.h	/^		MidPoint = 8$/;"	e	enum:PriceCondition::Method
NEWS_ARTICLE	ib/jts/EDecoder.h	/^const int NEWS_ARTICLE                              = 83;$/;"	v
NEWS_BULLETINS	ib/jts/EDecoder.h	/^const int NEWS_BULLETINS                            = 14;$/;"	v
NEWS_MSG	ib/jts/EClient.h	/^const int NEWS_MSG              = 1;    \/\/ standard IB news bulleting message$/;"	m	namespace:ibapi::client_constants
NEWS_PROVIDERS	ib/jts/EDecoder.h	/^const int NEWS_PROVIDERS                            = 85;$/;"	v
NEWS_TICK	ib/jts/EWrapper.h	/^				NEWS_TICK,$/;"	e	enum:TickType
NEXT_VALID_ID	ib/jts/EDecoder.h	/^const int NEXT_VALID_ID                             = 9;$/;"	v
NOT_SET	ib/jts/EWrapper.h	/^				NOT_SET };$/;"	e	enum:TickType
NO_ROW_NUMBER_SPECIFIED	ib/jts/ScannerSubscription.h	14;"	d
NO_VALID_ERROR_CODE	ib/jts/TwsSocketClientErrors.h	/^static const int NO_VALID_ERROR_CODE = 0;$/;"	v
NO_VALID_ID	ib/jts/TwsSocketClientErrors.h	/^static const int NO_VALID_ID = -1;$/;"	v
NetworkAdapter	opentrade/adapter.h	/^class NetworkAdapter : public Adapter {$/;"	c	namespace:opentrade
NetworkAdapter	xquant/adapter.h	/^class NetworkAdapter : public Adapter {$/;"	c	namespace:opentrade
NewOrderId	opentrade/order.h	/^  uint32_t NewOrderId() { return ++order_id_counter_; }$/;"	f	class:opentrade::GlobalOrderBook
NewOrderId	xquant/order.h	/^  uint32_t NewOrderId() { return ++order_id_counter_; }$/;"	f	class:opentrade::GlobalOrderBook
NewsProvider	ib/jts/NewsProvider.h	/^struct NewsProvider$/;"	s
NowUtcInMicro	opentrade/utility.h	/^static inline int64_t NowUtcInMicro() {$/;"	f	namespace:opentrade
NowUtcInMicro	xquant/utility.h	/^static inline int64_t NowUtcInMicro() {$/;"	f	namespace:xquant
OPEN	ib/jts/EWrapper.h	/^				OPEN,$/;"	e	enum:TickType
OPENTRADE_ACCOUNT_H_	opentrade/account.h	2;"	d
OPENTRADE_ACCOUNT_H_	xquant/account1.h	2;"	d
OPENTRADE_ADAPTER_H_	opentrade/adapter.h	2;"	d
OPENTRADE_ADAPTER_H_	xquant/adapter.h	2;"	d
OPENTRADE_ALGO_H_	opentrade/algo.h	2;"	d
OPENTRADE_ALGO_H_	xquant/algo.h	2;"	d
OPENTRADE_COMMON_H_	opentrade/common.h	2;"	d
OPENTRADE_COMMON_H_	xquant/common1.h	2;"	d
OPENTRADE_CONNECTION_H_	opentrade/connection.h	2;"	d
OPENTRADE_CONNECTION_H_	xquant/connection.h	2;"	d
OPENTRADE_DATABASE_H_	opentrade/database.h	2;"	d
OPENTRADE_DATABASE_H_	xquant/database.h	2;"	d
OPENTRADE_EXCHANGE_CONNECTIVITY_H_	opentrade/exchange_connectivity.h	2;"	d
OPENTRADE_EXCHANGE_CONNECTIVITY_H_	xquant/exchange_connectivity.h	2;"	d
OPENTRADE_LOGGER_H_	opentrade/logger.h	2;"	d
OPENTRADE_LOGGER_H_	xquant/logger.h	2;"	d
OPENTRADE_MARKET_DATA_H_	opentrade/market_data.h	2;"	d
OPENTRADE_MARKET_DATA_H_	xquant/market_data.h	2;"	d
OPENTRADE_ORDER_H_	opentrade/order.h	2;"	d
OPENTRADE_ORDER_H_	xquant/order.h	2;"	d
OPENTRADE_POSITION_H_	opentrade/position.h	2;"	d
OPENTRADE_POSITION_H_	xquant/position.h	2;"	d
OPENTRADE_PYTHON_H_	opentrade/python.h	2;"	d
OPENTRADE_PYTHON_H_	xquant/python.h	2;"	d
OPENTRADE_RISK_H_	opentrade/risk.h	2;"	d
OPENTRADE_RISK_H_	xquant/risk.h	2;"	d
OPENTRADE_SECURITY_H_	opentrade/security.h	2;"	d
OPENTRADE_SECURITY_H_	xquant/security.h	2;"	d
OPENTRADE_SERVER_H_	opentrade/server.h	2;"	d
OPENTRADE_SERVER_H_	xquant/server.h	2;"	d
OPENTRADE_TASK_POOL_H_	opentrade/task_pool.h	2;"	d
OPENTRADE_TASK_POOL_H_	xquant/task_pool.h	2;"	d
OPENTRADE_UTILITY_H_	opentrade/utility.h	2;"	d
OPEN_EFP_COMPUTATION	ib/jts/EWrapper.h	/^				OPEN_EFP_COMPUTATION,$/;"	e	enum:TickType
OPEN_INTEREST	ib/jts/EWrapper.h	/^				OPEN_INTEREST,$/;"	e	enum:TickType
OPEN_ORDER	ib/jts/EDecoder.h	/^const int OPEN_ORDER                                = 5;$/;"	v
OPEN_ORDER_END	ib/jts/EDecoder.h	/^const int OPEN_ORDER_END                            = 53;$/;"	v
OPEN_POS	ib/jts/Contract.h	/^enum LegOpenClose { SAME_POS, OPEN_POS, CLOSE_POS, UNKNOWN_POS };$/;"	e	enum:LegOpenClose
OPTION_ASK_EXCH	ib/jts/EWrapper.h	/^				OPTION_ASK_EXCH,$/;"	e	enum:TickType
OPTION_BID_EXCH	ib/jts/EWrapper.h	/^				OPTION_BID_EXCH,$/;"	e	enum:TickType
OPTION_CALL_OPEN_INTEREST	ib/jts/EWrapper.h	/^				OPTION_CALL_OPEN_INTEREST,$/;"	e	enum:TickType
OPTION_CALL_VOLUME	ib/jts/EWrapper.h	/^				OPTION_CALL_VOLUME,$/;"	e	enum:TickType
OPTION_HISTORICAL_VOL	ib/jts/EWrapper.h	/^				OPTION_HISTORICAL_VOL,$/;"	e	enum:TickType
OPTION_IMPLIED_VOL	ib/jts/EWrapper.h	/^				OPTION_IMPLIED_VOL,$/;"	e	enum:TickType
OPTION_PUT_OPEN_INTEREST	ib/jts/EWrapper.h	/^				OPTION_PUT_OPEN_INTEREST,$/;"	e	enum:TickType
OPTION_PUT_VOLUME	ib/jts/EWrapper.h	/^				OPTION_PUT_VOLUME,$/;"	e	enum:TickType
ORDER_STATE_H__INCLUDED	ib/jts/OrderState.h	6;"	d
ORDER_STATUS	ib/jts/EDecoder.h	/^const int ORDER_STATUS                              = 3;$/;"	v
OnCancelRejected	fix/fix.h	/^  void OnCancelRejected(const FIX::Message& msg, const FIX::SessionID&) {$/;"	f	class:opentrade::Fix
OnCanceled	fix/fix.h	/^  void OnCanceled(const FIX::Message& msg, const std::string& text) {$/;"	f	class:opentrade::Fix
OnConnect	md/bpipe/bpipe.cc	/^void BPIPE::OnConnect() {$/;"	f	class:BPIPE
OnExecutionReport	fix/fix.h	/^  void OnExecutionReport(const FIX::Message& msg,$/;"	f	class:opentrade::Fix
OnFilled	fix/fix.h	/^  void OnFilled(const FIX::Message& msg, char exec_type, bool is_partial) {$/;"	f	class:opentrade::Fix
OnMessage	opentrade/connection.cc	/^void Connection::OnMessage(const std::string& msg) {$/;"	f	class:opentrade::Connection
OnMessage	xquant/connection.cc	/^void Connection::OnMessage(const std::string& msg) {$/;"	f	class:opentrade::Connection
OnNew	fix/fix.h	/^  void OnNew(const FIX::Message& msg) {$/;"	f	class:opentrade::Fix
OnPendingCancel	fix/fix.h	/^  void OnPendingCancel(const FIX::Message& msg) {$/;"	f	class:opentrade::Fix
OnPendingNew	fix/fix.h	/^  void OnPendingNew(const FIX::Message& msg, const std::string& text) {$/;"	f	class:opentrade::Fix
OnRejected	fix/fix.h	/^  void OnRejected(const FIX::Message& msg, const std::string& text) {$/;"	f	class:opentrade::Fix
OnReplaced	fix/fix.h	/^  void OnReplaced(const FIX::Message& msg, const std::string& text) {$/;"	f	class:opentrade::Fix
OperatorCondition	ib/jts/OperatorCondition.h	/^class TWSAPIDLLEXP OperatorCondition : public OrderCondition {$/;"	c
Order	ib/jts/Order.h	/^	Order() :$/;"	f	struct:Order
Order	ib/jts/Order.h	/^struct Order$/;"	s
Order	opentrade/order.h	/^struct Order : public Contract {$/;"	s	namespace:opentrade
Order	xquant/order.h	/^struct Order : public Contract {$/;"	s	namespace:opentrade
OrderComboLeg	ib/jts/Order.h	/^	OrderComboLeg()$/;"	f	struct:OrderComboLeg
OrderComboLeg	ib/jts/Order.h	/^struct OrderComboLeg$/;"	s
OrderComboLegList	ib/jts/Order.h	/^	typedef std::vector<OrderComboLegSPtr> OrderComboLegList;$/;"	t	struct:Order
OrderComboLegListSPtr	ib/jts/Order.h	/^	typedef std::shared_ptr<OrderComboLegList> OrderComboLegListSPtr;$/;"	t	struct:Order
OrderComboLegSPtr	ib/jts/Order.h	/^typedef std::shared_ptr<OrderComboLeg> OrderComboLegSPtr;$/;"	t
OrderCondition	ib/jts/OrderCondition.h	/^class TWSAPIDLLEXP OrderCondition : public IExternalizable {$/;"	c
OrderConditionType	ib/jts/OrderCondition.h	/^	enum OrderConditionType {$/;"	g	class:OrderCondition
OrderId	ib/jts/CommonDefs.h	/^typedef long OrderId;$/;"	t
OrderState	ib/jts/OrderState.h	/^	explicit OrderState()$/;"	f	struct:OrderState
OrderState	ib/jts/OrderState.h	/^struct OrderState {$/;"	s
OrderTuple	sim/server/server.cc	/^  struct OrderTuple {$/;"	s	class:SimServer	file:
Orders	opentrade/algo.h	/^  typedef std::set<Order*> Orders;$/;"	t	class:opentrade::Instrument
Orders	xquant/algo.h	/^  typedef std::set<Order*> Orders;$/;"	t	class:opentrade::Instrument
Origin	ib/jts/Order.h	/^enum Origin { CUSTOMER,$/;"	g
PLACE_ORDER	ib/jts/EClient.h	/^const int PLACE_ORDER                   = 3;$/;"	m	namespace:ibapi::client_constants
PNL	ib/jts/EDecoder.h	/^const int PNL                                       = 94;$/;"	v
PNL_SINGLE	ib/jts/EDecoder.h	/^const int PNL_SINGLE                                = 95;$/;"	v
PORTFOLIO_VALUE	ib/jts/EDecoder.h	/^const int PORTFOLIO_VALUE                           = 7;$/;"	v
POSITION_DATA	ib/jts/EDecoder.h	/^const int POSITION_DATA                             = 61;$/;"	v
POSITION_END	ib/jts/EDecoder.h	/^const int POSITION_END                              = 62;$/;"	v
POSITION_MULTI	ib/jts/EDecoder.h	/^const int POSITION_MULTI                            = 71;$/;"	v
POSITION_MULTI_END	ib/jts/EDecoder.h	/^const int POSITION_MULTI_END                        = 72;$/;"	v
PROFILES	ib/jts/CommonDefs.h	/^enum faDataType { GROUPS=1, PROFILES, ALIASES } ;$/;"	e	enum:faDataType
ParamDef	opentrade/algo.h	/^struct ParamDef {$/;"	s	namespace:opentrade
ParamDef	xquant/algo.h	/^struct ParamDef {$/;"	s	namespace:opentrade
ParamDefs	opentrade/algo.h	/^typedef std::vector<ParamDef> ParamDefs;$/;"	t	namespace:opentrade
ParamDefs	xquant/algo.h	/^typedef std::vector<ParamDef> ParamDefs;$/;"	t	namespace:opentrade
ParamMap	opentrade/algo.h	/^  typedef std::unordered_map<std::string, ParamDef::Value> ParamMap;$/;"	t	class:opentrade::Algo
ParamMap	xquant/algo.h	/^  typedef std::unordered_map<std::string, ParamDef::Value> ParamMap;$/;"	t	class:opentrade::Algo
ParseLimits	opentrade/account.cc	/^Limits ParseLimits(const std::string& limits_str) {$/;"	f	namespace:opentrade
ParseLimits	xquant/account.cc	/^Limits ParseLimits(const std::string& limits_str) {$/;"	f	namespace:opentrade
ParseParamDef	opentrade/python.cc	/^static inline bool ParseParamDef(PyObject *item, ParamDef *out) {$/;"	f	namespace:opentrade
ParseParamDef	xquant/python.cc	/^static inline bool ParseParamDef(PyObject *item, ParamDef *out) {$/;"	f	namespace:opentrade
ParseParamDefs	opentrade/python.cc	/^static ParamDefs ParseParamDefs(PyObject *pyfunc) {$/;"	f	namespace:opentrade
ParseParamDefs	xquant/python.cc	/^static ParamDefs ParseParamDefs(PyObject *pyfunc) {$/;"	f	namespace:opentrade
ParseParamScalar	opentrade/connection.cc	/^static inline T ParseParamScalar(const json& j) {$/;"	f	namespace:opentrade
ParseParamScalar	xquant/connection.cc	/^static inline T ParseParamScalar(const json& j) {$/;"	f	namespace:opentrade
ParseParamValue	opentrade/connection.cc	/^static inline ParamDef::Value ParseParamValue(const json& j) {$/;"	f	namespace:opentrade
ParseParamValue	xquant/connection.cc	/^static inline ParamDef::Value ParseParamValue(const json& j) {$/;"	f	namespace:opentrade
ParseParams	opentrade/connection.cc	/^static inline decltype(auto) ParseParams(const json& params) {$/;"	f	namespace:opentrade
ParseParams	xquant/connection.cc	/^static inline decltype(auto) ParseParams(const json& params) {$/;"	f	namespace:opentrade
PercentChange	ib/jts/OrderCondition.h	/^		PercentChange = 7$/;"	e	enum:OrderCondition::OrderConditionType
PercentChangeCondition	ib/jts/PercentChangeCondition.h	/^	PercentChangeCondition()$/;"	f	class:PercentChangeCondition
PercentChangeCondition	ib/jts/PercentChangeCondition.h	/^class TWSAPIDLLEXP PercentChangeCondition : public ContractCondition {$/;"	c
Persist	opentrade/algo.cc	/^void AlgoManager::Persist(const Algo& algo, const std::string& status,$/;"	f	class:opentrade::AlgoManager
Persist	xquant/algo.cc	/^void AlgoManager::Persist(const Algo& algo, const std::string& status,$/;"	f	class:opentrade::AlgoManager
Place	opentrade/algo.cc	/^Order* Algo::Place(const Contract& contract, Instrument* inst) {$/;"	f	class:opentrade::Algo
Place	opentrade/exchange_connectivity.cc	/^bool ExchangeConnectivityManager::Place(Order* ord) {$/;"	f	class:opentrade::ExchangeConnectivityManager
Place	xquant/algo.cc	/^Order* Algo::Place(const Contract& contract, Instrument* inst) {$/;"	f	class:opentrade::Algo
Place	xquant/exchange_connectivity.cc	/^bool ExchangeConnectivityManager::Place(Order* ord) {$/;"	f	class:opentrade::ExchangeConnectivityManager
Pnl	opentrade/position.h	/^  struct Pnl {$/;"	s	class:opentrade::PositionManager
Pnl	xquant/position.h	/^  struct Pnl {$/;"	s	class:opentrade::PositionManager
Position	opentrade/position.h	/^struct Position : public PositionValue {$/;"	s	namespace:opentrade
Position	xquant/position.h	/^struct Position : public PositionValue {$/;"	s	namespace:opentrade
PositionManager	opentrade/position.h	/^class PositionManager : public Singleton<PositionManager> {$/;"	c	namespace:opentrade
PositionManager	xquant/position.h	/^class PositionManager : public Singleton<PositionManager> {$/;"	c	namespace:opentrade
PositionValue	opentrade/common.h	/^struct PositionValue {$/;"	s	namespace:opentrade
PositionValue	xquant/common.h	/^struct PositionValue {$/;"	s	namespace:xquant
PositionValue	xquant/common1.h	/^struct PositionValue {$/;"	s	namespace:opentrade
Price	ib/jts/OrderCondition.h	/^		Price = 1,$/;"	e	enum:OrderCondition::OrderConditionType
PriceCondition	ib/jts/PriceCondition.h	/^	PriceCondition() { };$/;"	f	class:PriceCondition
PriceCondition	ib/jts/PriceCondition.h	/^class TWSAPIDLLEXP PriceCondition : public ContractCondition {$/;"	c
PriceIncrement	ib/jts/PriceIncrement.h	/^struct PriceIncrement$/;"	s
PrintPyError	opentrade/python.cc	/^static bool PrintPyError() {$/;"	f	namespace:opentrade
PrintPyError	xquant/python.cc	/^static bool PrintPyError() {$/;"	f	namespace:opentrade
ProcessResponse	md/bpipe/bpipe.cc	/^void BPIPE::ProcessResponse(const bbg::Event& evt) {$/;"	f	class:BPIPE
ProcessSessionStatus	md/bpipe/bpipe.cc	/^void BPIPE::ProcessSessionStatus(const bbg::Event& evt) {$/;"	f	class:BPIPE
ProcessSubscriptionData	md/bpipe/bpipe.cc	/^void BPIPE::ProcessSubscriptionData(const bbg::Event& evt) {$/;"	f	class:BPIPE
ProcessTokenStatus	md/bpipe/bpipe.cc	/^void BPIPE::ProcessTokenStatus(const bbg::Event& evt) {$/;"	f	class:BPIPE
Ptr	opentrade/connection.h	/^  typedef std::shared_ptr<Connection> Ptr;$/;"	t	class:opentrade::Connection
Ptr	opentrade/connection.h	/^  typedef std::shared_ptr<Transport> Ptr;$/;"	t	struct:opentrade::Transport
Ptr	opentrade/order.h	/^  typedef std::shared_ptr<Confirmation> Ptr;$/;"	t	struct:opentrade::Confirmation
Ptr	xquant/connection.h	/^  typedef std::shared_ptr<Connection> Ptr;$/;"	t	class:opentrade::Connection
Ptr	xquant/connection.h	/^  typedef std::shared_ptr<Transport> Ptr;$/;"	t	struct:opentrade::Transport
Ptr	xquant/order.h	/^  typedef std::shared_ptr<Confirmation> Ptr;$/;"	t	struct:opentrade::Confirmation
Publish	opentrade/server.cc	/^void Server::Publish(Confirmation::Ptr cm) {$/;"	f	class:opentrade::Server
Publish	opentrade/server.cc	/^void Server::Publish(const Algo& algo, const std::string& status,$/;"	f	class:opentrade::Server
Publish	xquant/server.cc	/^void Server::Publish(Confirmation::Ptr cm) {$/;"	f	class:opentrade::Server
Publish	xquant/server.cc	/^void Server::Publish(const Algo& algo, const std::string& status,$/;"	f	class:opentrade::Server
PublishMarketStatus	opentrade/connection.cc	/^void Connection::PublishMarketStatus() {$/;"	f	class:opentrade::Connection
PublishMarketStatus	xquant/connection.cc	/^void Connection::PublishMarketStatus() {$/;"	f	class:opentrade::Connection
PublishMarketdata	opentrade/connection.cc	/^void Connection::PublishMarketdata() {$/;"	f	class:opentrade::Connection
PublishMarketdata	xquant/connection.cc	/^void Connection::PublishMarketdata() {$/;"	f	class:opentrade::Connection
PyModule	opentrade/python.h	/^struct PyModule {$/;"	s	namespace:opentrade
PyModule	xquant/python.h	/^struct PyModule {$/;"	s	namespace:opentrade
Python	opentrade/python.cc	/^Python::Python() {}$/;"	f	class:opentrade::Python
Python	opentrade/python.h	/^class Python : public Algo {$/;"	c	namespace:opentrade
Python	xquant/python.cc	/^Python::Python() {}$/;"	f	class:opentrade::Python
Python	xquant/python.h	/^class Python : public Algo {$/;"	c	namespace:opentrade
QUERY_DISPLAY_GROUPS	ib/jts/EClient.h	/^const int QUERY_DISPLAY_GROUPS          = 67;$/;"	m	namespace:ibapi::client_constants
Quote	opentrade/market_data.h	/^  struct Quote {$/;"	s	struct:opentrade::MarketData
Quote	xquant/market_data.h	/^  struct Quote {$/;"	s	struct:opentrade::MarketData
REALTIME	ib/jts/CommonDefs.h	/^	REALTIME = 1, $/;"	e	enum:MarketDataType
REAL_TIME_BARS	ib/jts/EDecoder.h	/^const int REAL_TIME_BARS                            = 50;$/;"	v
RECEIVE_FA	ib/jts/EDecoder.h	/^const int RECEIVE_FA                                = 16;$/;"	v
REDIRECT_COUNT_MAX	ib/jts/EClientSocket.h	/^    static const int REDIRECT_COUNT_MAX = 2;$/;"	m	class:EClientSocket
REGULATORY_IMBALANCE	ib/jts/EWrapper.h	/^				REGULATORY_IMBALANCE,$/;"	e	enum:TickType
REPLACE_FA	ib/jts/EClient.h	/^const int REPLACE_FA                    = 19;$/;"	m	namespace:ibapi::client_constants
REQ_ACCOUNT_SUMMARY	ib/jts/EClient.h	/^const int REQ_ACCOUNT_SUMMARY           = 62;$/;"	m	namespace:ibapi::client_constants
REQ_ACCOUNT_UPDATES_MULTI	ib/jts/EClient.h	/^const int REQ_ACCOUNT_UPDATES_MULTI     = 76;$/;"	m	namespace:ibapi::client_constants
REQ_ACCT_DATA	ib/jts/EClient.h	/^const int REQ_ACCT_DATA                 = 6;$/;"	m	namespace:ibapi::client_constants
REQ_ALL_OPEN_ORDERS	ib/jts/EClient.h	/^const int REQ_ALL_OPEN_ORDERS           = 16;$/;"	m	namespace:ibapi::client_constants
REQ_AUTO_OPEN_ORDERS	ib/jts/EClient.h	/^const int REQ_AUTO_OPEN_ORDERS          = 15;$/;"	m	namespace:ibapi::client_constants
REQ_CALC_IMPLIED_VOLAT	ib/jts/EClient.h	/^const int REQ_CALC_IMPLIED_VOLAT        = 54;$/;"	m	namespace:ibapi::client_constants
REQ_CALC_OPTION_PRICE	ib/jts/EClient.h	/^const int REQ_CALC_OPTION_PRICE         = 55;$/;"	m	namespace:ibapi::client_constants
REQ_CONTRACT_DATA	ib/jts/EClient.h	/^const int REQ_CONTRACT_DATA             = 9;$/;"	m	namespace:ibapi::client_constants
REQ_CURRENT_TIME	ib/jts/EClient.h	/^const int REQ_CURRENT_TIME              = 49;$/;"	m	namespace:ibapi::client_constants
REQ_EXECUTIONS	ib/jts/EClient.h	/^const int REQ_EXECUTIONS                = 7;$/;"	m	namespace:ibapi::client_constants
REQ_FA	ib/jts/EClient.h	/^const int REQ_FA                        = 18;$/;"	m	namespace:ibapi::client_constants
REQ_FAMILY_CODES	ib/jts/EClient.h	/^const int REQ_FAMILY_CODES              = 80;$/;"	m	namespace:ibapi::client_constants
REQ_FUNDAMENTAL_DATA	ib/jts/EClient.h	/^const int REQ_FUNDAMENTAL_DATA          = 52;$/;"	m	namespace:ibapi::client_constants
REQ_GLOBAL_CANCEL	ib/jts/EClient.h	/^const int REQ_GLOBAL_CANCEL             = 58;$/;"	m	namespace:ibapi::client_constants
REQ_HEAD_TIMESTAMP	ib/jts/EClient.h	/^const int REQ_HEAD_TIMESTAMP            = 87;$/;"	m	namespace:ibapi::client_constants
REQ_HISTOGRAM_DATA	ib/jts/EClient.h	/^const int REQ_HISTOGRAM_DATA            = 88;$/;"	m	namespace:ibapi::client_constants
REQ_HISTORICAL_DATA	ib/jts/EClient.h	/^const int REQ_HISTORICAL_DATA           = 20;$/;"	m	namespace:ibapi::client_constants
REQ_HISTORICAL_NEWS	ib/jts/EClient.h	/^const int REQ_HISTORICAL_NEWS           = 86;$/;"	m	namespace:ibapi::client_constants
REQ_HISTORICAL_TICKS	ib/jts/EClient.h	/^const int REQ_HISTORICAL_TICKS          = 96;$/;"	m	namespace:ibapi::client_constants
REQ_IDS	ib/jts/EClient.h	/^const int REQ_IDS                       = 8;$/;"	m	namespace:ibapi::client_constants
REQ_MANAGED_ACCTS	ib/jts/EClient.h	/^const int REQ_MANAGED_ACCTS             = 17;$/;"	m	namespace:ibapi::client_constants
REQ_MARKET_DATA_TYPE	ib/jts/EClient.h	/^const int REQ_MARKET_DATA_TYPE          = 59;$/;"	m	namespace:ibapi::client_constants
REQ_MARKET_RULE	ib/jts/EClient.h	/^const int REQ_MARKET_RULE               = 91;$/;"	m	namespace:ibapi::client_constants
REQ_MATCHING_SYMBOLS	ib/jts/EClient.h	/^const int REQ_MATCHING_SYMBOLS          = 81;$/;"	m	namespace:ibapi::client_constants
REQ_MKT_DATA	ib/jts/EClient.h	/^const int REQ_MKT_DATA                  = 1;$/;"	m	namespace:ibapi::client_constants
REQ_MKT_DEPTH	ib/jts/EClient.h	/^const int REQ_MKT_DEPTH                 = 10;$/;"	m	namespace:ibapi::client_constants
REQ_MKT_DEPTH_EXCHANGES	ib/jts/EClient.h	/^const int REQ_MKT_DEPTH_EXCHANGES       = 82;$/;"	m	namespace:ibapi::client_constants
REQ_NEWS_ARTICLE	ib/jts/EClient.h	/^const int REQ_NEWS_ARTICLE              = 84;$/;"	m	namespace:ibapi::client_constants
REQ_NEWS_BULLETINS	ib/jts/EClient.h	/^const int REQ_NEWS_BULLETINS            = 12;$/;"	m	namespace:ibapi::client_constants
REQ_NEWS_PROVIDERS	ib/jts/EClient.h	/^const int REQ_NEWS_PROVIDERS            = 85;$/;"	m	namespace:ibapi::client_constants
REQ_OPEN_ORDERS	ib/jts/EClient.h	/^const int REQ_OPEN_ORDERS               = 5;$/;"	m	namespace:ibapi::client_constants
REQ_PNL	ib/jts/EClient.h	/^const int REQ_PNL                       = 92;$/;"	m	namespace:ibapi::client_constants
REQ_PNL_SINGLE	ib/jts/EClient.h	/^const int REQ_PNL_SINGLE                = 94;$/;"	m	namespace:ibapi::client_constants
REQ_POSITIONS	ib/jts/EClient.h	/^const int REQ_POSITIONS                 = 61;$/;"	m	namespace:ibapi::client_constants
REQ_POSITIONS_MULTI	ib/jts/EClient.h	/^const int REQ_POSITIONS_MULTI           = 74;$/;"	m	namespace:ibapi::client_constants
REQ_REAL_TIME_BARS	ib/jts/EClient.h	/^const int REQ_REAL_TIME_BARS            = 50;$/;"	m	namespace:ibapi::client_constants
REQ_SCANNER_PARAMETERS	ib/jts/EClient.h	/^const int REQ_SCANNER_PARAMETERS        = 24;$/;"	m	namespace:ibapi::client_constants
REQ_SCANNER_SUBSCRIPTION	ib/jts/EClient.h	/^const int REQ_SCANNER_SUBSCRIPTION      = 22;$/;"	m	namespace:ibapi::client_constants
REQ_SEC_DEF_OPT_PARAMS	ib/jts/EClient.h	/^const int REQ_SEC_DEF_OPT_PARAMS        = 78;$/;"	m	namespace:ibapi::client_constants
REQ_SMART_COMPONENTS	ib/jts/EClient.h	/^const int REQ_SMART_COMPONENTS          = 83;$/;"	m	namespace:ibapi::client_constants
REQ_SOFT_DOLLAR_TIERS	ib/jts/EClient.h	/^const int REQ_SOFT_DOLLAR_TIERS         = 79;$/;"	m	namespace:ibapi::client_constants
REQ_TICK_BY_TICK_DATA	ib/jts/EClient.h	/^const int REQ_TICK_BY_TICK_DATA         = 97;$/;"	m	namespace:ibapi::client_constants
REROUTE_MKT_DATA_REQ	ib/jts/EDecoder.h	/^const int REROUTE_MKT_DATA_REQ                      = 91;$/;"	v
REROUTE_MKT_DEPTH_REQ	ib/jts/EDecoder.h	/^const int REROUTE_MKT_DEPTH_REQ                     = 92;$/;"	v
RT_HISTORICAL_VOL	ib/jts/EWrapper.h	/^				RT_HISTORICAL_VOL,$/;"	e	enum:TickType
RT_TRD_VOLUME	ib/jts/EWrapper.h	/^				RT_TRD_VOLUME,$/;"	e	enum:TickType
RT_VOLUME	ib/jts/EWrapper.h	/^				RT_VOLUME,$/;"	e	enum:TickType
Read	ib/ib.cc	/^void IB::Read() {$/;"	f	class:IB
Register	opentrade/algo.cc	/^inline void AlgoManager::Register(Instrument* inst) {$/;"	f	class:opentrade::AlgoManager
Register	xquant/algo.cc	/^inline void AlgoManager::Register(Instrument* inst) {$/;"	f	class:opentrade::AlgoManager
RegisterFunc	opentrade/python.cc	/^static void RegisterFunc(PyMethodDef *def, PyObject *obj) {$/;"	f	namespace:opentrade
RegisterFunc	xquant/python.cc	/^static void RegisterFunc(PyMethodDef *def, PyObject *obj) {$/;"	f	namespace:opentrade
RepeatTask	opentrade/task_pool.h	/^  void RepeatTask(const T& func, Tm t, Tm2 interval) {$/;"	f	class:opentrade::TaskPool
RepeatTask	xquant/task_pool.h	/^  void RepeatTask(const T& func, Tm t, Tm2 interval) {$/;"	f	class:xquant::TaskPool
RiskManager	opentrade/risk.h	/^class RiskManager : public Singleton<RiskManager> {$/;"	c	namespace:opentrade
RiskManager	xquant/risk.h	/^class RiskManager : public Singleton<RiskManager> {$/;"	c	namespace:opentrade
Run	opentrade/algo.cc	/^void AlgoManager::Run(int nthreads) {$/;"	f	class:opentrade::AlgoManager
Run	xquant/algo.cc	/^void AlgoManager::Run(int nthreads) {$/;"	f	class:opentrade::AlgoManager
SAME_POS	ib/jts/Contract.h	/^enum LegOpenClose { SAME_POS, OPEN_POS, CLOSE_POS, UNKNOWN_POS };$/;"	e	enum:LegOpenClose
SCANNER_DATA	ib/jts/EDecoder.h	/^const int SCANNER_DATA                              = 20;$/;"	v
SCANNER_PARAMETERS	ib/jts/EDecoder.h	/^const int SCANNER_PARAMETERS                        = 19;$/;"	v
SECURITY_DEFINITION_OPTION_PARAMETER	ib/jts/EDecoder.h	/^const int SECURITY_DEFINITION_OPTION_PARAMETER      = 75;$/;"	v
SECURITY_DEFINITION_OPTION_PARAMETER_END	ib/jts/EDecoder.h	/^const int SECURITY_DEFINITION_OPTION_PARAMETER_END  = 76;$/;"	v
SET_SERVER_LOGLEVEL	ib/jts/EClient.h	/^const int SET_SERVER_LOGLEVEL           = 14;$/;"	m	namespace:ibapi::client_constants
SHORTABLE	ib/jts/EWrapper.h	/^				SHORTABLE,$/;"	e	enum:TickType
SHORT_TERM_VOLUME_10_MIN	ib/jts/EWrapper.h	/^				SHORT_TERM_VOLUME_10_MIN,$/;"	e	enum:TickType
SHORT_TERM_VOLUME_3_MIN	ib/jts/EWrapper.h	/^				SHORT_TERM_VOLUME_3_MIN,$/;"	e	enum:TickType
SHORT_TERM_VOLUME_5_MIN	ib/jts/EWrapper.h	/^				SHORT_TERM_VOLUME_5_MIN,$/;"	e	enum:TickType
SMART_COMPONENTS	ib/jts/EDecoder.h	/^const int SMART_COMPONENTS                          = 82;$/;"	v
SOFT_DOLLAR_TIERS	ib/jts/EDecoder.h	/^const int SOFT_DOLLAR_TIERS                         = 77;$/;"	v
START_API	ib/jts/EClient.h	/^const int START_API                     = 71;$/;"	m	namespace:ibapi::client_constants
SUBSCRIBE_TO_GROUP_EVENTS	ib/jts/EClient.h	/^const int SUBSCRIBE_TO_GROUP_EVENTS     = 68;$/;"	m	namespace:ibapi::client_constants
SYMBOL_SAMPLES	ib/jts/EDecoder.h	/^const int SYMBOL_SAMPLES                            = 79;$/;"	v
SYSTEM_ERROR	ib/jts/TwsSocketClientErrors.h	/^static const int SYSTEM_ERROR = 600;$/;"	v
ScanData	ib/jts/EDecoder.h	/^struct ScanData {$/;"	s	namespace:__anon1
ScannerSubscription	ib/jts/ScannerSubscription.h	/^	ScannerSubscription() {$/;"	f	struct:ScannerSubscription
ScannerSubscription	ib/jts/ScannerSubscription.h	/^struct ScannerSubscription {$/;"	s
Security	opentrade/security.h	/^struct Security {$/;"	s	namespace:opentrade
Security	xquant/security.h	/^struct Security {$/;"	s	namespace:opentrade
SecurityManager	opentrade/security.h	/^class SecurityManager : public Singleton<SecurityManager> {$/;"	c	namespace:opentrade
SecurityManager	xquant/security.h	/^class SecurityManager : public Singleton<SecurityManager> {$/;"	c	namespace:opentrade
SecurityMap	opentrade/security.h	/^      SecurityMap;$/;"	t	class:opentrade::SecurityManager
SecurityMap	xquant/security.h	/^      SecurityMap;$/;"	t	class:opentrade::SecurityManager
SecurityTuple	opentrade/algo.h	/^    SecurityTuple;$/;"	t	namespace:opentrade
SecurityTuple	xquant/algo.h	/^    SecurityTuple;$/;"	t	namespace:opentrade
Send	fix/fix.h	/^  bool Send(FIX::Message* msg) { return session_->send(*msg); }$/;"	f	class:opentrade::Fix
Send	opentrade/connection.cc	/^void Connection::Send(Algo::IdType id, time_t tm, const std::string& token,$/;"	f	class:opentrade::Connection
Send	opentrade/connection.cc	/^void Connection::Send(Confirmation::Ptr cm) {$/;"	f	class:opentrade::Connection
Send	opentrade/connection.cc	/^void Connection::Send(const Algo& algo, const std::string& status,$/;"	f	class:opentrade::Connection
Send	opentrade/connection.cc	/^void Connection::Send(const Confirmation& cm, bool offline) {$/;"	f	class:opentrade::Connection
Send	opentrade/connection.h	/^  void Send(const std::string& msg) {$/;"	f	class:opentrade::Connection
Send	xquant/connection.cc	/^void Connection::Send(Algo::IdType id, time_t tm, const std::string& token,$/;"	f	class:opentrade::Connection
Send	xquant/connection.cc	/^void Connection::Send(Confirmation::Ptr cm) {$/;"	f	class:opentrade::Connection
Send	xquant/connection.cc	/^void Connection::Send(const Algo& algo, const std::string& status,$/;"	f	class:opentrade::Connection
Send	xquant/connection.cc	/^void Connection::Send(const Confirmation& cm, bool offline) {$/;"	f	class:opentrade::Connection
Send	xquant/connection.h	/^  void Send(const std::string& msg) {$/;"	f	class:opentrade::Connection
ServeStatic	opentrade/server.cc	/^static void ServeStatic() {$/;"	f	namespace:opentrade
ServeStatic	xquant/server.cc	/^static void ServeStatic() {$/;"	f	namespace:opentrade
Server	opentrade/server.h	/^class Server {$/;"	c	namespace:opentrade
Server	xquant/server.h	/^class Server {$/;"	c	namespace:opentrade
Session	opentrade/database.h	/^  static auto Session() { return std::make_unique<soci::session>(*pool_); }$/;"	f	class:opentrade::Database
Session	xquant/database.h	/^  static auto Session() { return std::make_unique<soci::session>(*pool_); }$/;"	f	class:opentrade::Database
SetAndSend	sim/client/client.cc	/^  std::string SetAndSend(const opentrade::Order& ord, FIX::Message* msg) {$/;"	f	class:SimClient
SetItem	opentrade/python.cc	/^void SetItem(const char *name, T v, PyObject *obj) {$/;"	f	namespace:opentrade
SetItem	opentrade/python.cc	/^void SetItem(const char *name, const char *v, PyObject *obj) {$/;"	f	namespace:opentrade
SetItem	opentrade/python.cc	/^void SetItem(const char *name, double v, PyObject *obj) {$/;"	f	namespace:opentrade
SetItem	opentrade/python.cc	/^void SetItem(const char *name, float v, PyObject *obj) {$/;"	f	namespace:opentrade
SetItem	xquant/python.cc	/^void SetItem(const char *name, T v, PyObject *obj) {$/;"	f	namespace:opentrade
SetItem	xquant/python.cc	/^void SetItem(const char *name, const char *v, PyObject *obj) {$/;"	f	namespace:opentrade
SetItem	xquant/python.cc	/^void SetItem(const char *name, double v, PyObject *obj) {$/;"	f	namespace:opentrade
SetItem	xquant/python.cc	/^void SetItem(const char *name, float v, PyObject *obj) {$/;"	f	namespace:opentrade
SetSocketNonBlocking	ib/jts/EPosixClientSocketPlatform.h	/^	inline bool SetSocketNonBlocking(int sockfd) { $/;"	f
SetTags	fix/fix.h	/^  void SetTags(const Order& ord, FIX::Message* msg) {$/;"	f	class:opentrade::Fix
SetTimeout	opentrade/algo.cc	/^void Algo::SetTimeout(std::function<void()> func, uint32_t milliseconds) {$/;"	f	class:opentrade::Algo
SetTimeout	opentrade/algo.cc	/^void AlgoManager::SetTimeout(Algo::IdType id, std::function<void()> func,$/;"	f	class:opentrade::AlgoManager
SetTimeout	xquant/algo.cc	/^void Algo::SetTimeout(std::function<void()> func, uint32_t milliseconds) {$/;"	f	class:opentrade::Algo
SetTimeout	xquant/algo.cc	/^void AlgoManager::SetTimeout(Algo::IdType id, std::function<void()> func,$/;"	f	class:opentrade::AlgoManager
SetValue	opentrade/python.cc	/^void SetValue(const char *name, T v, PyObject *obj) {$/;"	f	namespace:opentrade
SetValue	opentrade/python.cc	/^void SetValue(const char *name, const char *v, PyObject *obj) {$/;"	f	namespace:opentrade
SetValue	opentrade/python.cc	/^void SetValue(const char *name, const void *v, PyObject *obj) {$/;"	f	namespace:opentrade
SetValue	opentrade/python.cc	/^void SetValue(const char *name, double v, PyObject *obj) {$/;"	f	namespace:opentrade
SetValue	opentrade/python.cc	/^void SetValue(const char *name, float v, PyObject *obj) {$/;"	f	namespace:opentrade
SetValue	xquant/python.cc	/^void SetValue(const char *name, T v, PyObject *obj) {$/;"	f	namespace:opentrade
SetValue	xquant/python.cc	/^void SetValue(const char *name, const char *v, PyObject *obj) {$/;"	f	namespace:opentrade
SetValue	xquant/python.cc	/^void SetValue(const char *name, const void *v, PyObject *obj) {$/;"	f	namespace:opentrade
SetValue	xquant/python.cc	/^void SetValue(const char *name, double v, PyObject *obj) {$/;"	f	namespace:opentrade
SetValue	xquant/python.cc	/^void SetValue(const char *name, float v, PyObject *obj) {$/;"	f	namespace:opentrade
SimClient	sim/client/client.cc	/^  SimClient() { empty_store_ = true; }$/;"	f	class:SimClient
SimClient	sim/client/client.cc	/^class SimClient : public opentrade::Fix {$/;"	c	file:
SimServer	sim/server/server.cc	/^class SimServer : public opentrade::MarketDataAdapter, public FIX::Application {$/;"	c	file:
Singleton	opentrade/common.h	/^  Singleton() {}$/;"	f	class:opentrade::Singleton
Singleton	opentrade/common.h	/^class Singleton {$/;"	c	namespace:opentrade
Singleton	xquant/common.h	/^    Singleton() {}$/;"	f	class:xquant::Singleton
Singleton	xquant/common.h	/^class Singleton {$/;"	c	namespace:xquant
Singleton	xquant/common1.h	/^  Singleton() {}$/;"	f	class:opentrade::Singleton
Singleton	xquant/common1.h	/^class Singleton {$/;"	c	namespace:opentrade
SmartComponentsMap	ib/jts/EWrapper.h	/^typedef std::map<int, std::tuple<std::string, char>> SmartComponentsMap;$/;"	t
SocketClose	ib/jts/EPosixClientSocketPlatform.h	/^	inline int SocketClose(int sockfd) { return close( sockfd); };$/;"	f
SocketClose	ib/jts/EPosixClientSocketPlatform.h	/^	inline int SocketClose(int sockfd) { return closesocket( sockfd); };$/;"	f
SocketsDestroy	ib/jts/EPosixClientSocketPlatform.h	/^	inline bool SocketsDestroy() { return ( !WSACleanup()); };$/;"	f
SocketsDestroy	ib/jts/EPosixClientSocketPlatform.h	/^	inline bool SocketsDestroy() { return true; };$/;"	f
SocketsInit	ib/jts/EPosixClientSocketPlatform.h	/^	inline bool SocketsInit( void) {$/;"	f
SocketsInit	ib/jts/EPosixClientSocketPlatform.h	/^	inline bool SocketsInit() { return true; };$/;"	f
SoftDollarTier	ib/jts/SoftDollarTier.cpp	/^SoftDollarTier::SoftDollarTier(const std::string& name, const std::string& val, const std::string& displayName) :$/;"	f	class:SoftDollarTier
SoftDollarTier	ib/jts/SoftDollarTier.h	/^class TWSAPIDLLEXP SoftDollarTier$/;"	c
Spawn	opentrade/algo.cc	/^Algo* AlgoManager::Spawn(std::shared_ptr<Algo::ParamMap> params,$/;"	f	class:opentrade::AlgoManager
Spawn	xquant/algo.cc	/^Algo* AlgoManager::Spawn(std::shared_ptr<Algo::ParamMap> params,$/;"	f	class:opentrade::AlgoManager
Split	opentrade/utility.h	/^static inline decltype(auto) Split(const std::string& str, const char* sep,$/;"	f	namespace:opentrade
Split	xquant/utility.h	/^static inline decltype(auto) Split(const std::string& str, const char* sep,$/;"	f	namespace:xquant
SqlLog	opentrade/database.cc	/^  SqlLog() : std::ostream(this) {}$/;"	f	class:opentrade::SqlLog
SqlLog	opentrade/database.cc	/^class SqlLog : public std::ostream, std::streambuf {$/;"	c	namespace:opentrade	file:
SqlLog	xquant/database.cc	/^  SqlLog() : std::ostream(this) {}$/;"	f	class:opentrade::SqlLog
SqlLog	xquant/database.cc	/^class SqlLog : public std::ostream, std::streambuf {$/;"	c	namespace:opentrade	file:
Start	opentrade/server.cc	/^void Server::Start(int port, int nthreads) {$/;"	f	class:opentrade::Server
Start	xquant/server.cc	/^void Server::Start(int port, int nthreads) {$/;"	f	class:opentrade::Server
Stop	opentrade/algo.cc	/^void Algo::Stop() {$/;"	f	class:opentrade::Algo
Stop	opentrade/algo.cc	/^void AlgoManager::Stop() {$/;"	f	class:opentrade::AlgoManager
Stop	opentrade/algo.cc	/^void AlgoManager::Stop(Algo::IdType id) {$/;"	f	class:opentrade::AlgoManager
Stop	opentrade/algo.cc	/^void AlgoManager::Stop(const std::string& token) {$/;"	f	class:opentrade::AlgoManager
Stop	opentrade/server.cc	/^void Server::Stop() {$/;"	f	class:opentrade::Server
Stop	opentrade/task_pool.h	/^  void Stop(bool wait = true) {$/;"	f	class:opentrade::TaskPool
Stop	xquant/algo.cc	/^void Algo::Stop() {$/;"	f	class:opentrade::Algo
Stop	xquant/algo.cc	/^void AlgoManager::Stop() {$/;"	f	class:opentrade::AlgoManager
Stop	xquant/algo.cc	/^void AlgoManager::Stop(Algo::IdType id) {$/;"	f	class:opentrade::AlgoManager
Stop	xquant/algo.cc	/^void AlgoManager::Stop(const std::string& token) {$/;"	f	class:opentrade::AlgoManager
Stop	xquant/server.cc	/^void Server::Stop() {$/;"	f	class:opentrade::Server
Stop	xquant/task_pool.h	/^  void Stop(bool wait = true) {$/;"	f	class:xquant::TaskPool
StrMap	opentrade/account.h	/^  typedef std::unordered_map<std::string, std::string> StrMap;$/;"	t	struct:opentrade::BrokerAccount
StrMap	opentrade/adapter.h	/^  typedef std::unordered_map<std::string, std::string> StrMap;$/;"	t	class:opentrade::Adapter
StrMap	xquant/account.h	/^  typedef std::unordered_map<std::string, std::string> StrMap;$/;"	t	struct:opentrade::BrokerAccount
StrMap	xquant/account1.h	/^  typedef std::unordered_map<std::string, std::string> StrMap;$/;"	t	struct:opentrade::BrokerAccount
StrMap	xquant/adapter.h	/^  typedef std::unordered_map<std::string, std::string> StrMap;$/;"	t	class:opentrade::Adapter
SubAccount	opentrade/account.h	/^struct SubAccount : public AccountBase {$/;"	s	namespace:opentrade
SubAccount	xquant/account.h	/^struct SubAccount : public AccountBase {$/;"	s	namespace:opentrade
SubAccount	xquant/account1.h	/^struct SubAccount : public AccountBase {$/;"	s	namespace:opentrade
SubAccountBrokerAccountMap	opentrade/account.h	/^struct SubAccountBrokerAccountMap {$/;"	s	namespace:opentrade
SubAccountBrokerAccountMap	xquant/account.h	/^struct SubAccountBrokerAccountMap {$/;"	s	namespace:opentrade
SubAccountBrokerAccountMap	xquant/account1.h	/^struct SubAccountBrokerAccountMap {$/;"	s	namespace:opentrade
SubAccountMap	opentrade/account.h	/^  typedef std::unordered_map<SubAccount::IdType, SubAccount*> SubAccountMap;$/;"	t	struct:opentrade::User
SubAccountMap	xquant/account.h	/^  typedef std::unordered_map<SubAccount::IdType, SubAccount*> SubAccountMap;$/;"	t	struct:opentrade::User
SubAccountMap	xquant/account1.h	/^  typedef std::unordered_map<SubAccount::IdType, SubAccount*> SubAccountMap;$/;"	t	struct:opentrade::User
Subscribe	opentrade/algo.cc	/^Instrument* Algo::Subscribe(const Security& sec, DataSrc::IdType src) {$/;"	f	class:opentrade::Algo
Subscribe	opentrade/market_data.cc	/^MarketDataAdapter* MarketDataManager::Subscribe(const Security& sec,$/;"	f	class:opentrade::MarketDataManager
Subscribe	xquant/algo.cc	/^Instrument* Algo::Subscribe(const Security& sec, DataSrc::IdType src) {$/;"	f	class:opentrade::Algo
Subscribe	xquant/market_data.cc	/^MarketDataAdapter* MarketDataManager::Subscribe(const Security& sec,$/;"	f	class:opentrade::MarketDataManager
Subscribe2	ib/ib.cc	/^void IB::Subscribe2(const opentrade::Security& sec) {$/;"	f	class:IB
Subscribe2	md/bpipe/bpipe.cc	/^void BPIPE::Subscribe2(const opentrade::Security& sec) {$/;"	f	class:BPIPE
TICK_BY_TICK	ib/jts/EDecoder.h	/^const int TICK_BY_TICK                              = 99;$/;"	v
TICK_EFP	ib/jts/EDecoder.h	/^const int TICK_EFP                                  = 47;$/;"	v
TICK_GENERIC	ib/jts/EDecoder.h	/^const int TICK_GENERIC                              = 45;$/;"	v
TICK_NEWS	ib/jts/EDecoder.h	/^const int TICK_NEWS                                 = 84;$/;"	v
TICK_OPTION_COMPUTATION	ib/jts/EDecoder.h	/^const int TICK_OPTION_COMPUTATION                   = 21;$/;"	v
TICK_PRICE	ib/jts/EDecoder.h	/^const int TICK_PRICE                                = 1;$/;"	v
TICK_REQ_PARAMS	ib/jts/EDecoder.h	/^const int TICK_REQ_PARAMS                           = 81;$/;"	v
TICK_SIZE	ib/jts/EDecoder.h	/^const int TICK_SIZE                                 = 2;$/;"	v
TICK_SNAPSHOT_END	ib/jts/EDecoder.h	/^const int TICK_SNAPSHOT_END                         = 57;$/;"	v
TICK_STRING	ib/jts/EDecoder.h	/^const int TICK_STRING                               = 46;$/;"	v
TRADE_COUNT	ib/jts/EWrapper.h	/^				TRADE_COUNT,$/;"	e	enum:TickType
TRADE_RATE	ib/jts/EWrapper.h	/^				TRADE_RATE,$/;"	e	enum:TickType
TWAP	algo/twap/twap.h	/^class TWAP : public Algo {$/;"	c	namespace:opentrade
TWSAPIDLLEXP	ib/jts/StdAfx.h	42;"	d
TWSAPIDLLEXP	ib/jts/StdAfx.h	8;"	d
TagValue	ib/jts/TagValue.h	/^	TagValue() {}$/;"	f	struct:TagValue
TagValue	ib/jts/TagValue.h	/^	TagValue(const std::string& p_tag, const std::string& p_value)$/;"	f	struct:TagValue
TagValue	ib/jts/TagValue.h	/^struct TagValue$/;"	s
TagValueList	ib/jts/TagValue.h	/^typedef std::vector<TagValueSPtr> TagValueList;$/;"	t
TagValueListSPtr	ib/jts/TagValue.h	/^typedef std::shared_ptr<TagValueList> TagValueListSPtr;$/;"	t
TagValueSPtr	ib/jts/TagValue.h	/^typedef std::shared_ptr<TagValue> TagValueSPtr;$/;"	t
TaskPool	opentrade/task_pool.h	/^  explicit TaskPool(size_t nthreads = 1) {$/;"	f	class:opentrade::TaskPool
TaskPool	opentrade/task_pool.h	/^class TaskPool {$/;"	c	namespace:opentrade
TaskPool	xquant/task_pool.h	/^  explicit TaskPool(size_t nthreads = 1) {$/;"	f	class:xquant::TaskPool
TaskPool	xquant/task_pool.h	/^class TaskPool {$/;"	c	namespace:xquant
Throttle	opentrade/common.h	/^struct Throttle {$/;"	s	namespace:opentrade
Throttle	xquant/common.h	/^struct Throttle {$/;"	s	namespace:xquant
Throttle	xquant/common1.h	/^struct Throttle {$/;"	s	namespace:opentrade
TickAttrib	ib/jts/TickAttrib.h	/^struct TickAttrib$/;"	s
TickSizeTable	opentrade/security.h	/^  typedef std::vector<TickSizeTuple> TickSizeTable;$/;"	t	struct:opentrade::Exchange
TickSizeTable	xquant/security.h	/^  typedef std::vector<TickSizeTuple> TickSizeTable;$/;"	t	struct:opentrade::Exchange
TickSizeTuple	opentrade/security.h	/^  struct TickSizeTuple {$/;"	s	struct:opentrade::Exchange
TickSizeTuple	xquant/security.h	/^  struct TickSizeTuple {$/;"	s	struct:opentrade::Exchange
TickType	ib/jts/EWrapper.h	/^enum TickType { BID_SIZE, BID, ASK, ASK_SIZE, LAST, LAST_SIZE,$/;"	g
TickerId	ib/jts/CommonDefs.h	/^typedef long TickerId;$/;"	t
Time	ib/jts/OrderCondition.h	/^		Time = 3,$/;"	e	enum:OrderCondition::OrderConditionType
TimeCondition	ib/jts/TimeCondition.h	/^	TimeCondition() { }$/;"	f	class:TimeCondition
TimeCondition	ib/jts/TimeCondition.h	/^class TWSAPIDLLEXP TimeCondition : public OperatorCondition {$/;"	c
Timer	algo/twap/twap.cc	/^void TWAP::Timer() {$/;"	f	class:opentrade::TWAP
Trade	opentrade/market_data.h	/^  struct Trade {$/;"	s	struct:opentrade::MarketData
Trade	xquant/market_data.h	/^  struct Trade {$/;"	s	struct:opentrade::MarketData
Transport	opentrade/connection.h	/^struct Transport {$/;"	s	namespace:opentrade
Transport	xquant/connection.h	/^struct Transport {$/;"	s	namespace:opentrade
TryEnter	ib/jts/EMutex.cpp	/^bool EMutex::TryEnter() {$/;"	f	class:EMutex
TwsConnectionTime	ib/jts/EClient.cpp	/^std::string EClient::TwsConnectionTime()$/;"	f	class:EClient
UNKNOWN	ib/jts/Order.h	/^              UNKNOWN };$/;"	e	enum:Origin
UNKNOWN_POS	ib/jts/Contract.h	/^enum LegOpenClose { SAME_POS, OPEN_POS, CLOSE_POS, UNKNOWN_POS };$/;"	e	enum:LegOpenClose
UNSET_DOUBLE	ib/jts/Order.h	15;"	d
UNSET_DOUBLE	ib/jts/ScannerSubscription.h	12;"	d
UNSET_INTEGER	ib/jts/DepthMktDataDescription.h	9;"	d
UNSET_INTEGER	ib/jts/Order.h	16;"	d
UNSET_INTEGER	ib/jts/ScannerSubscription.h	13;"	d
UNSUBSCRIBE_FROM_GROUP_EVENTS	ib/jts/EClient.h	/^const int UNSUBSCRIBE_FROM_GROUP_EVENTS = 70;$/;"	m	namespace:ibapi::client_constants
UPDATE_DISPLAY_GROUP	ib/jts/EClient.h	/^const int UPDATE_DISPLAY_GROUP          = 69;$/;"	m	namespace:ibapi::client_constants
Update	opentrade/algo.cc	/^void AlgoManager::Update(DataSrc::IdType src, Security::IdType id) {$/;"	f	class:opentrade::AlgoManager
Update	opentrade/common.h	/^  void Update(int tm2) {$/;"	f	struct:opentrade::Throttle
Update	opentrade/market_data.cc	/^void MarketDataAdapter::Update(Security::IdType id, const MarketData::Quote& q,$/;"	f	class:opentrade::MarketDataAdapter
Update	opentrade/market_data.cc	/^void MarketDataAdapter::Update(Security::IdType id, double last_price,$/;"	f	class:opentrade::MarketDataAdapter
Update	opentrade/market_data.cc	/^void MarketDataAdapter::Update(Security::IdType id, double price, double size,$/;"	f	class:opentrade::MarketDataAdapter
Update	xquant/algo.cc	/^void AlgoManager::Update(DataSrc::IdType src, Security::IdType id) {$/;"	f	class:opentrade::AlgoManager
Update	xquant/common.h	/^  void Update(int tm2) {$/;"	f	struct:xquant::Throttle
Update	xquant/common1.h	/^  void Update(int tm2) {$/;"	f	struct:opentrade::Throttle
Update	xquant/market_data.cc	/^void MarketDataAdapter::Update(Security::IdType id, const MarketData::Quote& q,$/;"	f	class:opentrade::MarketDataAdapter
Update	xquant/market_data.cc	/^void MarketDataAdapter::Update(Security::IdType id, double last_price,$/;"	f	class:opentrade::MarketDataAdapter
Update	xquant/market_data.cc	/^void MarketDataAdapter::Update(Security::IdType id, double price, double size,$/;"	f	class:opentrade::MarketDataAdapter
UpdateAskPrice	opentrade/market_data.cc	/^void MarketDataAdapter::UpdateAskPrice(Security::IdType id, double v) {$/;"	f	class:opentrade::MarketDataAdapter
UpdateAskPrice	xquant/market_data.cc	/^void MarketDataAdapter::UpdateAskPrice(Security::IdType id, double v) {$/;"	f	class:opentrade::MarketDataAdapter
UpdateAskSize	opentrade/market_data.cc	/^void MarketDataAdapter::UpdateAskSize(Security::IdType id, double v) {$/;"	f	class:opentrade::MarketDataAdapter
UpdateAskSize	xquant/market_data.cc	/^void MarketDataAdapter::UpdateAskSize(Security::IdType id, double v) {$/;"	f	class:opentrade::MarketDataAdapter
UpdateBidPrice	opentrade/market_data.cc	/^void MarketDataAdapter::UpdateBidPrice(Security::IdType id, double v) {$/;"	f	class:opentrade::MarketDataAdapter
UpdateBidPrice	xquant/market_data.cc	/^void MarketDataAdapter::UpdateBidPrice(Security::IdType id, double v) {$/;"	f	class:opentrade::MarketDataAdapter
UpdateBidSize	opentrade/market_data.cc	/^void MarketDataAdapter::UpdateBidSize(Security::IdType id, double v) {$/;"	f	class:opentrade::MarketDataAdapter
UpdateBidSize	xquant/market_data.cc	/^void MarketDataAdapter::UpdateBidSize(Security::IdType id, double v) {$/;"	f	class:opentrade::MarketDataAdapter
UpdateCheckSum	opentrade/security.cc	/^void SecurityManager::UpdateCheckSum() {$/;"	f	class:opentrade::SecurityManager
UpdateCheckSum	xquant/security.cc	/^void SecurityManager::UpdateCheckSum() {$/;"	f	class:opentrade::SecurityManager
UpdateLastPrice	opentrade/market_data.cc	/^void MarketDataAdapter::UpdateLastPrice(Security::IdType id, double v) {$/;"	f	class:opentrade::MarketDataAdapter
UpdateLastPrice	xquant/market_data.cc	/^void MarketDataAdapter::UpdateLastPrice(Security::IdType id, double v) {$/;"	f	class:opentrade::MarketDataAdapter
UpdateLastSize	opentrade/market_data.cc	/^void MarketDataAdapter::UpdateLastSize(Security::IdType id, double v) {$/;"	f	class:opentrade::MarketDataAdapter
UpdateLastSize	xquant/market_data.cc	/^void MarketDataAdapter::UpdateLastSize(Security::IdType id, double v) {$/;"	f	class:opentrade::MarketDataAdapter
UpdateMidAsLastPrice	opentrade/market_data.cc	/^void MarketDataAdapter::UpdateMidAsLastPrice(Security::IdType id) {$/;"	f	class:opentrade::MarketDataAdapter
UpdateMidAsLastPrice	xquant/market_data.cc	/^void MarketDataAdapter::UpdateMidAsLastPrice(Security::IdType id) {$/;"	f	class:opentrade::MarketDataAdapter
UpdateOrder	opentrade/order.cc	/^inline void GlobalOrderBook::UpdateOrder(Confirmation::Ptr cm) {$/;"	f	class:opentrade::GlobalOrderBook
UpdateOrder	xquant/order.cc	/^inline void GlobalOrderBook::UpdateOrder(Confirmation::Ptr cm) {$/;"	f	class:opentrade::GlobalOrderBook
UpdatePnl	opentrade/position.cc	/^void PositionManager::UpdatePnl() {$/;"	f	class:opentrade::PositionManager
UpdatePnl	xquant/position.cc	/^void PositionManager::UpdatePnl() {$/;"	f	class:opentrade::PositionManager
UpdatePx	opentrade/market_data.cc	/^static inline void UpdatePx(double px, MarketData::Trade* t) {$/;"	f	namespace:opentrade
UpdatePx	xquant/market_data.cc	/^static inline void UpdatePx(double px, MarketData::Trade* t) {$/;"	f	namespace:opentrade
UpdateQuote	md/bpipe/bpipe.cc	/^inline void BPIPE::UpdateQuote(const bbg::Message& msg,$/;"	f	class:BPIPE
UpdateThrottle	opentrade/exchange_connectivity.cc	/^static inline void UpdateThrottle(const Order& ord) {$/;"	f	namespace:opentrade
UpdateThrottle	xquant/exchange_connectivity.cc	/^static inline void UpdateThrottle(const Order& ord) {$/;"	f	namespace:opentrade
UpdateTm	fix/fix.h	/^  void UpdateTm(const FIX::Message& msg) {$/;"	f	class:opentrade::Fix
UpdateVolume	opentrade/market_data.cc	/^static inline void UpdateVolume(double qty, MarketData::Trade* t) {$/;"	f	namespace:opentrade
UpdateVolume	xquant/market_data.cc	/^static inline void UpdateVolume(double qty, MarketData::Trade* t) {$/;"	f	namespace:opentrade
Use	ib/jts/shared_ptr.h	/^   Use() { forward_ = this; back_ = this; }$/;"	f	class:ibapi::shared_ptr_defs::Use
Use	ib/jts/shared_ptr.h	/^   Use(const Use& u) { insert(u); }$/;"	f	class:ibapi::shared_ptr_defs::Use
Use	ib/jts/shared_ptr.h	/^   typedef shared_ptr_defs::Use Use;$/;"	t	class:ibapi::shared_ptr
Use	ib/jts/shared_ptr.h	/^class Use {$/;"	c	namespace:ibapi::shared_ptr_defs
User	opentrade/account.h	/^struct User : public AccountBase {$/;"	s	namespace:opentrade
User	xquant/account.h	/^struct User : public AccountBase {$/;"	s	namespace:opentrade
User	xquant/account1.h	/^struct User : public AccountBase {$/;"	s	namespace:opentrade
UserSubAccountMap	opentrade/account.h	/^struct UserSubAccountMap {$/;"	s	namespace:opentrade
UserSubAccountMap	xquant/account.h	/^struct UserSubAccountMap {$/;"	s	namespace:opentrade
UserSubAccountMap	xquant/account1.h	/^struct UserSubAccountMap {$/;"	s	namespace:opentrade
VERIFY_AND_AUTH_COMPLETED	ib/jts/EDecoder.h	/^const int VERIFY_AND_AUTH_COMPLETED                 = 70;$/;"	v
VERIFY_AND_AUTH_MESSAGE	ib/jts/EClient.h	/^const int VERIFY_AND_AUTH_MESSAGE       = 73;$/;"	m	namespace:ibapi::client_constants
VERIFY_AND_AUTH_MESSAGE_API	ib/jts/EDecoder.h	/^const int VERIFY_AND_AUTH_MESSAGE_API               = 69;$/;"	v
VERIFY_AND_AUTH_REQUEST	ib/jts/EClient.h	/^const int VERIFY_AND_AUTH_REQUEST       = 72;$/;"	m	namespace:ibapi::client_constants
VERIFY_COMPLETED	ib/jts/EDecoder.h	/^const int VERIFY_COMPLETED                          = 66;$/;"	v
VERIFY_MESSAGE	ib/jts/EClient.h	/^const int VERIFY_MESSAGE                = 66;$/;"	m	namespace:ibapi::client_constants
VERIFY_MESSAGE_API	ib/jts/EDecoder.h	/^const int VERIFY_MESSAGE_API                        = 65;$/;"	v
VERIFY_REQUEST	ib/jts/EClient.h	/^const int VERIFY_REQUEST                = 65;$/;"	m	namespace:ibapi::client_constants
VOLUME	ib/jts/EWrapper.h	/^				HIGH, LOW, VOLUME, CLOSE,$/;"	e	enum:TickType
VOLUME_RATE	ib/jts/EWrapper.h	/^				VOLUME_RATE,$/;"	e	enum:TickType
Value	opentrade/algo.h	/^      Value;$/;"	t	struct:opentrade::ParamDef
Value	xquant/algo.h	/^      Value;$/;"	t	struct:opentrade::ParamDef
ValueScalar	opentrade/algo.h	/^      ValueScalar;$/;"	t	struct:opentrade::ParamDef
ValueScalar	xquant/algo.h	/^      ValueScalar;$/;"	t	struct:opentrade::ParamDef
ValueVector	opentrade/algo.h	/^  typedef std::vector<ValueScalar> ValueVector;$/;"	t	struct:opentrade::ParamDef
ValueVector	xquant/algo.h	/^  typedef std::vector<ValueScalar> ValueVector;$/;"	t	struct:opentrade::ParamDef
Volume	ib/jts/OrderCondition.h	/^		Volume = 6,$/;"	e	enum:OrderCondition::OrderConditionType
VolumeCondition	ib/jts/VolumeCondition.h	/^	VolumeCondition() { }$/;"	f	class:VolumeCondition
VolumeCondition	ib/jts/VolumeCondition.h	/^class TWSAPIDLLEXP VolumeCondition : public ContractCondition {$/;"	c
WsConnPtr	opentrade/server.cc	/^typedef std::shared_ptr<WsServer::Connection> WsConnPtr;$/;"	t	namespace:opentrade	file:
WsConnPtr	xquant/server.cc	/^typedef std::shared_ptr<WsServer::Connection> WsConnPtr;$/;"	t	namespace:opentrade	file:
WsSocketWrapper	opentrade/server.cc	/^  explicit WsSocketWrapper(WsConnPtr ws) : ws_(ws) {}$/;"	f	struct:opentrade::WsSocketWrapper
WsSocketWrapper	opentrade/server.cc	/^struct WsSocketWrapper : public Transport {$/;"	s	namespace:opentrade	file:
WsSocketWrapper	xquant/server.cc	/^  explicit WsSocketWrapper(WsConnPtr ws) : ws_(ws) {}$/;"	f	struct:opentrade::WsSocketWrapper
WsSocketWrapper	xquant/server.cc	/^struct WsSocketWrapper : public Transport {$/;"	s	namespace:opentrade	file:
XQUANT_UTILITY_H_	xquant/utility.h	2;"	d
_APS_NEXT_COMMAND_VALUE	ib/jts/Resource.h	15;"	d
_APS_NEXT_COMMAND_VALUE	ib/jts/resource.h	15;"	d
_APS_NEXT_CONTROL_VALUE	ib/jts/Resource.h	16;"	d
_APS_NEXT_CONTROL_VALUE	ib/jts/resource.h	16;"	d
_APS_NEXT_RESOURCE_VALUE	ib/jts/Resource.h	14;"	d
_APS_NEXT_RESOURCE_VALUE	ib/jts/resource.h	14;"	d
_APS_NEXT_SYMED_VALUE	ib/jts/Resource.h	17;"	d
_APS_NEXT_SYMED_VALUE	ib/jts/resource.h	17;"	d
_XQUANT_ACCOUNT_H	xquant/account.h	14;"	d
_XQUANT_COMMON_H	xquant/common.h	13;"	d
abovePrice	ib/jts/ScannerSubscription.h	/^    double abovePrice;$/;"	m	struct:ScannerSubscription
aboveVolume	ib/jts/ScannerSubscription.h	/^    int aboveVolume;$/;"	m	struct:ScannerSubscription
acc_	algo/twap/twap.h	/^  const SubAccount* acc_ = nullptr;$/;"	m	class:opentrade::TWAP
account	ib/jts/Order.h	/^	std::string account; \/\/ IB account$/;"	m	struct:Order
accountDownloadEnd	ib/jts/DefaultEWrapper.cpp	/^void DefaultEWrapper::accountDownloadEnd(const std::string& accountName) { }$/;"	f	class:DefaultEWrapper
accountID	ib/jts/FamilyCode.h	/^	std::string accountID;$/;"	m	struct:FamilyCode
accountSummary	ib/jts/DefaultEWrapper.cpp	/^void DefaultEWrapper::accountSummary( int reqId, const std::string& account, const std::string& tag, const std::string& value, const std::string& curency) { }$/;"	f	class:DefaultEWrapper
accountSummaryEnd	ib/jts/DefaultEWrapper.cpp	/^void DefaultEWrapper::accountSummaryEnd( int reqId) { }$/;"	f	class:DefaultEWrapper
accountUpdateMulti	ib/jts/DefaultEWrapper.cpp	/^void DefaultEWrapper::accountUpdateMulti( int reqId, const std::string& account, const std::string& modelCode, const std::string& key, const std::string& value, const std::string& currency) { }$/;"	f	class:DefaultEWrapper
accountUpdateMultiEnd	ib/jts/DefaultEWrapper.cpp	/^void DefaultEWrapper::accountUpdateMultiEnd( int reqId) { }$/;"	f	class:DefaultEWrapper
acctNumber	ib/jts/Execution.h	/^	std::string	acctNumber;$/;"	m	struct:Execution
action	ib/jts/Contract.h	/^	std::string	action; \/\/BUY\/SELL\/SSHORT$/;"	m	struct:ComboLeg
action	ib/jts/Order.h	/^	std::string action;$/;"	m	struct:Order
activeStartTime	ib/jts/Order.h	/^	std::string activeStartTime;	\/\/ for GTC orders$/;"	m	struct:Order
activeStopTime	ib/jts/Order.h	/^	std::string activeStopTime;	\/\/ for GTC orders$/;"	m	struct:Order
active_orders	opentrade/algo.h	/^  const Orders& active_orders() const { return active_orders_; }$/;"	f	class:opentrade::Instrument
active_orders	xquant/algo.h	/^  const Orders& active_orders() const { return active_orders_; }$/;"	f	class:opentrade::Instrument
active_orders_	opentrade/algo.h	/^  Orders active_orders_;$/;"	m	class:opentrade::Instrument
active_orders_	sim/server/server.cc	/^      active_orders_;$/;"	m	class:SimServer	file:
active_orders_	xquant/algo.h	/^  Orders active_orders_;$/;"	m	class:opentrade::Instrument
adapter	opentrade/account.h	/^  ExchangeConnectivityAdapter* adapter = nullptr;$/;"	m	struct:opentrade::BrokerAccount
adapter	xquant/account.h	/^  ExchangeConnectivityAdapter* adapter = nullptr;$/;"	m	struct:opentrade::BrokerAccount
adapter	xquant/account1.h	/^  ExchangeConnectivityAdapter* adapter = nullptr;$/;"	m	struct:opentrade::BrokerAccount
adapter_name	opentrade/account.h	/^  const char* adapter_name = "";$/;"	m	struct:opentrade::BrokerAccount
adapter_name	xquant/account.h	/^  const char* adapter_name = "";$/;"	m	struct:opentrade::BrokerAccount
adapter_name	xquant/account1.h	/^  const char* adapter_name = "";$/;"	m	struct:opentrade::BrokerAccount
adapters	opentrade/adapter.h	/^  const AdapterMap& adapters() { return adapters_; }$/;"	f	class:opentrade::AdapterManager
adapters	xquant/adapter.h	/^  const AdapterMap& adapters() { return adapters_; }$/;"	f	class:opentrade::AdapterManager
adapters_	opentrade/adapter.h	/^  AdapterMap adapters_;$/;"	m	class:opentrade::AdapterManager
adapters_	xquant/adapter.h	/^  AdapterMap adapters_;$/;"	m	class:opentrade::AdapterManager
adjustableTrailingUnit	ib/jts/Order.h	/^	int adjustableTrailingUnit;$/;"	m	struct:Order
adjustedOrderType	ib/jts/Order.h	/^	std::string adjustedOrderType;$/;"	m	struct:Order
adjustedStopLimitPrice	ib/jts/Order.h	/^	double adjustedStopLimitPrice;$/;"	m	struct:Order
adjustedStopPrice	ib/jts/Order.h	/^	double adjustedStopPrice;$/;"	m	struct:Order
adjustedTrailingAmount	ib/jts/Order.h	/^	double adjustedTrailingAmount;$/;"	m	struct:Order
adv20	opentrade/security.h	/^  double adv20 = 0;$/;"	m	struct:opentrade::Security
adv20	xquant/security.h	/^  double adv20 = 0;$/;"	m	struct:opentrade::Security
aggGroup	ib/jts/Contract.h	/^	int			aggGroup;$/;"	m	struct:ContractDetails
aggGroup	ib/jts/DepthMktDataDescription.h	/^	int aggGroup;$/;"	m	struct:DepthMktDataDescription
agg_	algo/twap/twap.h	/^  Aggression agg_ = kAggLow;$/;"	m	class:opentrade::TWAP
algo	opentrade/algo.h	/^  Algo& algo() { return *algo_; }$/;"	f	class:opentrade::Instrument
algo	xquant/algo.h	/^  Algo& algo() { return *algo_; }$/;"	f	class:opentrade::Instrument
algoId	ib/jts/Order.h	/^	std::string algoId;$/;"	m	struct:Order
algoParams	ib/jts/Order.h	/^	TagValueListSPtr algoParams;$/;"	m	struct:Order
algoStrategy	ib/jts/Order.h	/^	std::string algoStrategy;$/;"	m	struct:Order
algo_	opentrade/algo.h	/^  Algo* algo_ = nullptr;$/;"	m	class:opentrade::Instrument
algo_	xquant/algo.h	/^  Algo* algo_ = nullptr;$/;"	m	class:opentrade::Instrument
algo_id	opentrade/order.h	/^  uint32_t algo_id = 0;$/;"	m	struct:opentrade::Order
algo_id	xquant/order.h	/^  uint32_t algo_id = 0;$/;"	m	struct:opentrade::Order
algo_id_counter_	opentrade/algo.h	/^  std::atomic<Algo::IdType> algo_id_counter_ = 0;$/;"	m	class:opentrade::AlgoManager
algo_id_counter_	xquant/algo.h	/^  std::atomic<Algo::IdType> algo_id_counter_ = 0;$/;"	m	class:opentrade::AlgoManager
algo_methods	opentrade/python.cc	/^namespace algo_methods {$/;"	n	namespace:opentrade	file:
algo_methods	xquant/python.cc	/^namespace algo_methods {$/;"	n	namespace:opentrade	file:
algo_of_token_	opentrade/algo.h	/^  tbb::concurrent_unordered_map<std::string, Algo*> algo_of_token_;$/;"	m	class:opentrade::AlgoManager
algo_of_token_	xquant/algo.h	/^  tbb::concurrent_unordered_map<std::string, Algo*> algo_of_token_;$/;"	m	class:opentrade::AlgoManager
algos_	opentrade/algo.h	/^  tbb::concurrent_unordered_map<Algo::IdType, Algo*> algos_;$/;"	m	class:opentrade::AlgoManager
algos_	xquant/algo.h	/^  tbb::concurrent_unordered_map<Algo::IdType, Algo*> algos_;$/;"	m	class:opentrade::AlgoManager
allOrNone	ib/jts/Order.h	/^	bool     allOrNone;$/;"	m	struct:Order
allowRedirect	ib/jts/EClientSocket.cpp	/^bool EClientSocket::allowRedirect() const {$/;"	f	class:EClientSocket
allowRedirect	ib/jts/EClientSocket.cpp	/^void EClientSocket::allowRedirect(bool v) {$/;"	f	class:EClientSocket
appendTime	fix/filelog.h	/^  void appendTime(const std::string& value, std::string& newvalue) {$/;"	f	class:FIX::AsyncFileLog
askPastHigh	ib/jts/TickAttrib.h	/^	bool askPastHigh;$/;"	m	struct:TickAttrib
ask_price	opentrade/market_data.h	/^    double ask_price = 0;$/;"	m	struct:opentrade::MarketData::Quote
ask_price	opentrade/python.cc	/^static PyObject *ask_price(PyObject *self, PyObject *args) {$/;"	f	namespace:opentrade::md_methods
ask_price	xquant/market_data.h	/^    double ask_price = 0;$/;"	m	struct:opentrade::MarketData::Quote
ask_price	xquant/python.cc	/^static PyObject *ask_price(PyObject *self, PyObject *args) {$/;"	f	namespace:opentrade::md_methods
ask_price_def	opentrade/python.cc	/^static PyMethodDef ask_price_def = {"get_ask_price", ask_price, METH_VARARGS,$/;"	m	namespace:opentrade::md_methods	file:
ask_price_def	xquant/python.cc	/^static PyMethodDef ask_price_def = {"get_ask_price", ask_price, METH_VARARGS,$/;"	m	namespace:opentrade::md_methods	file:
ask_size	opentrade/market_data.h	/^    double ask_size = 0;$/;"	m	struct:opentrade::MarketData::Quote
ask_size	opentrade/python.cc	/^static PyObject *ask_size(PyObject *self, PyObject *args) {$/;"	f	namespace:opentrade::md_methods
ask_size	xquant/market_data.h	/^    double ask_size = 0;$/;"	m	struct:opentrade::MarketData::Quote
ask_size	xquant/python.cc	/^static PyObject *ask_size(PyObject *self, PyObject *args) {$/;"	f	namespace:opentrade::md_methods
ask_size_def	opentrade/python.cc	/^static PyMethodDef ask_size_def = {"get_ask_size", ask_size, METH_VARARGS,$/;"	m	namespace:opentrade::md_methods	file:
ask_size_def	xquant/python.cc	/^static PyMethodDef ask_size_def = {"get_ask_size", ask_size, METH_VARARGS,$/;"	m	namespace:opentrade::md_methods	file:
assert	ib/jts/StdAfx.h	12;"	d
asyncEConnect	ib/jts/EClientSocket.cpp	/^bool EClientSocket::asyncEConnect() const {$/;"	f	class:EClientSocket
asyncEConnect	ib/jts/EClientSocket.cpp	/^void EClientSocket::asyncEConnect(bool val) {$/;"	f	class:EClientSocket
atoll	ib/jts/StdAfx.h	19;"	d
auctionStrategy	ib/jts/Order.h	/^	int      auctionStrategy; \/\/ AUCTION_MATCH, AUCTION_IMPROVEMENT, AUCTION_TRANSPARENT$/;"	m	struct:Order
auth_service_	md/bpipe/bpipe.h	/^  bbg::Service auth_service_;$/;"	m	class:BPIPE
auxPrice	ib/jts/Order.h	/^	double   auxPrice;$/;"	m	struct:Order
average	ib/jts/EDecoder.h	/^   double average;$/;"	m	struct:__anon1::BarData
averageOptionVolumeAbove	ib/jts/ScannerSubscription.h	/^	int averageOptionVolumeAbove;$/;"	m	struct:ScannerSubscription
avgPrice	ib/jts/Execution.h	/^	double		avgPrice;$/;"	m	struct:Execution
avg_price	opentrade/position.h	/^  double avg_price = 0;$/;"	m	struct:opentrade::Bod
avg_price	opentrade/position.h	/^  double avg_price = 0;$/;"	m	struct:opentrade::Position
avg_price	xquant/position.h	/^  double avg_price = 0;$/;"	m	struct:opentrade::Bod
avg_price	xquant/position.h	/^  double avg_price = 0;$/;"	m	struct:opentrade::Position
avg_px	opentrade/order.h	/^  double avg_px = 0;$/;"	m	struct:opentrade::Order
avg_px	opentrade/python.cc	/^static PyObject *avg_px(PyObject *self, PyObject *args) {$/;"	f	namespace:opentrade::order_methods
avg_px	xquant/order.h	/^  double avg_px = 0;$/;"	m	struct:opentrade::Order
avg_px	xquant/python.cc	/^static PyObject *avg_px(PyObject *self, PyObject *args) {$/;"	f	namespace:opentrade::order_methods
avg_px_def	opentrade/python.cc	/^static PyMethodDef avg_px_def = {"get_avg_px", avg_px, METH_VARARGS,$/;"	m	namespace:opentrade::order_methods	file:
avg_px_def	xquant/python.cc	/^static PyMethodDef avg_px_def = {"get_avg_px", avg_px, METH_VARARGS,$/;"	m	namespace:opentrade::order_methods	file:
back_	ib/jts/shared_ptr.h	/^   mutable const Use *back_;$/;"	m	class:ibapi::shared_ptr_defs::Use
barCount	ib/jts/EDecoder.h	/^   int barCount;$/;"	m	struct:__anon1::BarData
bar_def	ib/jts/bar.h	6;"	d
basisPoints	ib/jts/Order.h	/^	double   basisPoints;      \/\/ EFP orders only$/;"	m	struct:Order
basisPointsType	ib/jts/Order.h	/^	int      basisPointsType;  \/\/ EFP orders only$/;"	m	struct:Order
bb_name	opentrade/security.h	/^  const char* bb_name = "";$/;"	m	struct:opentrade::Exchange
bb_name	xquant/security.h	/^  const char* bb_name = "";$/;"	m	struct:opentrade::Exchange
bbgid	opentrade/security.h	/^  const char* bbgid = "";$/;"	m	struct:opentrade::Security
bbgid	xquant/security.h	/^  const char* bbgid = "";$/;"	m	struct:opentrade::Security
begin	ib/jts/EMessage.cpp	/^const char* EMessage::begin(void) const$/;"	f	class:EMessage
begin_time_	algo/twap/twap.h	/^  time_t begin_time_ = 0;$/;"	m	class:opentrade::TWAP
belowPrice	ib/jts/ScannerSubscription.h	/^    double belowPrice;$/;"	m	struct:ScannerSubscription
benchmark	ib/jts/EDecoder.h	/^   std::string benchmark;$/;"	m	struct:__anon1::ScanData
bidPastLow	ib/jts/TickAttrib.h	/^	bool bidPastLow;$/;"	m	struct:TickAttrib
bid_price	opentrade/market_data.h	/^    double bid_price = 0;$/;"	m	struct:opentrade::MarketData::Quote
bid_price	opentrade/python.cc	/^static PyObject *bid_price(PyObject *self, PyObject *args) {$/;"	f	namespace:opentrade::md_methods
bid_price	xquant/market_data.h	/^    double bid_price = 0;$/;"	m	struct:opentrade::MarketData::Quote
bid_price	xquant/python.cc	/^static PyObject *bid_price(PyObject *self, PyObject *args) {$/;"	f	namespace:opentrade::md_methods
bid_price_def	opentrade/python.cc	/^static PyMethodDef bid_price_def = {"get_bid_price", bid_price, METH_VARARGS,$/;"	m	namespace:opentrade::md_methods	file:
bid_price_def	xquant/python.cc	/^static PyMethodDef bid_price_def = {"get_bid_price", bid_price, METH_VARARGS,$/;"	m	namespace:opentrade::md_methods	file:
bid_size	opentrade/market_data.h	/^    double bid_size = 0;$/;"	m	struct:opentrade::MarketData::Quote
bid_size	opentrade/python.cc	/^static PyObject *bid_size(PyObject *self, PyObject *args) {$/;"	f	namespace:opentrade::md_methods
bid_size	xquant/market_data.h	/^    double bid_size = 0;$/;"	m	struct:opentrade::MarketData::Quote
bid_size	xquant/python.cc	/^static PyObject *bid_size(PyObject *self, PyObject *args) {$/;"	f	namespace:opentrade::md_methods
bid_size_def	opentrade/python.cc	/^static PyMethodDef bid_size_def = {"get_bid_size", bid_size, METH_VARARGS,$/;"	m	namespace:opentrade::md_methods	file:
bid_size_def	xquant/python.cc	/^static PyMethodDef bid_size_def = {"get_bid_size", bid_size, METH_VARARGS,$/;"	m	namespace:opentrade::md_methods	file:
blockOrder	ib/jts/Order.h	/^	bool     blockOrder;$/;"	m	struct:Order
bods_	opentrade/position.h	/^      bods_;$/;"	m	class:opentrade::PositionManager
bods_	xquant/position.h	/^      bods_;$/;"	m	class:opentrade::PositionManager
bondContractDetails	ib/jts/DefaultEWrapper.cpp	/^void DefaultEWrapper::bondContractDetails( int reqId, const ContractDetails& contractDetails) { }$/;"	f	class:DefaultEWrapper
bondType	ib/jts/Contract.h	/^	std::string	bondType;$/;"	m	struct:ContractDetails
bought_qty	opentrade/algo.h	/^  double bought_qty() const { return bought_qty_; }$/;"	f	class:opentrade::Instrument
bought_qty	opentrade/python.cc	/^static PyObject *bought_qty(PyObject *self, PyObject *args) {$/;"	f	namespace:opentrade::instrument_methods
bought_qty	xquant/algo.h	/^  double bought_qty() const { return bought_qty_; }$/;"	f	class:opentrade::Instrument
bought_qty	xquant/python.cc	/^static PyObject *bought_qty(PyObject *self, PyObject *args) {$/;"	f	namespace:opentrade::instrument_methods
bought_qty_	opentrade/algo.h	/^  double bought_qty_ = 0;$/;"	m	class:opentrade::Instrument
bought_qty_	xquant/algo.h	/^  double bought_qty_ = 0;$/;"	m	class:opentrade::Instrument
bought_qty_def	opentrade/python.cc	/^static PyMethodDef bought_qty_def = {"get_bought", bought_qty, METH_VARARGS,$/;"	m	namespace:opentrade::instrument_methods	file:
bought_qty_def	xquant/python.cc	/^static PyMethodDef bought_qty_def = {"get_bought", bought_qty, METH_VARARGS,$/;"	m	namespace:opentrade::instrument_methods	file:
break_end	opentrade/security.h	/^  int break_end = 0;$/;"	m	struct:opentrade::Exchange
break_end	xquant/security.h	/^  int break_end = 0;$/;"	m	struct:opentrade::Exchange
break_start	opentrade/security.h	/^  int break_start = 0;$/;"	m	struct:opentrade::Exchange
break_start	xquant/security.h	/^  int break_start = 0;$/;"	m	struct:opentrade::Exchange
broker_account	opentrade/order.h	/^  const BrokerAccount* broker_account = nullptr;$/;"	m	struct:opentrade::Order
broker_account	xquant/order.h	/^  const BrokerAccount* broker_account = nullptr;$/;"	m	struct:opentrade::Order
broker_account_id	opentrade/account.h	/^  BrokerAccount::IdType broker_account_id = 0;$/;"	m	struct:opentrade::SubAccountBrokerAccountMap
broker_account_id	opentrade/position.h	/^  BrokerAccount::IdType broker_account_id = 0;$/;"	m	struct:opentrade::Bod
broker_account_id	xquant/account.h	/^  BrokerAccount::IdType broker_account_id = 0;$/;"	m	struct:opentrade::SubAccountBrokerAccountMap
broker_account_id	xquant/account1.h	/^  BrokerAccount::IdType broker_account_id = 0;$/;"	m	struct:opentrade::SubAccountBrokerAccountMap
broker_account_id	xquant/position.h	/^  BrokerAccount::IdType broker_account_id = 0;$/;"	m	struct:opentrade::Bod
broker_accounts	opentrade/account.h	/^  const BrokerAccountMap* broker_accounts = new BrokerAccountMap();$/;"	m	struct:opentrade::SubAccount
broker_accounts	xquant/account.h	/^  const BrokerAccountMap* broker_accounts = new BrokerAccountMap();$/;"	m	struct:opentrade::SubAccount
broker_accounts	xquant/account1.h	/^  const BrokerAccountMap* broker_accounts = new BrokerAccountMap();$/;"	m	struct:opentrade::SubAccount
broker_accounts_	opentrade/account.h	/^      broker_accounts_;$/;"	m	class:opentrade::AccountManager
broker_accounts_	xquant/account.h	/^      broker_accounts_;$/;"	m	class:opentrade::AccountManager
broker_accounts_	xquant/account1.h	/^      broker_accounts_;$/;"	m	class:opentrade::AccountManager
broker_positions_	opentrade/position.h	/^      broker_positions_;$/;"	m	class:opentrade::PositionManager
broker_positions_	xquant/position.h	/^      broker_positions_;$/;"	m	class:opentrade::PositionManager
buf_	opentrade/database.cc	/^  char buf_[256];$/;"	m	class:opentrade::SqlLog	file:
buf_	xquant/database.cc	/^  char buf_[256];$/;"	m	class:opentrade::SqlLog	file:
bufferedRead	ib/jts/EReader.cpp	/^bool EReader::bufferedRead(char *buf, unsigned int size) {$/;"	f	class:EReader
bufferedSend	ib/jts/EClient.cpp	/^int EClient::bufferedSend(const std::string& msg) {$/;"	f	class:EClient
bufferedSend	ib/jts/ESocket.cpp	/^int ESocket::bufferedSend(const char* buf, size_t sz)$/;"	f	class:ESocket
calculateImpliedVolatility	ib/jts/EClient.cpp	/^void EClient::calculateImpliedVolatility(TickerId reqId, const Contract& contract, double optionPrice, double underPrice,$/;"	f	class:EClient
calculateOptionPrice	ib/jts/EClient.cpp	/^void EClient::calculateOptionPrice(TickerId reqId, const Contract& contract, double volatility, double underPrice, $/;"	f	class:EClient
callEWrapperCallBack	ib/jts/EDecoder.cpp	/^void EDecoder::callEWrapperCallBack(int reqId, const std::vector<HistoricalTick> &ticks, bool done) {$/;"	f	class:EDecoder
callEWrapperCallBack	ib/jts/EDecoder.cpp	/^void EDecoder::callEWrapperCallBack(int reqId, const std::vector<HistoricalTickBidAsk> &ticks, bool done) {$/;"	f	class:EDecoder
callEWrapperCallBack	ib/jts/EDecoder.cpp	/^void EDecoder::callEWrapperCallBack(int reqId, const std::vector<HistoricalTickLast> &ticks, bool done) {$/;"	f	class:EDecoder
callable	ib/jts/Contract.h	/^	bool		callable;$/;"	m	struct:ContractDetails
canAutoExecute	ib/jts/TickAttrib.h	/^	bool canAutoExecute;$/;"	m	struct:TickAttrib
cancel	opentrade/python.cc	/^static PyObject *cancel(PyObject *self, PyObject *args) {$/;"	f	namespace:opentrade::order_methods
cancel	xquant/python.cc	/^static PyObject *cancel(PyObject *self, PyObject *args) {$/;"	f	namespace:opentrade::order_methods
cancelAccountSummary	ib/jts/EClient.cpp	/^void EClient::cancelAccountSummary( int reqId)$/;"	f	class:EClient
cancelAccountUpdatesMulti	ib/jts/EClient.cpp	/^void EClient::cancelAccountUpdatesMulti( int reqId)$/;"	f	class:EClient
cancelCalculateImpliedVolatility	ib/jts/EClient.cpp	/^void EClient::cancelCalculateImpliedVolatility(TickerId reqId) {$/;"	f	class:EClient
cancelCalculateOptionPrice	ib/jts/EClient.cpp	/^void EClient::cancelCalculateOptionPrice(TickerId reqId) {$/;"	f	class:EClient
cancelFundamentalData	ib/jts/EClient.cpp	/^void EClient::cancelFundamentalData( TickerId reqId)$/;"	f	class:EClient
cancelHeadTimestamp	ib/jts/EClient.cpp	/^void EClient::cancelHeadTimestamp(int tickerId) {$/;"	f	class:EClient
cancelHistogramData	ib/jts/EClient.cpp	/^void EClient::cancelHistogramData(int reqId) {$/;"	f	class:EClient
cancelHistoricalData	ib/jts/EClient.cpp	/^void EClient::cancelHistoricalData(TickerId tickerId)$/;"	f	class:EClient
cancelMktData	ib/jts/EClient.cpp	/^void EClient::cancelMktData(TickerId tickerId)$/;"	f	class:EClient
cancelMktDepth	ib/jts/EClient.cpp	/^void EClient::cancelMktDepth( TickerId tickerId)$/;"	f	class:EClient
cancelNewsBulletins	ib/jts/EClient.cpp	/^void EClient::cancelNewsBulletins()$/;"	f	class:EClient
cancelOrder	ib/jts/EClient.cpp	/^void EClient::cancelOrder( OrderId id)$/;"	f	class:EClient
cancelPnL	ib/jts/EClient.cpp	/^void EClient::cancelPnL(int reqId) {$/;"	f	class:EClient
cancelPnLSingle	ib/jts/EClient.cpp	/^void EClient::cancelPnLSingle(int reqId) {$/;"	f	class:EClient
cancelPositions	ib/jts/EClient.cpp	/^void EClient::cancelPositions()$/;"	f	class:EClient
cancelPositionsMulti	ib/jts/EClient.cpp	/^void EClient::cancelPositionsMulti( int reqId)$/;"	f	class:EClient
cancelRealTimeBars	ib/jts/EClient.cpp	/^void EClient::cancelRealTimeBars(TickerId tickerId)$/;"	f	class:EClient
cancelScannerSubscription	ib/jts/EClient.cpp	/^void EClient::cancelScannerSubscription(int tickerId)$/;"	f	class:EClient
cancelTickByTickData	ib/jts/EClient.cpp	/^void EClient::cancelTickByTickData(int reqId) {$/;"	f	class:EClient
cancel_def	opentrade/python.cc	/^static PyMethodDef cancel_def = {"cancel", cancel, METH_VARARGS, "cancel()"};$/;"	m	namespace:opentrade::order_methods	file:
cancel_def	xquant/python.cc	/^static PyMethodDef cancel_def = {"cancel", cancel, METH_VARARGS, "cancel()"};$/;"	m	namespace:opentrade::order_methods	file:
cashQty	ib/jts/Order.h	/^	double cashQty;$/;"	m	struct:Order
category	ib/jts/Contract.h	/^	std::string	category;$/;"	m	struct:ContractDetails
changePercent	ib/jts/PercentChangeCondition.cpp	/^double PercentChangeCondition::changePercent() {$/;"	f	class:PercentChangeCondition
changePercent	ib/jts/PercentChangeCondition.cpp	/^void PercentChangeCondition::changePercent(double changePercent) {$/;"	f	class:PercentChangeCondition
check_sum	opentrade/security.h	/^  const char* check_sum() const { return check_sum_; }$/;"	f	class:opentrade::SecurityManager
check_sum	xquant/security.h	/^  const char* check_sum() const { return check_sum_; }$/;"	f	class:opentrade::SecurityManager
check_sum_	opentrade/security.h	/^  const char* check_sum_ = "";$/;"	m	class:opentrade::SecurityManager
check_sum_	xquant/security.h	/^  const char* check_sum_ = "";$/;"	m	class:opentrade::SecurityManager
clearingAccount	ib/jts/Order.h	/^	std::string clearingAccount; \/\/ True beneficiary of the order$/;"	m	struct:Order
clearingIntent	ib/jts/Order.h	/^	std::string clearingIntent; \/\/ "" (Default), "IB", "Away", "PTA" (PostTrade)$/;"	m	struct:Order
clientId	ib/jts/EClient.h	/^	int clientId() const { return m_clientId; }$/;"	f	class:EClient
clientId	ib/jts/Execution.h	/^	long		clientId;$/;"	m	struct:Execution
clientId	ib/jts/Order.h	/^	long     clientId;$/;"	m	struct:Order
client_	ib/ib.h	/^  EClientSocket* const client_ = nullptr;$/;"	m	class:IB
client_constants	ib/jts/EClient.h	/^namespace client_constants {$/;"	n	namespace:ibapi
client_id_	ib/ib.h	/^  int client_id_ = 1;$/;"	m	class:IB
close	ib/jts/EDecoder.h	/^   double close;$/;"	m	struct:__anon1::BarData
close	ib/jts/bar.h	/^	double close;$/;"	m	struct:Bar
close	opentrade/market_data.h	/^    double close = 0;$/;"	m	struct:opentrade::MarketData::Trade
close	opentrade/python.cc	/^static PyObject *close(PyObject *self, PyObject *args) {$/;"	f	namespace:opentrade::md_methods
close	opentrade/server.cc	/^void close(WsConnPtr connection) {$/;"	f	namespace:opentrade
close	xquant/market_data.h	/^    double close = 0;$/;"	m	struct:opentrade::MarketData::Trade
close	xquant/python.cc	/^static PyObject *close(PyObject *self, PyObject *args) {$/;"	f	namespace:opentrade::md_methods
close	xquant/server.cc	/^void close(WsConnPtr connection) {$/;"	f	namespace:opentrade
closeAndSend	ib/jts/EClientSocket.cpp	/^bool EClientSocket::closeAndSend(std::string msg, unsigned offset)$/;"	f	class:EClientSocket
close_def	opentrade/python.cc	/^static PyMethodDef close_def = {"get_close", close, METH_VARARGS,$/;"	m	namespace:opentrade::md_methods	file:
close_def	xquant/python.cc	/^static PyMethodDef close_def = {"get_close", close, METH_VARARGS,$/;"	m	namespace:opentrade::md_methods	file:
close_price	opentrade/security.h	/^  double close_price = 0;$/;"	m	struct:opentrade::Security
close_price	xquant/security.h	/^  double close_price = 0;$/;"	m	struct:opentrade::Security
closed_	opentrade/connection.h	/^  bool closed_ = false;$/;"	m	class:opentrade::Connection
closed_	xquant/connection.h	/^  bool closed_ = false;$/;"	m	class:opentrade::Connection
code	ib/jts/TwsSocketClientErrors.h	/^	int	  code() const			        { return m_errorCode; }$/;"	f	class:CodeMsgPair
comboLegs	ib/jts/Contract.h	/^	ComboLegListSPtr comboLegs;$/;"	m	struct:Contract
comboLegsDescrip	ib/jts/Contract.h	/^	std::string comboLegsDescrip; \/\/ received in open order 14 and up for all combos$/;"	m	struct:Contract
commission	ib/jts/CommissionReport.h	/^	double		commission;$/;"	m	struct:CommissionReport
commission	ib/jts/OrderState.h	/^	double  commission;$/;"	m	struct:OrderState
commissionCurrency	ib/jts/OrderState.h	/^	std::string commissionCurrency;$/;"	m	struct:OrderState
commissionReport	ib/jts/DefaultEWrapper.cpp	/^void DefaultEWrapper::commissionReport( const CommissionReport& commissionReport) { }$/;"	f	class:DefaultEWrapper
commissionreport_def	ib/jts/CommissionReport.h	6;"	d
common_defs_h_INCLUDED	ib/jts/CommonDefs.h	6;"	d
conId	ib/jts/Contract.h	/^	long		conId;$/;"	m	struct:ComboLeg
conId	ib/jts/Contract.h	/^	long		conId;$/;"	m	struct:Contract
conId	ib/jts/Contract.h	/^	long	conId;$/;"	m	struct:DeltaNeutralContract
conId	ib/jts/ContractCondition.cpp	/^int ContractCondition::conId() {$/;"	f	class:ContractCondition
conId	ib/jts/ContractCondition.cpp	/^void ContractCondition::conId(int conId) {$/;"	f	class:ContractCondition
conditionType	ib/jts/MarginCondition.h	/^	static const OrderConditionType conditionType = OrderConditionType::Margin;$/;"	m	class:MarginCondition
conditionType	ib/jts/PercentChangeCondition.h	/^	static const OrderConditionType conditionType = OrderConditionType::PercentChange;$/;"	m	class:PercentChangeCondition
conditionType	ib/jts/PriceCondition.h	/^	static const OrderConditionType conditionType = OrderConditionType::Price;$/;"	m	class:PriceCondition
conditionType	ib/jts/TimeCondition.h	/^	static const OrderConditionType conditionType = OrderConditionType::Time;$/;"	m	class:TimeCondition
conditionType	ib/jts/VolumeCondition.h	/^	static const OrderConditionType conditionType = OrderConditionType::Volume;$/;"	m	class:VolumeCondition
conditionType	ib/jts/executioncondition.h	/^	static const OrderConditionType conditionType = OrderConditionType::Execution;$/;"	m	class:ExecutionCondition
conditions	ib/jts/Order.h	/^	std::vector<std::shared_ptr<OrderCondition>> conditions;$/;"	m	struct:Order
conditionsCancelOrder	ib/jts/Order.h	/^	bool conditionsCancelOrder;$/;"	m	struct:Order
conditionsIgnoreRth	ib/jts/Order.h	/^	bool conditionsIgnoreRth;$/;"	m	struct:Order
config	opentrade/adapter.h	/^  const StrMap& config() const { return config_; }$/;"	f	class:opentrade::Adapter
config	opentrade/adapter.h	/^  std::string config(const std::string& name) const {$/;"	f	class:opentrade::Adapter
config	xquant/adapter.h	/^  const StrMap& config() const { return config_; }$/;"	f	class:opentrade::Adapter
config	xquant/adapter.h	/^  std::string config(const std::string& name) const {$/;"	f	class:opentrade::Adapter
config_	opentrade/adapter.h	/^  StrMap config_;$/;"	m	class:opentrade::Adapter
config_	xquant/adapter.h	/^  StrMap config_;$/;"	m	class:opentrade::Adapter
config_file	opentrade/logger.h	/^  inline static std::string config_file;$/;"	m	class:opentrade::Logger
config_file	xquant/logger.h	/^  inline static std::string config_file;$/;"	m	class:opentrade::Logger
conjunctionConnection	ib/jts/OrderCondition.cpp	/^bool OrderCondition::conjunctionConnection() const {$/;"	f	class:OrderCondition
conjunctionConnection	ib/jts/OrderCondition.cpp	/^void OrderCondition::conjunctionConnection(bool isConjunctionConnection) {$/;"	f	class:OrderCondition
connState	ib/jts/EClient.cpp	/^EClient::ConnState EClient::connState() const$/;"	f	class:EClient
connectAck	ib/jts/DefaultEWrapper.cpp	/^void DefaultEWrapper::connectAck() { }$/;"	f	class:DefaultEWrapper
connected_	opentrade/adapter.h	/^  std::atomic<int> connected_ = 0;$/;"	m	class:opentrade::NetworkAdapter
connected_	xquant/adapter.h	/^  std::atomic<int> connected_ = 0;$/;"	m	class:opentrade::NetworkAdapter
connectionClosed	ib/ib.cc	/^void IB::connectionClosed() {$/;"	f	class:IB
connectionClosed	ib/jts/DefaultEWrapper.cpp	/^void DefaultEWrapper::connectionClosed() { }$/;"	f	class:DefaultEWrapper
continuousUpdate	ib/jts/Order.h	/^	bool     continuousUpdate;$/;"	m	struct:Order
contract	ib/jts/Contract.h	/^	Contract	contract;$/;"	m	struct:ContractDetails
contract	ib/jts/Contract.h	/^	Contract contract;$/;"	m	struct:ContractDescription
contract	ib/jts/EDecoder.h	/^   ContractDetails contract;$/;"	m	struct:__anon1::ScanData
contractDetails	ib/jts/DefaultEWrapper.cpp	/^void DefaultEWrapper::contractDetails( int reqId, const ContractDetails& contractDetails) { }$/;"	f	class:DefaultEWrapper
contractDetailsEnd	ib/jts/DefaultEWrapper.cpp	/^void DefaultEWrapper::contractDetailsEnd( int reqId) { }$/;"	f	class:DefaultEWrapper
contractMonth	ib/jts/Contract.h	/^	std::string	contractMonth;$/;"	m	struct:ContractDetails
contract_def	ib/jts/Contract.h	6;"	d
convertible	ib/jts/Contract.h	/^	bool		convertible;$/;"	m	struct:ContractDetails
count	ib/jts/bar.h	/^	int count;$/;"	m	struct:Bar
country	opentrade/security.h	/^  const char* country = "";$/;"	m	struct:opentrade::Exchange
country	xquant/security.h	/^  const char* country = "";$/;"	m	struct:opentrade::Exchange
coupon	ib/jts/Contract.h	/^	double		coupon;$/;"	m	struct:ContractDetails
couponRateAbove	ib/jts/ScannerSubscription.h	/^    double couponRateAbove;$/;"	m	struct:ScannerSubscription
couponRateBelow	ib/jts/ScannerSubscription.h	/^    double couponRateBelow;$/;"	m	struct:ScannerSubscription
couponType	ib/jts/Contract.h	/^	std::string	couponType;$/;"	m	struct:ContractDetails
create	algo/twap/twap.cc	/^opentrade::Adapter* create() { return new opentrade::TWAP{}; }$/;"	f
create	fix/filelog.h	/^  Log* create() {$/;"	f	class:FIX::AsyncFileLogFactory
create	fix/filelog.h	/^  Log* create(const SessionID& s) {$/;"	f	class:FIX::AsyncFileLogFactory
create	ib/ib.cc	/^opentrade::Adapter* create() { return new IB{}; }$/;"	f
create	ib/jts/OrderCondition.cpp	/^OrderCondition *OrderCondition::create(OrderConditionType type) {$/;"	f	class:OrderCondition
create	md/bpipe/bpipe.cc	/^opentrade::Adapter* create() { return new BPIPE{}; }$/;"	f
create	sim/client/client.cc	/^opentrade::Adapter* create() { return new SimClient{}; }$/;"	f
create	sim/server/server.cc	/^opentrade::Adapter* create() { return new SimServer{}; }$/;"	f
create_func_	opentrade/adapter.h	/^  Func create_func_;$/;"	m	class:opentrade::Adapter
create_func_	xquant/adapter.h	/^  Func create_func_;$/;"	m	class:opentrade::Adapter
create_tables_sql	opentrade/database.cc	/^static const char create_tables_sql[] = R"($/;"	m	namespace:opentrade	file:
create_tables_sql	xquant/database.cc	/^static const char create_tables_sql[] = R"($/;"	m	namespace:opentrade	file:
cs	ib/jts/EMutex.h	/^    pthread_mutex_t cs;$/;"	m	class:EMutex
cumQty	ib/jts/Execution.h	/^	double			cumQty;$/;"	m	struct:Execution
cum_qty	opentrade/order.h	/^  double cum_qty = 0;$/;"	m	struct:opentrade::Order
cum_qty	opentrade/python.cc	/^static PyObject *cum_qty(PyObject *self, PyObject *args) {$/;"	f	namespace:opentrade::order_methods
cum_qty	xquant/order.h	/^  double cum_qty = 0;$/;"	m	struct:opentrade::Order
cum_qty	xquant/python.cc	/^static PyObject *cum_qty(PyObject *self, PyObject *args) {$/;"	f	namespace:opentrade::order_methods
cum_qty_def	opentrade/python.cc	/^static PyMethodDef cum_qty_def = {"get_cum_qty", cum_qty, METH_VARARGS,$/;"	m	namespace:opentrade::order_methods	file:
cum_qty_def	xquant/python.cc	/^static PyMethodDef cum_qty_def = {"get_cum_qty", cum_qty, METH_VARARGS,$/;"	m	namespace:opentrade::order_methods	file:
currency	ib/jts/CommissionReport.h	/^	std::string	currency;$/;"	m	struct:CommissionReport
currency	ib/jts/Contract.h	/^	std::string	currency;$/;"	m	struct:Contract
currency	opentrade/security.h	/^  const char* currency = "";$/;"	m	struct:opentrade::Security
currency	xquant/security.h	/^  const char* currency = "";$/;"	m	struct:opentrade::Security
currentTime	ib/ib.cc	/^void IB::currentTime(int64_t) { last_heartbeat_tm_ = time(nullptr); }$/;"	f	class:IB
currentTime	ib/jts/DefaultEWrapper.cpp	/^void DefaultEWrapper::currentTime(long time) { }$/;"	f	class:DefaultEWrapper
cusip	ib/jts/Contract.h	/^	std::string	cusip;$/;"	m	struct:ContractDetails
cusip	opentrade/security.h	/^  const char* cusip = "";$/;"	m	struct:opentrade::Security
cusip	xquant/security.h	/^  const char* cusip = "";$/;"	m	struct:opentrade::Security
data	ib/jts/EMessage.h	/^    std::vector<char> data;$/;"	m	class:EMessage
date	ib/jts/EDecoder.h	/^   std::string date;$/;"	m	struct:__anon1::BarData
decodeLastTradeDate	ib/jts/EDecoder.cpp	/^const char* EDecoder::decodeLastTradeDate(const char* ptr, const char* endPtr, ContractDetails& contract, bool isBond) {$/;"	f	class:EDecoder
decodeTick	ib/jts/EDecoder.cpp	/^const char* EDecoder::decodeTick(HistoricalTick& tick, const char* ptr, const char* endPtr) {$/;"	f	class:EDecoder
decodeTick	ib/jts/EDecoder.cpp	/^const char* EDecoder::decodeTick(HistoricalTickBidAsk& tick, const char* ptr, const char* endPtr) {$/;"	f	class:EDecoder
decodeTick	ib/jts/EDecoder.cpp	/^const char* EDecoder::decodeTick(HistoricalTickLast& tick, const char* ptr, const char* endPtr) {$/;"	f	class:EDecoder
def_	opentrade/python.h	/^  ParamDefs def_;$/;"	m	class:opentrade::Python
def_	xquant/python.h	/^  ParamDefs def_;$/;"	m	class:opentrade::Python
defaultWrapper	ib/jts/EReader.cpp	/^static DefaultEWrapper defaultWrapper;$/;"	v	file:
default_	opentrade/market_data.h	/^  MarketDataAdapter* default_;$/;"	m	class:opentrade::MarketDataManager
default_	xquant/market_data.h	/^  MarketDataAdapter* default_;$/;"	m	class:opentrade::MarketDataManager
default_value	opentrade/algo.h	/^  Value default_value;$/;"	m	struct:opentrade::ParamDef
default_value	xquant/algo.h	/^  Value default_value;$/;"	m	struct:opentrade::ParamDef
delta	ib/jts/Contract.h	/^	double	delta;$/;"	m	struct:DeltaNeutralContract
delta	ib/jts/Order.h	/^	double   delta;$/;"	m	struct:Order
deltaNeutralAuxPrice	ib/jts/Order.h	/^	double   deltaNeutralAuxPrice;$/;"	m	struct:Order
deltaNeutralClearingAccount	ib/jts/Order.h	/^	std::string deltaNeutralClearingAccount;$/;"	m	struct:Order
deltaNeutralClearingIntent	ib/jts/Order.h	/^	std::string deltaNeutralClearingIntent;$/;"	m	struct:Order
deltaNeutralConId	ib/jts/Order.h	/^	long     deltaNeutralConId;$/;"	m	struct:Order
deltaNeutralContract	ib/jts/Contract.h	/^	DeltaNeutralContract* deltaNeutralContract;$/;"	m	struct:Contract
deltaNeutralDesignatedLocation	ib/jts/Order.h	/^	std::string deltaNeutralDesignatedLocation;$/;"	m	struct:Order
deltaNeutralOpenClose	ib/jts/Order.h	/^	std::string deltaNeutralOpenClose;$/;"	m	struct:Order
deltaNeutralOrderType	ib/jts/Order.h	/^	std::string deltaNeutralOrderType;$/;"	m	struct:Order
deltaNeutralSettlingFirm	ib/jts/Order.h	/^	std::string deltaNeutralSettlingFirm;$/;"	m	struct:Order
deltaNeutralShortSale	ib/jts/Order.h	/^	bool     deltaNeutralShortSale;$/;"	m	struct:Order
deltaNeutralShortSaleSlot	ib/jts/Order.h	/^	int      deltaNeutralShortSaleSlot;$/;"	m	struct:Order
deltaNeutralValidation	ib/jts/DefaultEWrapper.cpp	/^void DefaultEWrapper::deltaNeutralValidation(int reqId, const DeltaNeutralContract& deltaNeutralContract) { }$/;"	f	class:DefaultEWrapper
depth	opentrade/market_data.h	/^  Depth depth;$/;"	m	struct:opentrade::MarketData
depth	xquant/market_data.h	/^  Depth depth;$/;"	m	struct:opentrade::MarketData
depth_	md/bpipe/bpipe.h	/^  bool depth_ = false;$/;"	m	class:BPIPE
depthmktdatadescription_def	ib/jts/DepthMktDataDescription.h	6;"	d
derivativeSecTypes	ib/jts/Contract.h	/^	DerivativeSecTypesList derivativeSecTypes;$/;"	m	struct:ContractDescription
desc	opentrade/security.h	/^  const char* desc = "";$/;"	m	struct:opentrade::Exchange
desc	xquant/security.h	/^  const char* desc = "";$/;"	m	struct:opentrade::Exchange
descAppend	ib/jts/Contract.h	/^	std::string	descAppend;$/;"	m	struct:ContractDetails
designatedLocation	ib/jts/Contract.h	/^	std::string	designatedLocation;$/;"	m	struct:ComboLeg
designatedLocation	ib/jts/Order.h	/^	std::string designatedLocation; \/\/ set when slot=2 only.$/;"	m	struct:Order
dirties_	opentrade/algo.h	/^  boost::unordered_set<std::pair<DataSrc::IdType, Security::IdType>> dirties_;$/;"	m	class:opentrade::AlgoRunner
dirties_	xquant/algo.h	/^  boost::unordered_set<std::pair<DataSrc::IdType, Security::IdType>> dirties_;$/;"	m	class:opentrade::AlgoRunner
disableUseV100Plus	ib/jts/EClient.cpp	/^void EClient::disableUseV100Plus()$/;"	f	class:EClient
discretionaryAmt	ib/jts/Order.h	/^	double   discretionaryAmt;$/;"	m	struct:Order
displayGroupList	ib/jts/DefaultEWrapper.cpp	/^void DefaultEWrapper::displayGroupList( int reqId, const std::string& groups) { }$/;"	f	class:DefaultEWrapper
displayGroupUpdated	ib/jts/DefaultEWrapper.cpp	/^void DefaultEWrapper::displayGroupUpdated( int reqId, const std::string& contractInfo) { }$/;"	f	class:DefaultEWrapper
displayName	ib/jts/SoftDollarTier.cpp	/^std::string SoftDollarTier::displayName() const$/;"	f	class:SoftDollarTier
displaySize	ib/jts/Order.h	/^	int      displaySize;$/;"	m	struct:Order
distance	ib/jts/EDecoder.h	/^   std::string distance;$/;"	m	struct:__anon1::ScanData
dontUseAutoPriceForHedge	ib/jts/Order.h	/^	bool dontUseAutoPriceForHedge;$/;"	m	struct:Order
eConnect	ib/jts/EClientSocket.cpp	/^bool EClientSocket::eConnect( const char *host, int port, int clientId, bool extraAuth)$/;"	f	class:EClientSocket
eConnectBase	ib/jts/EClient.cpp	/^void EClient::eConnectBase()$/;"	f	class:EClient
eConnectImpl	ib/jts/EClientSocket.cpp	/^bool EClientSocket::eConnectImpl(int clientId, bool extraAuth, ConnState* stateOutPt)$/;"	f	class:EClientSocket
eDisconnect	ib/jts/EClientSocket.cpp	/^void EClientSocket::eDisconnect(bool resetState)$/;"	f	class:EClientSocket
eDisconnectBase	ib/jts/EClient.cpp	/^void EClient::eDisconnectBase()$/;"	f	class:EClient
eTradeOnly	ib/jts/Order.h	/^	bool     eTradeOnly;$/;"	m	struct:Order
eclient_h__INCLUDED	ib/jts/EClient.h	6;"	d
ecs_	opentrade/connection.h	/^  std::map<std::string, bool> ecs_;$/;"	m	class:opentrade::Connection
ecs_	xquant/connection.h	/^  std::map<std::string, bool> ecs_;$/;"	m	class:opentrade::Connection
empty_store_	fix/fix.h	/^  bool empty_store_ = false;$/;"	m	class:opentrade::Fix
encodeMsgLen	ib/jts/EClientSocket.cpp	/^void EClientSocket::encodeMsgLen(std::string& msg, unsigned offset) const$/;"	f	class:EClientSocket
end	ib/jts/EMessage.cpp	/^const char* EMessage::end(void) const$/;"	f	class:EMessage
end_time_	algo/twap/twap.h	/^  time_t end_time_ = 0;$/;"	m	class:opentrade::TWAP
eposixclientsocket_def	ib/jts/EClientSocket.h	6;"	d
eposixclientsocketcommon_def	ib/jts/EPosixClientSocketPlatform.h	6;"	d
equityWithLoanAfter	ib/jts/OrderState.h	/^	std::string equityWithLoanAfter;$/;"	m	struct:OrderState
equityWithLoanBefore	ib/jts/OrderState.h	/^	std::string equityWithLoanBefore;$/;"	m	struct:OrderState
equityWithLoanChange	ib/jts/OrderState.h	/^	std::string equityWithLoanChange;$/;"	m	struct:OrderState
error	ib/ib.cc	/^void IB::error(const int id, const int errorCode,$/;"	f	class:IB
error	ib/jts/DefaultEWrapper.cpp	/^void DefaultEWrapper::error(int id, int errorCode, const std::string& errorString) { }$/;"	f	class:DefaultEWrapper
evMultiplier	ib/jts/Contract.h	/^	double		evMultiplier;$/;"	m	struct:ContractDetails
evMultiplier	ib/jts/Execution.h	/^	double		evMultiplier;$/;"	m	struct:Execution
evRule	ib/jts/Contract.h	/^	std::string	evRule;$/;"	m	struct:ContractDetails
evRule	ib/jts/Execution.h	/^	std::string	evRule;$/;"	m	struct:Execution
ewrapper_def	ib/jts/EWrapper.h	6;"	d
exchange	ib/jts/Contract.h	/^	std::string	exchange;$/;"	m	struct:ComboLeg
exchange	ib/jts/Contract.h	/^	std::string	exchange;$/;"	m	struct:Contract
exchange	ib/jts/ContractCondition.cpp	/^std::string ContractCondition::exchange() {$/;"	f	class:ContractCondition
exchange	ib/jts/ContractCondition.cpp	/^void ContractCondition::exchange(const std::string & exchange) {$/;"	f	class:ContractCondition
exchange	ib/jts/DepthMktDataDescription.h	/^	std::string exchange;$/;"	m	struct:DepthMktDataDescription
exchange	ib/jts/Execution.h	/^	std::string	exchange;$/;"	m	struct:Execution
exchange	ib/jts/HistoricalTickLast.h	/^    std::string exchange;$/;"	m	struct:HistoricalTickLast
exchange	ib/jts/executioncondition.cpp	/^std::string ExecutionCondition::exchange() {$/;"	f	class:ExecutionCondition
exchange	ib/jts/executioncondition.cpp	/^void ExecutionCondition::exchange(const std::string &exchange) {$/;"	f	class:ExecutionCondition
exchange	opentrade/security.h	/^  const Exchange* exchange = nullptr;$/;"	m	struct:opentrade::Security
exchange	xquant/security.h	/^  const Exchange* exchange = nullptr;$/;"	m	struct:opentrade::Security
exchange_id	opentrade/account.h	/^  Exchange::IdType exchange_id = 0;$/;"	m	struct:opentrade::SubAccountBrokerAccountMap
exchange_id	xquant/account.h	/^  Exchange::IdType exchange_id = 0;$/;"	m	struct:opentrade::SubAccountBrokerAccountMap
exchange_id	xquant/account1.h	/^  Exchange::IdType exchange_id = 0;$/;"	m	struct:opentrade::SubAccountBrokerAccountMap
exchange_of_name_	opentrade/security.h	/^  tbb::concurrent_unordered_map<std::string, Exchange*> exchange_of_name_;$/;"	m	class:opentrade::SecurityManager
exchange_of_name_	xquant/security.h	/^  tbb::concurrent_unordered_map<std::string, Exchange*> exchange_of_name_;$/;"	m	class:opentrade::SecurityManager
exchanges_	opentrade/security.h	/^  tbb::concurrent_unordered_map<Exchange::IdType, Exchange*> exchanges_;$/;"	m	class:opentrade::SecurityManager
exchanges_	xquant/security.h	/^  tbb::concurrent_unordered_map<Exchange::IdType, Exchange*> exchanges_;$/;"	m	class:opentrade::SecurityManager
excludeConvertible	ib/jts/ScannerSubscription.h	/^    int excludeConvertible;$/;"	m	struct:ScannerSubscription
execDetails	ib/ib.cc	/^void IB::execDetails(int reqId, const Contract& contract,$/;"	f	class:IB
execDetails	ib/jts/DefaultEWrapper.cpp	/^void DefaultEWrapper::execDetails( int reqId, const Contract& contract, const Execution& execution) { }$/;"	f	class:DefaultEWrapper
execDetailsEnd	ib/jts/DefaultEWrapper.cpp	/^void DefaultEWrapper::execDetailsEnd( int reqId) { }$/;"	f	class:DefaultEWrapper
execId	ib/jts/CommissionReport.h	/^	std::string	execId;$/;"	m	struct:CommissionReport
execId	ib/jts/Execution.h	/^	std::string	execId;$/;"	m	struct:Execution
exec_id	opentrade/order.h	/^  std::string exec_id;$/;"	m	struct:opentrade::Confirmation
exec_id	xquant/order.h	/^  std::string exec_id;$/;"	m	struct:opentrade::Confirmation
exec_ids_	opentrade/order.h	/^      exec_ids_;$/;"	m	class:opentrade::GlobalOrderBook
exec_ids_	xquant/order.h	/^      exec_ids_;$/;"	m	class:opentrade::GlobalOrderBook
exec_trans_type	opentrade/order.h	/^  ExecTransType exec_trans_type = kTransNew;$/;"	m	struct:opentrade::Confirmation
exec_trans_type	xquant/order.h	/^  ExecTransType exec_trans_type = kTransNew;$/;"	m	struct:opentrade::Confirmation
exec_type	opentrade/order.h	/^  OrderStatus exec_type = kUnconfirmedNew;$/;"	m	struct:opentrade::Confirmation
exec_type	xquant/order.h	/^  OrderStatus exec_type = kUnconfirmedNew;$/;"	m	struct:opentrade::Confirmation
execution_def	ib/jts/Execution.h	6;"	d
exemptCode	ib/jts/Contract.h	/^	int			exemptCode;$/;"	m	struct:ComboLeg
exemptCode	ib/jts/Order.h	/^	int      exemptCode;$/;"	m	struct:Order
exerciseOptions	ib/jts/EClient.cpp	/^void EClient::exerciseOptions( TickerId tickerId, const Contract& contract,$/;"	f	class:EClient
extOperator	ib/jts/Order.h	/^	std::string extOperator;$/;"	m	struct:Order
extraAuth	ib/jts/EClient.cpp	/^bool EClient::extraAuth() {$/;"	f	class:EClient
faDataType	ib/jts/CommonDefs.h	/^enum faDataType { GROUPS=1, PROFILES, ALIASES } ;$/;"	g
faDataTypeStr	ib/jts/CommonDefs.h	/^inline const char* faDataTypeStr ( faDataType pFaDataType )$/;"	f
faGroup	ib/jts/Order.h	/^	std::string faGroup;$/;"	m	struct:Order
faMethod	ib/jts/Order.h	/^	std::string faMethod;$/;"	m	struct:Order
faPercentage	ib/jts/Order.h	/^	std::string faPercentage;$/;"	m	struct:Order
faProfile	ib/jts/Order.h	/^	std::string faProfile;$/;"	m	struct:Order
familyCodeStr	ib/jts/FamilyCode.h	/^	std::string familyCodeStr;$/;"	m	struct:FamilyCode
familyCodes	ib/jts/DefaultEWrapper.cpp	/^void DefaultEWrapper::familyCodes(const std::vector<FamilyCode> &familyCodes) { }$/;"	f	class:DefaultEWrapper
familycode_def	ib/jts/FamilyCode.h	6;"	d
fd	ib/jts/EClientSocket.cpp	/^int EClientSocket::fd() const$/;"	f	class:EClientSocket
fd	ib/jts/ESocket.cpp	/^void ESocket::fd(int fd) {$/;"	f	class:ESocket
firmQuoteOnly	ib/jts/Order.h	/^	bool     firmQuoteOnly;$/;"	m	struct:Order
fix_log_factory_	fix/fix.h	/^  std::unique_ptr<FIX::LogFactory> fix_log_factory_;$/;"	m	class:opentrade::Fix
fix_log_factory_	sim/server/server.cc	/^  std::unique_ptr<FIX::LogFactory> fix_log_factory_;$/;"	m	class:SimServer	file:
fix_settings_	fix/fix.h	/^  std::unique_ptr<FIX::SessionSettings> fix_settings_;$/;"	m	class:opentrade::Fix
fix_settings_	sim/server/server.cc	/^  std::unique_ptr<FIX::SessionSettings> fix_settings_;$/;"	m	class:SimServer	file:
fix_store_factory_	fix/fix.h	/^  std::unique_ptr<FIX::MessageStoreFactory> fix_store_factory_;$/;"	m	class:opentrade::Fix
fix_store_factory_	sim/server/server.cc	/^  std::unique_ptr<FIX::MessageStoreFactory> fix_store_factory_;$/;"	m	class:SimServer	file:
forward_	ib/jts/shared_ptr.h	/^   mutable const Use *forward_;$/;"	m	class:ibapi::shared_ptr_defs::Use
fromApp	sim/server/server.cc	/^void SimServer::fromApp(const FIX::Message& msg,$/;"	f	class:SimServer
fundamentalData	ib/jts/DefaultEWrapper.cpp	/^void DefaultEWrapper::fundamentalData(TickerId reqId, const std::string& data) { }$/;"	f	class:DefaultEWrapper
get	ib/jts/shared_ptr.h	/^   X* get()        const { return ptr_; }$/;"	f	class:ibapi::shared_ptr
getMsg	ib/jts/EReader.cpp	/^std::shared_ptr<EMessage> EReader::getMsg(void) {$/;"	f	class:EReader
getTransport	ib/jts/EClientSocket.cpp	/^ESocket *EClientSocket::getTransport() {$/;"	f	class:EClientSocket
getWrapper	ib/jts/EClient.cpp	/^EWrapper * EClient::getWrapper() const$/;"	f	class:EClient
get_active_orders	opentrade/python.cc	/^static PyObject *get_active_orders(PyObject *self, PyObject *args) {$/;"	f	namespace:opentrade::instrument_methods
get_active_orders	xquant/python.cc	/^static PyObject *get_active_orders(PyObject *self, PyObject *args) {$/;"	f	namespace:opentrade::instrument_methods
get_active_orders_def	opentrade/python.cc	/^static PyMethodDef get_active_orders_def = {"get_active_orders",$/;"	m	namespace:opentrade::instrument_methods	file:
get_active_orders_def	xquant/python.cc	/^static PyMethodDef get_active_orders_def = {"get_active_orders",$/;"	m	namespace:opentrade::instrument_methods	file:
get_lot_size	opentrade/python.cc	/^static PyObject *get_lot_size(PyObject *self, PyObject *args) {$/;"	f	namespace:opentrade::security_methods
get_lot_size	xquant/python.cc	/^static PyObject *get_lot_size(PyObject *self, PyObject *args) {$/;"	f	namespace:opentrade::security_methods
get_lot_size_def	opentrade/python.cc	/^static PyMethodDef get_lot_size_def = {"get_lot_size", get_lot_size,$/;"	m	namespace:opentrade::security_methods	file:
get_lot_size_def	xquant/python.cc	/^static PyMethodDef get_lot_size_def = {"get_lot_size", get_lot_size,$/;"	m	namespace:opentrade::security_methods	file:
get_param_defs	algo/test.py	/^def get_param_defs(constants):$/;"	f
get_param_defs	opentrade/python.h	/^  PyObject* get_param_defs = nullptr;$/;"	m	struct:opentrade::PyModule
get_param_defs	xquant/python.h	/^  PyObject* get_param_defs = nullptr;$/;"	m	struct:opentrade::PyModule
get_tick_size	opentrade/python.cc	/^static PyObject *get_tick_size(PyObject *self, PyObject *args) {$/;"	f	namespace:opentrade::security_methods
get_tick_size	xquant/python.cc	/^static PyObject *get_tick_size(PyObject *self, PyObject *args) {$/;"	f	namespace:opentrade::security_methods
get_tick_size_def	opentrade/python.cc	/^static PyMethodDef get_tick_size_def = {"get_tick_size", get_tick_size,$/;"	m	namespace:opentrade::security_methods	file:
get_tick_size_def	xquant/python.cc	/^static PyMethodDef get_tick_size_def = {"get_tick_size", get_tick_size,$/;"	m	namespace:opentrade::security_methods	file:
goodAfterTime	ib/jts/Order.h	/^	std::string goodAfterTime;    \/\/ Format: 20060505 08:00:00 {time zone}$/;"	m	struct:Order
goodTillDate	ib/jts/Order.h	/^	std::string goodTillDate;     \/\/ Format: 20060505 08:00:00 {time zone}$/;"	m	struct:Order
handleSocketError	ib/jts/EClientSocket.cpp	/^bool EClientSocket::handleSocketError()$/;"	f	class:EClientSocket
hasGaps	ib/jts/EDecoder.h	/^   std::string hasGaps;$/;"	m	struct:__anon1::BarData
headTimestamp	ib/jts/DefaultEWrapper.cpp	/^void DefaultEWrapper::headTimestamp(int reqId, const std::string& headTimestamp) { }$/;"	f	class:DefaultEWrapper
heartbeat_interval_	ib/ib.h	/^  int heartbeat_interval_ = 5;$/;"	m	class:IB
hedgeParam	ib/jts/Order.h	/^	std::string hedgeParam; \/\/ 'beta=X' value for beta hedge, 'ratio=Y' for pair hedge$/;"	m	struct:Order
hedgeType	ib/jts/Order.h	/^	std::string hedgeType;  \/\/ 'D' - delta, 'B' - beta, 'F' - FX, 'P' - pair$/;"	m	struct:Order
hidden	ib/jts/Order.h	/^	bool     hidden;$/;"	m	struct:Order
high	ib/jts/EDecoder.h	/^   double high;$/;"	m	struct:__anon1::BarData
high	ib/jts/bar.h	/^	double high;$/;"	m	struct:Bar
high	opentrade/market_data.h	/^    double high = 0;$/;"	m	struct:opentrade::MarketData::Trade
high	opentrade/python.cc	/^static PyObject *high(PyObject *self, PyObject *args) {$/;"	f	namespace:opentrade::md_methods
high	xquant/market_data.h	/^    double high = 0;$/;"	m	struct:opentrade::MarketData::Trade
high	xquant/python.cc	/^static PyObject *high(PyObject *self, PyObject *args) {$/;"	f	namespace:opentrade::md_methods
high_def	opentrade/python.cc	/^static PyMethodDef high_def = {"get_high", high, METH_VARARGS, "get_high()"};$/;"	m	namespace:opentrade::md_methods	file:
high_def	xquant/python.cc	/^static PyMethodDef high_def = {"get_high", high, METH_VARARGS, "get_high()"};$/;"	m	namespace:opentrade::md_methods	file:
histogramData	ib/jts/DefaultEWrapper.cpp	/^void DefaultEWrapper::histogramData(int reqId, const HistogramDataVector& data) { }$/;"	f	class:DefaultEWrapper
histogramentry_def	ib/jts/HistogramEntry.h	6;"	d
historicalData	ib/jts/DefaultEWrapper.cpp	/^void DefaultEWrapper::historicalData(TickerId reqId, const Bar& bar) { }$/;"	f	class:DefaultEWrapper
historicalDataEnd	ib/jts/DefaultEWrapper.cpp	/^void DefaultEWrapper::historicalDataEnd(int reqId, const std::string& startDateStr, const std::string& endDateStr) { }$/;"	f	class:DefaultEWrapper
historicalDataUpdate	ib/jts/DefaultEWrapper.cpp	/^void DefaultEWrapper::historicalDataUpdate(TickerId reqId, const Bar& bar) { }$/;"	f	class:DefaultEWrapper
historicalNews	ib/jts/DefaultEWrapper.cpp	/^void DefaultEWrapper::historicalNews(int requestId, const std::string& time, const std::string& providerCode, const std::string& articleId, const std::string& headline) { }$/;"	f	class:DefaultEWrapper
historicalNewsEnd	ib/jts/DefaultEWrapper.cpp	/^void DefaultEWrapper::historicalNewsEnd(int requestId, bool hasMore) { }$/;"	f	class:DefaultEWrapper
historicalTicks	ib/jts/DefaultEWrapper.cpp	/^void DefaultEWrapper::historicalTicks(int reqId, const std::vector<HistoricalTick>& ticks, bool done) { }$/;"	f	class:DefaultEWrapper
historicalTicksBidAsk	ib/jts/DefaultEWrapper.cpp	/^void DefaultEWrapper::historicalTicksBidAsk(int reqId, const std::vector<HistoricalTickBidAsk>& ticks, bool done) { }$/;"	f	class:DefaultEWrapper
historicalTicksLast	ib/jts/DefaultEWrapper.cpp	/^void DefaultEWrapper::historicalTicksLast(int reqId, const std::vector<HistoricalTickLast>& ticks, bool done) { }$/;"	f	class:DefaultEWrapper
historicaltickbidaskendtry_def	ib/jts/HistoricalTickBidAsk.h	6;"	d
historicaltickendtry_def	ib/jts/HistoricalTick.h	6;"	d
historicalticklastendtry_def	ib/jts/HistoricalTickLast.h	6;"	d
host	ib/jts/EClient.h	/^	const std::string& host() const { return m_host; }$/;"	f	class:EClient
host_	ib/ib.h	/^  std::string host_;$/;"	m	class:IB
ib_name	opentrade/security.h	/^  const char* ib_name = "";$/;"	m	struct:opentrade::Exchange
ib_name	xquant/security.h	/^  const char* ib_name = "";$/;"	m	struct:opentrade::Exchange
ibapi	ib/jts/EClient.h	/^namespace ibapi {$/;"	n
ibapi	ib/jts/shared_ptr.h	/^namespace ibapi {$/;"	n
id	opentrade/account.h	/^  IdType id = 0;$/;"	m	struct:opentrade::BrokerAccount
id	opentrade/account.h	/^  IdType id = 0;$/;"	m	struct:opentrade::SubAccount
id	opentrade/account.h	/^  IdType id = 0;$/;"	m	struct:opentrade::User
id	opentrade/algo.h	/^  IdType id() const { return id_; }$/;"	f	class:opentrade::Algo
id	opentrade/order.h	/^  IdType id = 0;$/;"	m	struct:opentrade::Order
id	opentrade/security.h	/^  IdType id = 0;$/;"	m	struct:opentrade::Exchange
id	opentrade/security.h	/^  IdType id = 0;$/;"	m	struct:opentrade::Security
id	xquant/account.h	/^  IdType id = 0;$/;"	m	struct:opentrade::BrokerAccount
id	xquant/account.h	/^  IdType id = 0;$/;"	m	struct:opentrade::SubAccount
id	xquant/account.h	/^  IdType id = 0;$/;"	m	struct:opentrade::User
id	xquant/account1.h	/^  IdType id = 0;$/;"	m	struct:opentrade::BrokerAccount
id	xquant/account1.h	/^  IdType id = 0;$/;"	m	struct:opentrade::SubAccount
id	xquant/account1.h	/^  IdType id = 0;$/;"	m	struct:opentrade::User
id	xquant/algo.h	/^  IdType id() const { return id_; }$/;"	f	class:opentrade::Algo
id	xquant/order.h	/^  IdType id = 0;$/;"	m	struct:opentrade::Order
id	xquant/security.h	/^  IdType id = 0;$/;"	m	struct:opentrade::Exchange
id	xquant/security.h	/^  IdType id = 0;$/;"	m	struct:opentrade::Security
id_	opentrade/algo.h	/^  IdType id_ = 0;$/;"	m	class:opentrade::Algo
id_	xquant/algo.h	/^  IdType id_ = 0;$/;"	m	class:opentrade::Algo
identity_	md/bpipe/bpipe.h	/^  bbg::Identity identity_;$/;"	m	class:BPIPE
includeExpired	ib/jts/Contract.h	/^	bool		includeExpired;$/;"	m	struct:Contract
increment	ib/jts/PriceIncrement.h	/^	double increment;$/;"	m	struct:PriceIncrement
industry	ib/jts/Contract.h	/^	std::string	industry;$/;"	m	struct:ContractDetails
industry	opentrade/security.h	/^  int industry = 0;$/;"	m	struct:opentrade::Security
industry	xquant/security.h	/^  int industry = 0;$/;"	m	struct:opentrade::Security
industry_group	opentrade/security.h	/^  int industry_group = 0;$/;"	m	struct:opentrade::Security
industry_group	xquant/security.h	/^  int industry_group = 0;$/;"	m	struct:opentrade::Security
initMarginAfter	ib/jts/OrderState.h	/^	std::string initMarginAfter;$/;"	m	struct:OrderState
initMarginBefore	ib/jts/OrderState.h	/^	std::string initMarginBefore;$/;"	m	struct:OrderState
initMarginChange	ib/jts/OrderState.h	/^	std::string initMarginChange;$/;"	m	struct:OrderState
initial_volume_	algo/twap/twap.h	/^  double initial_volume_ = 0;$/;"	m	class:opentrade::TWAP
insert	ib/jts/shared_ptr.h	/^   void insert(const Use& u) const {$/;"	f	class:ibapi::shared_ptr_defs::Use
inst	opentrade/order.h	/^  const Instrument* inst = nullptr;$/;"	m	struct:opentrade::Order
inst	xquant/order.h	/^  const Instrument* inst = nullptr;$/;"	m	struct:opentrade::Order
inst_	algo/twap/twap.h	/^  Instrument* inst_ = nullptr;$/;"	m	class:opentrade::TWAP
instrument	ib/jts/ScannerSubscription.h	/^    std::string instrument;$/;"	m	struct:ScannerSubscription
instrument_methods	opentrade/python.cc	/^namespace instrument_methods {$/;"	n	namespace:opentrade	file:
instrument_methods	xquant/python.cc	/^namespace instrument_methods {$/;"	n	namespace:opentrade	file:
instruments_	opentrade/algo.h	/^      instruments_;$/;"	m	class:opentrade::AlgoRunner
instruments_	opentrade/algo.h	/^  std::set<Instrument*> instruments_;$/;"	m	class:opentrade::Algo
instruments_	xquant/algo.h	/^      instruments_;$/;"	m	class:opentrade::AlgoRunner
instruments_	xquant/algo.h	/^  std::set<Instrument*> instruments_;$/;"	m	class:opentrade::Algo
io_service_	opentrade/algo.h	/^  boost::asio::io_service io_service_;$/;"	m	class:opentrade::AlgoManager
io_service_	xquant/algo.h	/^  boost::asio::io_service io_service_;$/;"	m	class:opentrade::AlgoManager
io_tp_	ib/ib.h	/^  opentrade::TaskPool io_tp_;$/;"	m	class:IB
isConnected	ib/jts/EClient.cpp	/^bool EClient::isConnected() const$/;"	f	class:EClient
isConnecting	ib/jts/EClient.cpp	/^bool EClient::isConnecting() const$/;"	f	class:EClient
isMore	ib/jts/OperatorCondition.cpp	/^bool OperatorCondition::isMore() {$/;"	f	class:OperatorCondition
isMore	ib/jts/OperatorCondition.cpp	/^void OperatorCondition::isMore(bool isMore) {$/;"	f	class:OperatorCondition
isOutBufferEmpty	ib/jts/ESocket.cpp	/^bool ESocket::isOutBufferEmpty() const$/;"	f	class:ESocket
isPeggedChangeAmountDecrease	ib/jts/Order.h	/^	bool isPeggedChangeAmountDecrease;$/;"	m	struct:Order
isPrice	ib/jts/EWrapper.h	/^inline bool isPrice( TickType tickType) {$/;"	f
isSocketOK	ib/jts/EClientSocket.cpp	/^bool EClientSocket::isSocketOK() const$/;"	f	class:EClientSocket
is_active	opentrade/algo.h	/^  bool is_active() const { return is_active_; }$/;"	f	class:opentrade::Algo
is_active	opentrade/python.cc	/^static PyObject *is_active(PyObject *self, PyObject *args) {$/;"	f	namespace:opentrade::algo_methods
is_active	xquant/algo.h	/^  bool is_active() const { return is_active_; }$/;"	f	class:opentrade::Algo
is_active	xquant/python.cc	/^static PyObject *is_active(PyObject *self, PyObject *args) {$/;"	f	namespace:opentrade::algo_methods
is_active_	opentrade/algo.h	/^  bool is_active_ = true;$/;"	m	class:opentrade::Algo
is_active_	xquant/algo.h	/^  bool is_active_ = true;$/;"	m	class:opentrade::Algo
is_active_def	opentrade/python.cc	/^static PyMethodDef is_active_def = {"is_active", is_active, METH_VARARGS,$/;"	m	namespace:opentrade::algo_methods	file:
is_active_def	xquant/python.cc	/^static PyMethodDef is_active_def = {"is_active", is_active, METH_VARARGS,$/;"	m	namespace:opentrade::algo_methods	file:
is_admin	opentrade/account.h	/^  bool is_admin = false;$/;"	m	struct:opentrade::User
is_admin	xquant/account.h	/^  bool is_admin = false;$/;"	m	struct:opentrade::User
is_admin	xquant/account1.h	/^  bool is_admin = false;$/;"	m	struct:opentrade::User
is_buy	algo/test.py	/^def is_buy(self):$/;"	f
is_buy	sim/server/server.cc	/^    bool is_buy = false;$/;"	m	struct:SimServer::OrderTuple	file:
is_disabled	opentrade/account.h	/^  bool is_disabled = false;$/;"	m	struct:opentrade::User
is_disabled	xquant/account.h	/^  bool is_disabled = false;$/;"	m	struct:opentrade::User
is_disabled	xquant/account1.h	/^  bool is_disabled = false;$/;"	m	struct:opentrade::User
is_in_trade_period	opentrade/python.cc	/^static PyObject *is_in_trade_period(PyObject *self, PyObject *args) {$/;"	f	namespace:opentrade::security_methods
is_in_trade_period	xquant/python.cc	/^static PyObject *is_in_trade_period(PyObject *self, PyObject *args) {$/;"	f	namespace:opentrade::security_methods
is_in_trade_period_def	opentrade/python.cc	/^static PyMethodDef is_in_trade_period_def = {"is_in_trade_period",$/;"	m	namespace:opentrade::security_methods	file:
is_in_trade_period_def	xquant/python.cc	/^static PyMethodDef is_in_trade_period_def = {"is_in_trade_period",$/;"	m	namespace:opentrade::security_methods	file:
is_live	opentrade/python.cc	/^static PyObject *is_live(PyObject *self, PyObject *args) {$/;"	f	namespace:opentrade::order_methods
is_live	xquant/python.cc	/^static PyObject *is_live(PyObject *self, PyObject *args) {$/;"	f	namespace:opentrade::order_methods
is_live_def	opentrade/python.cc	/^static PyMethodDef is_live_def = {"is_live", is_live, METH_VARARGS,$/;"	m	namespace:opentrade::order_methods	file:
is_live_def	xquant/python.cc	/^static PyMethodDef is_live_def = {"is_live", is_live, METH_VARARGS,$/;"	m	namespace:opentrade::order_methods	file:
isin	opentrade/security.h	/^  const char* isin = "";$/;"	m	struct:opentrade::Security
isin	xquant/security.h	/^  const char* isin = "";$/;"	m	struct:opentrade::Security
issueDate	ib/jts/Contract.h	/^	std::string	issueDate;$/;"	m	struct:ContractDetails
issueSignal	ib/jts/EReaderOSSignal.cpp	/^void EReaderOSSignal::issueSignal() {$/;"	f	class:EReaderOSSignal
issueSignal	ib/jts/EReaderWMSignal.cpp	/^void EReaderWMSignal::issueSignal() {$/;"	f	class:EReaderWMSignal
kAggHigh	algo/twap/twap.h	/^  kAggHigh,$/;"	e	enum:opentrade::Aggression
kAggHighest	algo/twap/twap.h	/^  kAggHighest,$/;"	e	enum:opentrade::Aggression
kAggLow	algo/twap/twap.h	/^  kAggLow,$/;"	e	enum:opentrade::Aggression
kAggMedium	algo/twap/twap.h	/^  kAggMedium,$/;"	e	enum:opentrade::Aggression
kApiVersion	opentrade/adapter.h	/^static const int kApiVersion = 1;$/;"	m	namespace:opentrade
kApiVersion	xquant/adapter.h	/^static const int kApiVersion = 1;$/;"	m	namespace:opentrade
kBestAskSzs	md/bpipe/bpipe.cc	/^static const bbg::Name kBestAskSzs[] = {$/;"	v	file:
kBestAsks	md/bpipe/bpipe.cc	/^static const bbg::Name kBestAsks[] = {$/;"	v	file:
kBestBidSzs	md/bpipe/bpipe.cc	/^static const bbg::Name kBestBidSzs[] = {$/;"	v	file:
kBestBids	md/bpipe/bpipe.cc	/^static const bbg::Name kBestBids[] = {$/;"	v	file:
kBond	opentrade/security.h	/^inline static const std::string kBond = "BOND";$/;"	m	namespace:opentrade
kBond	xquant/security.h	/^inline static const std::string kBond = "BOND";$/;"	m	namespace:opentrade
kCombo	opentrade/security.h	/^inline static const std::string kCombo = "BAG";$/;"	m	namespace:opentrade
kCombo	xquant/security.h	/^inline static const std::string kCombo = "BAG";$/;"	m	namespace:opentrade
kCommodity	opentrade/security.h	/^inline static const std::string kCommodity = "CMDTY";$/;"	m	namespace:opentrade
kCommodity	xquant/security.h	/^inline static const std::string kCommodity = "CMDTY";$/;"	m	namespace:opentrade
kConstants	opentrade/python.cc	/^static PyObject *kConstants;$/;"	m	namespace:opentrade	file:
kConstants	xquant/python.cc	/^static PyObject *kConstants;$/;"	m	namespace:opentrade	file:
kCreateObjectPyFunc	opentrade/python.cc	/^static PyObject *kCreateObjectPyFunc;$/;"	m	namespace:opentrade	file:
kCreateObjectPyFunc	xquant/python.cc	/^static PyObject *kCreateObjectPyFunc;$/;"	m	namespace:opentrade	file:
kDatabaseTaskPool	opentrade/position.cc	/^static TaskPool kDatabaseTaskPool;$/;"	m	namespace:opentrade	file:
kDatabaseTaskPool	xquant/position.cc	/^static TaskPool kDatabaseTaskPool;$/;"	m	namespace:opentrade	file:
kDefaultLogConf	opentrade/logger.h	/^inline const char* kDefaultLogConf = R"($/;"	m	namespace:opentrade
kDefaultLogConf	xquant/logger.h	/^inline const char* kDefaultLogConf = R"($/;"	m	namespace:opentrade
kDepthSize	opentrade/market_data.h	/^  static inline const size_t kDepthSize = 5;$/;"	m	struct:opentrade::MarketData
kDepthSize	xquant/market_data.h	/^  static inline const size_t kDepthSize = 5;$/;"	m	struct:opentrade::MarketData
kEmptyStr	opentrade/common.h	/^static inline const std::string kEmptyStr;$/;"	m	namespace:opentrade
kEmptyStr	xquant/common.h	/^static inline const std::string kEmptyStr;$/;"	m	namespace:xquant
kEmptyStr	xquant/common1.h	/^static inline const std::string kEmptyStr;$/;"	m	namespace:opentrade
kError	opentrade/algo.cc	/^static thread_local std::string kError;$/;"	m	namespace:opentrade	file:
kError	xquant/algo.cc	/^static thread_local std::string kError;$/;"	m	namespace:opentrade	file:
kForexPair	opentrade/security.h	/^inline static const std::string kForexPair = "CASH";$/;"	m	namespace:opentrade
kForexPair	xquant/security.h	/^inline static const std::string kForexPair = "CASH";$/;"	m	namespace:opentrade
kFuture	opentrade/security.h	/^inline static const std::string kFuture = "FUT";$/;"	m	namespace:opentrade
kFuture	xquant/security.h	/^inline static const std::string kFuture = "FUT";$/;"	m	namespace:opentrade
kFutureOption	opentrade/security.h	/^inline static const std::string kFutureOption = "FOP";$/;"	m	namespace:opentrade
kFutureOption	xquant/security.h	/^inline static const std::string kFutureOption = "FOP";$/;"	m	namespace:opentrade
kHttpServer	opentrade/server.cc	/^static HttpServer kHttpServer;$/;"	m	namespace:opentrade	file:
kHttpServer	xquant/server.cc	/^static HttpServer kHttpServer;$/;"	m	namespace:opentrade	file:
kIndex	opentrade/security.h	/^inline static const std::string kIndex = "IND";$/;"	m	namespace:opentrade
kIndex	xquant/security.h	/^inline static const std::string kIndex = "IND";$/;"	m	namespace:opentrade
kIoService	opentrade/server.cc	/^static auto kIoService = std::make_shared<boost::asio::io_service>();$/;"	m	namespace:opentrade	file:
kIoService	xquant/server.cc	/^static auto kIoService = std::make_shared<boost::asio::io_service>();$/;"	m	namespace:opentrade	file:
kMutex	opentrade/server.cc	/^static std::mutex kMutex;$/;"	m	namespace:opentrade	file:
kMutex	xquant/server.cc	/^static std::mutex kMutex;$/;"	m	namespace:opentrade	file:
kOption	opentrade/security.h	/^inline static const std::string kOption = "OPT";$/;"	m	namespace:opentrade
kOption	xquant/security.h	/^inline static const std::string kOption = "OPT";$/;"	m	namespace:opentrade
kPath	opentrade/algo.cc	/^static auto kPath = fs::path(".") \/ "store" \/ "algos";$/;"	m	namespace:opentrade	file:
kPath	opentrade/order.cc	/^static auto kPath = fs::path(".") \/ "store" \/ "confirmations";$/;"	m	namespace:opentrade	file:
kPath	xquant/algo.cc	/^static auto kPath = fs::path(".") \/ "store" \/ "algos";$/;"	m	namespace:opentrade	file:
kPath	xquant/order.cc	/^static auto kPath = fs::path(".") \/ "store" \/ "confirmations";$/;"	m	namespace:opentrade	file:
kRawPy	opentrade/python.cc	/^static const char *kRawPy = R"(# do not modify me$/;"	m	namespace:opentrade	file:
kRawPy	xquant/python.cc	/^static const char *kRawPy = R"(# do not modify me$/;"	m	namespace:opentrade	file:
kRiskError	opentrade/risk.h	/^inline thread_local std::string kRiskError;$/;"	m	namespace:opentrade
kRiskError	xquant/risk.h	/^inline thread_local std::string kRiskError;$/;"	m	namespace:opentrade
kSecondsOneDay	opentrade/utility.h	/^static const int kSecondsOneDay = 3600 * 24;$/;"	m	namespace:opentrade
kSecondsOneDay	xquant/utility.h	/^static const int kSecondsOneDay = 3600 * 24;$/;"	m	namespace:xquant
kSecurityTuple	opentrade/python.cc	/^static PyObject *kSecurityTuple;$/;"	m	namespace:opentrade	file:
kSecurityTuple	xquant/python.cc	/^static PyObject *kSecurityTuple;$/;"	m	namespace:opentrade	file:
kSharedTaskPool	opentrade/common.h	/^inline TaskPool kSharedTaskPool;$/;"	m	namespace:opentrade
kSharedTaskPool	xquant/common.h	/^inline TaskPool kSharedTaskPool;$/;"	m	namespace:xquant
kSharedTaskPool	xquant/common1.h	/^inline TaskPool kSharedTaskPool;$/;"	m	namespace:opentrade
kSocketMap	opentrade/server.cc	/^static std::unordered_map<WsConnPtr, Connection::Ptr> kSocketMap;$/;"	m	namespace:opentrade	file:
kSocketMap	xquant/server.cc	/^static std::unordered_map<WsConnPtr, Connection::Ptr> kSocketMap;$/;"	m	namespace:opentrade	file:
kStartTime	opentrade/connection.cc	/^static time_t kStartTime = time(nullptr);$/;"	m	namespace:opentrade	file:
kStartTime	xquant/connection.cc	/^static time_t kStartTime = time(nullptr);$/;"	m	namespace:opentrade	file:
kStock	opentrade/security.h	/^inline static const std::string kStock = "STK";$/;"	m	namespace:opentrade
kStock	xquant/security.h	/^inline static const std::string kStock = "STK";$/;"	m	namespace:opentrade
kUuidGen	sim/server/server.cc	/^static thread_local boost::uuids::random_generator kUuidGen;$/;"	v	file:
kWarrant	opentrade/security.h	/^inline static const std::string kWarrant = "WAR";$/;"	m	namespace:opentrade
kWarrant	xquant/security.h	/^inline static const std::string kWarrant = "WAR";$/;"	m	namespace:opentrade
kWriteTaskPool	opentrade/common.h	/^inline TaskPool kWriteTaskPool;$/;"	m	namespace:opentrade
kWriteTaskPool	xquant/common.h	/^inline TaskPool kWriteTaskPool;$/;"	m	namespace:xquant
kWriteTaskPool	xquant/common1.h	/^inline TaskPool kWriteTaskPool;$/;"	m	namespace:opentrade
kWsServer	opentrade/server.cc	/^static WsServer kWsServer;$/;"	m	namespace:opentrade	file:
kWsServer	xquant/server.cc	/^static WsServer kWsServer;$/;"	m	namespace:opentrade	file:
lastLiquidity	ib/jts/Execution.h	/^    int         lastLiquidity;$/;"	m	struct:Execution
lastTradeDateOrContractMonth	ib/jts/Contract.h	/^	std::string	lastTradeDateOrContractMonth;$/;"	m	struct:Contract
lastTradeTime	ib/jts/Contract.h	/^	std::string lastTradeTime;$/;"	m	struct:ContractDetails
last_heartbeat_tm_	ib/ib.h	/^  time_t last_heartbeat_tm_ = 0;$/;"	m	class:IB
last_px	opentrade/order.h	/^  double last_px = 0;$/;"	m	struct:opentrade::Confirmation
last_px	xquant/order.h	/^  double last_px = 0;$/;"	m	struct:opentrade::Confirmation
last_shares	opentrade/order.h	/^    double last_shares = 0;$/;"	m	union:opentrade::Confirmation::__anon2
last_shares	xquant/order.h	/^    double last_shares = 0;$/;"	m	union:opentrade::Confirmation::__anon3
leaves	sim/server/server.cc	/^    double leaves = 0;$/;"	m	struct:SimServer::OrderTuple	file:
leaves_qty	opentrade/order.h	/^    double leaves_qty;$/;"	m	union:opentrade::Confirmation::__anon2
leaves_qty	opentrade/order.h	/^  double leaves_qty = 0;$/;"	m	struct:opentrade::Order
leaves_qty	xquant/order.h	/^    double leaves_qty;$/;"	m	union:opentrade::Confirmation::__anon3
leaves_qty	xquant/order.h	/^  double leaves_qty = 0;$/;"	m	struct:opentrade::Order
legsStr	ib/jts/EDecoder.h	/^   std::string legsStr;$/;"	m	struct:__anon1::ScanData
limits	opentrade/account.h	/^  Limits limits;$/;"	m	struct:opentrade::AccountBase
limits	xquant/account.h	/^  Limits limits;$/;"	m	struct:opentrade::AccountBase
limits	xquant/account1.h	/^  Limits limits;$/;"	m	struct:opentrade::AccountBase
liquidHours	ib/jts/Contract.h	/^	std::string	liquidHours;$/;"	m	struct:ContractDetails
liquidation	ib/jts/Execution.h	/^	int			liquidation;$/;"	m	struct:Execution
listingExch	ib/jts/DepthMktDataDescription.h	/^	std::string listingExch;$/;"	m	struct:DepthMktDataDescription
lmtPrice	ib/jts/Order.h	/^	double   lmtPrice;$/;"	m	struct:Order
lmtPriceOffset	ib/jts/Order.h	/^	double lmtPriceOffset;$/;"	m	struct:Order
localSymbol	ib/jts/Contract.h	/^	std::string	localSymbol;$/;"	m	struct:Contract
local_symbol	opentrade/security.h	/^  const char* local_symbol = "";$/;"	m	struct:opentrade::Security
local_symbol	xquant/security.h	/^  const char* local_symbol = "";$/;"	m	struct:opentrade::Security
locationCode	ib/jts/ScannerSubscription.h	/^    std::string locationCode;$/;"	m	struct:ScannerSubscription
log_debug	opentrade/python.cc	/^static PyObject *log_debug(PyObject *self, PyObject *args) {$/;"	f	namespace:opentrade::algo_methods
log_debug	xquant/python.cc	/^static PyObject *log_debug(PyObject *self, PyObject *args) {$/;"	f	namespace:opentrade::algo_methods
log_debug_def	opentrade/python.cc	/^static PyMethodDef log_debug_def = {"log_debug", log_debug, METH_VARARGS,$/;"	m	namespace:opentrade::algo_methods	file:
log_debug_def	xquant/python.cc	/^static PyMethodDef log_debug_def = {"log_debug", log_debug, METH_VARARGS,$/;"	m	namespace:opentrade::algo_methods	file:
log_error	opentrade/python.cc	/^static PyObject *log_error(PyObject *self, PyObject *args) {$/;"	f	namespace:opentrade::algo_methods
log_error	xquant/python.cc	/^static PyObject *log_error(PyObject *self, PyObject *args) {$/;"	f	namespace:opentrade::algo_methods
log_error_def	opentrade/python.cc	/^static PyMethodDef log_error_def = {"log_error", log_error, METH_VARARGS,$/;"	m	namespace:opentrade::algo_methods	file:
log_error_def	xquant/python.cc	/^static PyMethodDef log_error_def = {"log_error", log_error, METH_VARARGS,$/;"	m	namespace:opentrade::algo_methods	file:
log_info	opentrade/python.cc	/^static PyObject *log_info(PyObject *self, PyObject *args) {$/;"	f	namespace:opentrade::algo_methods
log_info	xquant/python.cc	/^static PyObject *log_info(PyObject *self, PyObject *args) {$/;"	f	namespace:opentrade::algo_methods
log_info_def	opentrade/python.cc	/^static PyMethodDef log_info_def = {"log_info", log_info, METH_VARARGS,$/;"	m	namespace:opentrade::algo_methods	file:
log_info_def	xquant/python.cc	/^static PyMethodDef log_info_def = {"log_info", log_info, METH_VARARGS,$/;"	m	namespace:opentrade::algo_methods	file:
log_warn	opentrade/python.cc	/^static PyObject *log_warn(PyObject *self, PyObject *args) {$/;"	f	namespace:opentrade::algo_methods
log_warn	xquant/python.cc	/^static PyObject *log_warn(PyObject *self, PyObject *args) {$/;"	f	namespace:opentrade::algo_methods
log_warn_def	opentrade/python.cc	/^static PyMethodDef log_warn_def = {"log_warn", log_warn, METH_VARARGS,$/;"	m	namespace:opentrade::algo_methods	file:
log_warn_def	xquant/python.cc	/^static PyMethodDef log_warn_def = {"log_warn", log_warn, METH_VARARGS,$/;"	m	namespace:opentrade::algo_methods	file:
logger	opentrade/logger.h	/^  inline static auto logger = log4cxx::Logger::getRootLogger();$/;"	m	class:opentrade::Logger
logger	xquant/logger.h	/^  inline static auto logger = log4cxx::Logger::getRootLogger();$/;"	m	class:opentrade::Logger
logger_	opentrade/database.cc	/^  log4cxx::LoggerPtr logger_ = opentrade::Logger::Get("sql");$/;"	m	class:opentrade::SqlLog	file:
logger_	xquant/database.cc	/^  log4cxx::LoggerPtr logger_ = opentrade::Logger::Get("sql");$/;"	m	class:opentrade::SqlLog	file:
longName	ib/jts/Contract.h	/^	std::string	longName;$/;"	m	struct:ContractDetails
lot_size	opentrade/security.h	/^  int lot_size = 0;$/;"	m	struct:opentrade::Security
lot_size	xquant/security.h	/^  int lot_size = 0;$/;"	m	struct:opentrade::Security
low	ib/jts/EDecoder.h	/^   double low;$/;"	m	struct:__anon1::BarData
low	ib/jts/bar.h	/^	double low;$/;"	m	struct:Bar
low	opentrade/market_data.h	/^    double low = 0;$/;"	m	struct:opentrade::MarketData::Trade
low	opentrade/python.cc	/^static PyObject *low(PyObject *self, PyObject *args) {$/;"	f	namespace:opentrade::md_methods
low	xquant/market_data.h	/^    double low = 0;$/;"	m	struct:opentrade::MarketData::Trade
low	xquant/python.cc	/^static PyObject *low(PyObject *self, PyObject *args) {$/;"	f	namespace:opentrade::md_methods
lowEdge	ib/jts/PriceIncrement.h	/^	double lowEdge;$/;"	m	struct:PriceIncrement
low_def	opentrade/python.cc	/^static PyMethodDef low_def = {"get_low", low, METH_VARARGS, "get_low()"};$/;"	m	namespace:opentrade::md_methods	file:
low_def	xquant/python.cc	/^static PyMethodDef low_def = {"get_low", low, METH_VARARGS, "get_low()"};$/;"	m	namespace:opentrade::md_methods	file:
lower_bound	opentrade/security.h	/^    double lower_bound = 0;$/;"	m	struct:opentrade::Exchange::TickSizeTuple
lower_bound	xquant/security.h	/^    double lower_bound = 0;$/;"	m	struct:opentrade::Exchange::TickSizeTuple
m	opentrade/python.cc	/^  std::mutex m;$/;"	m	struct:opentrade::LockGIL	file:
m	xquant/python.cc	/^  std::mutex m;$/;"	m	struct:opentrade::LockGIL	file:
m_	fix/filestore.h	/^  mutable std::mutex m_;$/;"	m	class:FIX::AsyncFileStore
m_TwsTime	ib/jts/EClient.h	/^	std::string m_TwsTime;$/;"	m	class:EClient
m_acctCode	ib/jts/Execution.h	/^	std::string	m_acctCode;$/;"	m	struct:ExecutionFilter
m_allowRedirect	ib/jts/EClientSocket.h	/^    bool m_allowRedirect;    $/;"	m	class:EClientSocket
m_asyncEConnect	ib/jts/EClientSocket.h	/^    bool m_asyncEConnect;$/;"	m	class:EClientSocket
m_buf	ib/jts/EReader.h	/^    std::vector<char> m_buf;$/;"	m	class:EReader
m_changePercent	ib/jts/PercentChangeCondition.h	/^	double m_changePercent;$/;"	m	class:PercentChangeCondition
m_clientId	ib/jts/EClient.h	/^	int m_clientId;$/;"	m	class:EClient
m_clientId	ib/jts/Execution.h	/^	long		m_clientId;$/;"	m	struct:ExecutionFilter
m_conId	ib/jts/ContractCondition.h	/^	int m_conId;$/;"	m	class:ContractCondition
m_condattr	ib/jts/EReaderOSSignal.h	/^    pthread_condattr_t m_condattr;$/;"	m	class:EReaderOSSignal
m_connState	ib/jts/EClient.h	/^	ConnState m_connState;$/;"	m	class:EClient
m_connectOptions	ib/jts/EClient.h	/^	std::string m_connectOptions;$/;"	m	class:EClient
m_csMsgQueue	ib/jts/EReader.h	/^    EMutex m_csMsgQueue;$/;"	m	class:EReader
m_displayName	ib/jts/SoftDollarTier.h	/^	std::string m_name, m_val, m_displayName;$/;"	m	class:SoftDollarTier
m_errorCode	ib/jts/TwsSocketClientErrors.h	/^	int m_errorCode;$/;"	m	class:CodeMsgPair
m_errorMsg	ib/jts/TwsSocketClientErrors.h	/^	std::string m_errorMsg;$/;"	m	class:CodeMsgPair
m_evMsgs	ib/jts/EReaderOSSignal.h	/^    pthread_cond_t m_evMsgs;$/;"	m	class:EReaderOSSignal
m_exchange	ib/jts/ContractCondition.h	/^	std::string m_exchange;$/;"	m	class:ContractCondition
m_exchange	ib/jts/Execution.h	/^	std::string	m_exchange;$/;"	m	struct:ExecutionFilter
m_exchange	ib/jts/executioncondition.h	/^	std::string m_exchange;$/;"	m	class:ExecutionCondition
m_extraAuth	ib/jts/EClient.h	/^	bool m_extraAuth;$/;"	m	class:EClient
m_fd	ib/jts/EClientSocket.h	/^	std::atomic<int> m_fd;$/;"	m	class:EClientSocket
m_fd	ib/jts/ESocket.h	/^    int m_fd;$/;"	m	class:ESocket
m_hReadThread	ib/jts/EReader.h	/^    HANDLE m_hReadThread;$/;"	m	class:EReader
m_hReadThread	ib/jts/EReader.h	/^    pthread_t m_hReadThread;$/;"	m	class:EReader
m_hWnd	ib/jts/EReaderWMSignal.h	/^	HWND m_hWnd;$/;"	m	class:EReaderWMSignal
m_host	ib/jts/EClient.h	/^	std::string m_host;$/;"	m	class:EClient
m_isAlive	ib/jts/EReader.h	/^    std::atomic<bool> m_isAlive;$/;"	m	class:EReader
m_isConjunctionConnection	ib/jts/OrderCondition.h	/^	bool m_isConjunctionConnection;$/;"	m	class:OrderCondition
m_isMore	ib/jts/OperatorCondition.h	/^	bool m_isMore;$/;"	m	class:OperatorCondition
m_msg	ib/jts/EReaderWMSignal.h	/^	int m_msg;$/;"	m	class:EReaderWMSignal
m_msgQueue	ib/jts/EReader.h	/^    std::deque<std::shared_ptr<EMessage>> m_msgQueue;$/;"	m	class:EReader
m_mutex	ib/jts/EMutex.h	/^    EMutex& m_mutex;$/;"	m	class:EMutexGuard
m_mutex	ib/jts/EReaderOSSignal.h	/^    pthread_mutex_t m_mutex;$/;"	m	class:EReaderOSSignal
m_nMaxBufSize	ib/jts/EReader.h	/^	unsigned int m_nMaxBufSize;$/;"	m	class:EReader
m_name	ib/jts/SoftDollarTier.h	/^	std::string m_name, m_val, m_displayName;$/;"	m	class:SoftDollarTier
m_optionalCapabilities	ib/jts/EClient.h	/^	std::string m_optionalCapabilities;$/;"	m	class:EClient
m_outBuffer	ib/jts/ESocket.h	/^	std::vector<char> m_outBuffer;$/;"	m	class:ESocket
m_pClientMsgSink	ib/jts/EDecoder.h	/^    EClientMsgSink *m_pClientMsgSink;$/;"	m	class:EDecoder
m_pClientSocket	ib/jts/EReader.h	/^    EClientSocket *m_pClientSocket;$/;"	m	class:EReader
m_pEReaderSignal	ib/jts/EReader.h	/^    EReaderSignal *m_pEReaderSignal;$/;"	m	class:EReader
m_pEWrapper	ib/jts/EClient.h	/^	EWrapper *m_pEWrapper;$/;"	m	class:EClient
m_pEWrapper	ib/jts/EDecoder.h	/^    EWrapper *m_pEWrapper;$/;"	m	class:EDecoder
m_pSignal	ib/jts/EClientSocket.h	/^    EReaderSignal *m_pSignal;$/;"	m	class:EClientSocket
m_percent	ib/jts/MarginCondition.h	/^	int m_percent;$/;"	m	class:MarginCondition
m_port	ib/jts/EClient.h	/^	int m_port;$/;"	m	class:EClient
m_price	ib/jts/PriceCondition.h	/^	double m_price;$/;"	m	class:PriceCondition
m_redirectCount	ib/jts/EClientSocket.h	/^    int m_redirectCount;$/;"	m	class:EClientSocket
m_secType	ib/jts/Execution.h	/^	std::string	m_secType;$/;"	m	struct:ExecutionFilter
m_secType	ib/jts/executioncondition.h	/^	std::string m_secType;$/;"	m	class:ExecutionCondition
m_serverVersion	ib/jts/EClient.h	/^	int m_serverVersion;$/;"	m	class:EClient
m_serverVersion	ib/jts/EDecoder.h	/^    int m_serverVersion;$/;"	m	class:EDecoder
m_side	ib/jts/Execution.h	/^	std::string	m_side;$/;"	m	struct:ExecutionFilter
m_symbol	ib/jts/Execution.h	/^	std::string	m_symbol;$/;"	m	struct:ExecutionFilter
m_symbol	ib/jts/executioncondition.h	/^	std::string m_symbol;$/;"	m	class:ExecutionCondition
m_time	ib/jts/Execution.h	/^	std::string	m_time;$/;"	m	struct:ExecutionFilter
m_time	ib/jts/TimeCondition.h	/^	std::string m_time;$/;"	m	class:TimeCondition
m_transport	ib/jts/EClient.h	/^	std::unique_ptr<ETransport> m_transport;$/;"	m	class:EClient
m_triggerMethod	ib/jts/PriceCondition.h	/^	int m_triggerMethod;$/;"	m	class:PriceCondition
m_type	ib/jts/OrderCondition.h	/^	OrderConditionType m_type;$/;"	m	class:OrderCondition
m_useV100Plus	ib/jts/EClient.h	/^	bool m_useV100Plus;$/;"	m	class:EClient
m_val	ib/jts/SoftDollarTier.h	/^	std::string m_name, m_val, m_displayName;$/;"	m	class:SoftDollarTier
m_volume	ib/jts/VolumeCondition.h	/^	int m_volume;$/;"	m	class:VolumeCondition
m_waitTimeout	ib/jts/EReaderOSSignal.h	/^    unsigned long m_waitTimeout; \/\/ in milliseconds$/;"	m	class:EReaderOSSignal
main	opentrade/main.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	xquant/main.cc	/^int main(int argc, char *argv[]) {$/;"	f
maintMarginAfter	ib/jts/OrderState.h	/^	std::string maintMarginAfter;$/;"	m	struct:OrderState
maintMarginBefore	ib/jts/OrderState.h	/^	std::string maintMarginBefore;$/;"	m	struct:OrderState
maintMarginChange	ib/jts/OrderState.h	/^	std::string maintMarginChange;$/;"	m	struct:OrderState
managedAccounts	ib/jts/DefaultEWrapper.cpp	/^void DefaultEWrapper::managedAccounts( const std::string& accountsList) { }$/;"	f	class:DefaultEWrapper
marketCapAbove	ib/jts/ScannerSubscription.h	/^    double marketCapAbove;$/;"	m	struct:ScannerSubscription
marketCapBelow	ib/jts/ScannerSubscription.h	/^    double marketCapBelow;$/;"	m	struct:ScannerSubscription
marketDataType	ib/jts/DefaultEWrapper.cpp	/^void DefaultEWrapper::marketDataType( TickerId reqId, int marketDataType) { }$/;"	f	class:DefaultEWrapper
marketName	ib/jts/Contract.h	/^	std::string	marketName;$/;"	m	struct:ContractDetails
marketRule	ib/jts/DefaultEWrapper.cpp	/^void DefaultEWrapper::marketRule(int marketRuleId, const std::vector<PriceIncrement> &priceIncrements) { }$/;"	f	class:DefaultEWrapper
marketRuleIds	ib/jts/Contract.h	/^	std::string marketRuleIds;$/;"	m	struct:ContractDetails
market_cap	opentrade/security.h	/^  double market_cap = 0;$/;"	m	struct:opentrade::Security
market_cap	xquant/security.h	/^  double market_cap = 0;$/;"	m	struct:opentrade::Security
mask	ib/jts/HistoricalTickBidAsk.h	/^    int mask;$/;"	m	struct:HistoricalTickBidAsk
mask	ib/jts/HistoricalTickLast.h	/^    int mask; $/;"	m	struct:HistoricalTickLast
maturity	ib/jts/Contract.h	/^	std::string	maturity;$/;"	m	struct:ContractDetails
maturityDateAbove	ib/jts/ScannerSubscription.h	/^    std::string maturityDateAbove;$/;"	m	struct:ScannerSubscription
maturityDateBelow	ib/jts/ScannerSubscription.h	/^    std::string maturityDateBelow;$/;"	m	struct:ScannerSubscription
maturity_date	opentrade/security.h	/^  int maturity_date = 0;$/;"	m	struct:opentrade::Security
maturity_date	xquant/security.h	/^  int maturity_date = 0;$/;"	m	struct:opentrade::Security
maxCommission	ib/jts/OrderState.h	/^	double  maxCommission;$/;"	m	struct:OrderState
max_pov_	algo/twap/twap.h	/^  double max_pov_ = 0;$/;"	m	class:opentrade::TWAP
max_value	opentrade/algo.h	/^  double max_value = 0;$/;"	m	struct:opentrade::ParamDef
max_value	xquant/algo.h	/^  double max_value = 0;$/;"	m	struct:opentrade::ParamDef
md	opentrade/algo.h	/^  const MarketData& md() const { return *md_; }$/;"	f	class:opentrade::Instrument
md	xquant/algo.h	/^  const MarketData& md() const { return *md_; }$/;"	f	class:opentrade::Instrument
mdSizeMultiplier	ib/jts/Contract.h	/^	int			mdSizeMultiplier;$/;"	m	struct:ContractDetails
md_	opentrade/algo.h	/^  const MarketData* md_ = nullptr;$/;"	m	class:opentrade::Instrument
md_	opentrade/market_data.h	/^  MarketDataMap* md_;$/;"	m	class:opentrade::MarketDataAdapter
md_	xquant/algo.h	/^  const MarketData* md_ = nullptr;$/;"	m	class:opentrade::Instrument
md_	xquant/market_data.h	/^  MarketDataMap* md_;$/;"	m	class:opentrade::MarketDataAdapter
md_methods	opentrade/python.cc	/^namespace md_methods {$/;"	n	namespace:opentrade	file:
md_methods	xquant/python.cc	/^namespace md_methods {$/;"	n	namespace:opentrade	file:
md_of_src_	opentrade/market_data.h	/^  std::map<DataSrc::IdType, MarketDataAdapter::MarketDataMap> md_of_src_;$/;"	m	class:opentrade::MarketDataManager
md_of_src_	xquant/market_data.h	/^  std::map<DataSrc::IdType, MarketDataAdapter::MarketDataMap> md_of_src_;$/;"	m	class:opentrade::MarketDataManager
md_refs_	opentrade/algo.h	/^      md_refs_;$/;"	m	class:opentrade::AlgoManager
md_refs_	opentrade/algo.h	/^      md_refs_;$/;"	m	class:opentrade::AlgoRunner
md_refs_	xquant/algo.h	/^      md_refs_;$/;"	m	class:opentrade::AlgoManager
md_refs_	xquant/algo.h	/^      md_refs_;$/;"	m	class:opentrade::AlgoRunner
mds_	opentrade/connection.h	/^  std::map<std::string, bool> mds_;$/;"	m	class:opentrade::Connection
mds_	xquant/connection.h	/^  std::map<std::string, bool> mds_;$/;"	m	class:opentrade::Connection
mic	opentrade/security.h	/^  const char* mic = "";$/;"	m	struct:opentrade::Exchange
mic	xquant/security.h	/^  const char* mic = "";$/;"	m	struct:opentrade::Exchange
mifid2DecisionAlgo	ib/jts/Order.h	/^    std::string mifid2DecisionAlgo;$/;"	m	struct:Order
mifid2DecisionMaker	ib/jts/Order.h	/^    std::string mifid2DecisionMaker;$/;"	m	struct:Order
mifid2ExecutionAlgo	ib/jts/Order.h	/^    std::string mifid2ExecutionAlgo;$/;"	m	struct:Order
mifid2ExecutionTrader	ib/jts/Order.h	/^    std::string mifid2ExecutionTrader;$/;"	m	struct:Order
minCommission	ib/jts/OrderState.h	/^	double  minCommission;$/;"	m	struct:OrderState
minQty	ib/jts/Order.h	/^	int      minQty;$/;"	m	struct:Order
minTick	ib/jts/Contract.h	/^	double		minTick;$/;"	m	struct:ContractDetails
min_size_	algo/twap/twap.h	/^  double min_size_ = 0;$/;"	m	class:opentrade::TWAP
min_value	opentrade/algo.h	/^  double min_value = 0;$/;"	m	struct:opentrade::ParamDef
min_value	xquant/algo.h	/^  double min_value = 0;$/;"	m	struct:opentrade::ParamDef
mktDepthExchanges	ib/jts/DefaultEWrapper.cpp	/^void DefaultEWrapper::mktDepthExchanges(const std::vector<DepthMktDataDescription> &depthMktDataDescriptions) { }$/;"	f	class:DefaultEWrapper
modelCode	ib/jts/Execution.h	/^	std::string modelCode;$/;"	m	struct:Execution
modelCode	ib/jts/Order.h	/^	std::string modelCode;$/;"	m	struct:Order
moodyRatingAbove	ib/jts/ScannerSubscription.h	/^    std::string moodyRatingAbove;$/;"	m	struct:ScannerSubscription
moodyRatingBelow	ib/jts/ScannerSubscription.h	/^    std::string moodyRatingBelow;$/;"	m	struct:ScannerSubscription
msg	ib/jts/TwsSocketClientErrors.h	/^	const std::string& msg() const			{ return m_errorMsg;  }$/;"	f	class:CodeMsgPair
msg_rate	opentrade/common.h	/^  double msg_rate = 0;               \/\/ per second$/;"	m	struct:opentrade::Limits
msg_rate	xquant/common.h	/^  double msg_rate = 0;               \/\/ per second$/;"	m	struct:xquant::Limits
msg_rate	xquant/common1.h	/^  double msg_rate = 0;               \/\/ per second$/;"	m	struct:opentrade::Limits
msg_rate_per_security	opentrade/common.h	/^  double msg_rate_per_security = 0;  \/\/ per security per second$/;"	m	struct:opentrade::Limits
msg_rate_per_security	xquant/common.h	/^  double msg_rate_per_security = 0;  \/\/ per security per second$/;"	m	struct:xquant::Limits
msg_rate_per_security	xquant/common1.h	/^  double msg_rate_per_security = 0;  \/\/ per security per second$/;"	m	struct:opentrade::Limits
multiplier	ib/jts/Contract.h	/^	std::string	multiplier;$/;"	m	struct:Contract
multiplier	opentrade/security.h	/^  double multiplier = 1;$/;"	m	struct:opentrade::Security
multiplier	xquant/security.h	/^  double multiplier = 1;$/;"	m	struct:opentrade::Security
mutex_	opentrade/algo.h	/^  std::mutex mutex_;$/;"	m	class:opentrade::AlgoRunner
mutex_	xquant/algo.h	/^  std::mutex mutex_;$/;"	m	class:opentrade::AlgoRunner
n	opentrade/common.h	/^  tbb::atomic<int> n = 0;$/;"	m	struct:opentrade::Throttle
n	xquant/common.h	/^  tbb::atomic<int> n = 0;$/;"	m	struct:xquant::Throttle
n	xquant/common1.h	/^  tbb::atomic<int> n = 0;$/;"	m	struct:opentrade::Throttle
name	ib/jts/SoftDollarTier.cpp	/^std::string SoftDollarTier::name() const$/;"	f	class:SoftDollarTier
name	opentrade/account.h	/^  const char* name = "";$/;"	m	struct:opentrade::BrokerAccount
name	opentrade/account.h	/^  const char* name = "";$/;"	m	struct:opentrade::SubAccount
name	opentrade/account.h	/^  const char* name = "";$/;"	m	struct:opentrade::User
name	opentrade/adapter.h	/^  const std::string& name() const { return name_; }$/;"	f	class:opentrade::Adapter
name	opentrade/algo.h	/^  std::string name;$/;"	m	struct:opentrade::ParamDef
name	opentrade/security.h	/^  const char* name = "";$/;"	m	struct:opentrade::Exchange
name	xquant/account.h	/^  const char* name = "";$/;"	m	struct:opentrade::BrokerAccount
name	xquant/account.h	/^  const char* name = "";$/;"	m	struct:opentrade::SubAccount
name	xquant/account.h	/^  const char* name = "";$/;"	m	struct:opentrade::User
name	xquant/account1.h	/^  const char* name = "";$/;"	m	struct:opentrade::BrokerAccount
name	xquant/account1.h	/^  const char* name = "";$/;"	m	struct:opentrade::SubAccount
name	xquant/account1.h	/^  const char* name = "";$/;"	m	struct:opentrade::User
name	xquant/adapter.h	/^  const std::string& name() const { return name_; }$/;"	f	class:opentrade::Adapter
name	xquant/algo.h	/^  std::string name;$/;"	m	struct:opentrade::ParamDef
name	xquant/security.h	/^  const char* name = "";$/;"	m	struct:opentrade::Exchange
name_	opentrade/adapter.h	/^  std::string name_;$/;"	m	class:opentrade::Adapter
name_	xquant/adapter.h	/^  std::string name_;$/;"	m	class:opentrade::Adapter
nbboPriceCap	ib/jts/Order.h	/^	double   nbboPriceCap;$/;"	m	struct:Order
net_outstanding_qty	opentrade/algo.h	/^  double net_outstanding_qty() const {$/;"	f	class:opentrade::Instrument
net_outstanding_qty	xquant/algo.h	/^  double net_outstanding_qty() const {$/;"	f	class:opentrade::Instrument
net_qty	opentrade/algo.h	/^  double net_qty() const { return bought_qty_ - sold_qty_; }$/;"	f	class:opentrade::Instrument
net_qty	xquant/algo.h	/^  double net_qty() const { return bought_qty_ - sold_qty_; }$/;"	f	class:opentrade::Instrument
newsArticle	ib/jts/DefaultEWrapper.cpp	/^void DefaultEWrapper::newsArticle(int requestId, int articleType, const std::string& articleText) { }$/;"	f	class:DefaultEWrapper
newsProviders	ib/jts/DefaultEWrapper.cpp	/^void DefaultEWrapper::newsProviders(const std::vector<NewsProvider> &newsProviders) { }$/;"	f	class:DefaultEWrapper
newsprovider_def	ib/jts/NewsProvider.h	6;"	d
nextOptionDate	ib/jts/Contract.h	/^	std::string	nextOptionDate;$/;"	m	struct:ContractDetails
nextOptionPartial	ib/jts/Contract.h	/^	bool		nextOptionPartial;$/;"	m	struct:ContractDetails
nextOptionType	ib/jts/Contract.h	/^	std::string	nextOptionType;$/;"	m	struct:ContractDetails
nextValidId	ib/ib.cc	/^void IB::nextValidId(OrderId orderId) {$/;"	f	class:IB
nextValidId	ib/jts/DefaultEWrapper.cpp	/^void DefaultEWrapper::nextValidId( OrderId orderId) { }$/;"	f	class:DefaultEWrapper
next_valid_id_	ib/ib.h	/^  std::atomic<uint32_t> next_valid_id_ = 0;$/;"	m	class:IB
noexcept	opentrade/adapter.h	/^  virtual void Start() noexcept = 0;$/;"	m	class:opentrade::Adapter
noexcept	opentrade/algo.h	/^                             const MarketData& md0) noexcept = 0;$/;"	m	class:opentrade::Algo
noexcept	opentrade/algo.h	/^  virtual const ParamDefs& GetParamDefs() noexcept = 0;$/;"	m	class:opentrade::Algo
noexcept	opentrade/algo.h	/^  virtual std::string OnStart(const ParamMap& params) noexcept = 0;$/;"	m	class:opentrade::Algo
noexcept	opentrade/algo.h	/^  virtual void OnConfirmation(const Confirmation& cm) noexcept = 0;$/;"	m	class:opentrade::Algo
noexcept	opentrade/algo.h	/^  virtual void OnStop() noexcept = 0;$/;"	m	class:opentrade::Algo
noexcept	opentrade/exchange_connectivity.h	/^  virtual std::string Cancel(const Order& ord) noexcept = 0;$/;"	m	class:opentrade::ExchangeConnectivityAdapter
noexcept	opentrade/exchange_connectivity.h	/^  virtual std::string Place(const Order& ord) noexcept = 0;$/;"	m	class:opentrade::ExchangeConnectivityAdapter
noexcept	opentrade/market_data.h	/^  virtual void Subscribe(const Security& sec) noexcept = 0;$/;"	m	class:opentrade::MarketDataAdapter
noexcept	xquant/adapter.h	/^  virtual void Start() noexcept = 0;$/;"	m	class:opentrade::Adapter
noexcept	xquant/algo.h	/^                             const MarketData& md0) noexcept = 0;$/;"	m	class:opentrade::Algo
noexcept	xquant/algo.h	/^  virtual const ParamDefs& GetParamDefs() noexcept = 0;$/;"	m	class:opentrade::Algo
noexcept	xquant/algo.h	/^  virtual std::string OnStart(const ParamMap& params) noexcept = 0;$/;"	m	class:opentrade::Algo
noexcept	xquant/algo.h	/^  virtual void OnConfirmation(const Confirmation& cm) noexcept = 0;$/;"	m	class:opentrade::Algo
noexcept	xquant/algo.h	/^  virtual void OnStop() noexcept = 0;$/;"	m	class:opentrade::Algo
noexcept	xquant/exchange_connectivity.h	/^  virtual std::string Cancel(const Order& ord) noexcept = 0;$/;"	m	class:opentrade::ExchangeConnectivityAdapter
noexcept	xquant/exchange_connectivity.h	/^  virtual std::string Place(const Order& ord) noexcept = 0;$/;"	m	class:opentrade::ExchangeConnectivityAdapter
noexcept	xquant/market_data.h	/^  virtual void Subscribe(const Security& sec) noexcept = 0;$/;"	m	class:opentrade::MarketDataAdapter
notHeld	ib/jts/Order.h	/^	bool     notHeld;$/;"	m	struct:Order
notes	ib/jts/Contract.h	/^	std::string	notes;$/;"	m	struct:ContractDetails
numberOfRows	ib/jts/ScannerSubscription.h	/^    int numberOfRows;$/;"	m	struct:ScannerSubscription
obj_	opentrade/python.h	/^  PyObject* obj_ = nullptr;$/;"	m	class:opentrade::Python
obj_	xquant/python.h	/^  PyObject* obj_ = nullptr;$/;"	m	class:opentrade::Python
objs_	opentrade/python.h	/^  std::map<const void*, PyObject*> objs_;$/;"	m	class:opentrade::Python
objs_	xquant/python.h	/^  std::map<const void*, PyObject*> objs_;$/;"	m	class:opentrade::Python
ocaGroup	ib/jts/Order.h	/^	std::string ocaGroup;      \/\/ one cancels all group name$/;"	m	struct:Order
ocaType	ib/jts/Order.h	/^	int      ocaType;       \/\/ 1 = CANCEL_WITH_BLOCK, 2 = REDUCE_WITH_BLOCK, 3 = REDUCE_NON_BLOCK$/;"	m	struct:Order
odd_lot_allowed	opentrade/security.h	/^  bool odd_lot_allowed = false;$/;"	m	struct:opentrade::Exchange
odd_lot_allowed	xquant/security.h	/^  bool odd_lot_allowed = false;$/;"	m	struct:opentrade::Exchange
of	opentrade/position.h	/^    std::ofstream* of = nullptr;$/;"	m	struct:opentrade::PositionManager::Pnl
of	xquant/position.h	/^    std::ofstream* of = nullptr;$/;"	m	struct:opentrade::PositionManager::Pnl
of_	ib/ib.h	/^  std::ofstream of_;$/;"	m	class:IB
of_	opentrade/algo.h	/^  std::ofstream of_;$/;"	m	class:opentrade::AlgoManager
of_	opentrade/order.h	/^  std::ofstream of_;$/;"	m	class:opentrade::GlobalOrderBook
of_	xquant/algo.h	/^  std::ofstream of_;$/;"	m	class:opentrade::AlgoManager
of_	xquant/order.h	/^  std::ofstream of_;$/;"	m	class:opentrade::GlobalOrderBook
offset_	opentrade/database.cc	/^  uint32_t offset_ = 0u;$/;"	m	class:opentrade::SqlLog	file:
offset_	xquant/database.cc	/^  uint32_t offset_ = 0u;$/;"	m	class:opentrade::SqlLog	file:
onClose	ib/jts/EClientSocket.cpp	/^void EClientSocket::onClose()$/;"	f	class:EClientSocket
onError	ib/jts/EClientSocket.cpp	/^void EClientSocket::onError()$/;"	f	class:EClientSocket
onMessage	sim/client/client.cc	/^  void onMessage(const FIX42::ExecutionReport& msg, const FIX::SessionID& id) {$/;"	f	class:SimClient
onMessage	sim/client/client.cc	/^  void onMessage(const FIX42::OrderCancelReject& msg,$/;"	f	class:SimClient
onReceive	ib/jts/EReader.cpp	/^void EReader::onReceive() {$/;"	f	class:EReader
onSend	ib/jts/EClientSocket.cpp	/^void EClientSocket::onSend()$/;"	f	class:EClientSocket
onSend	ib/jts/EReader.cpp	/^void EReader::onSend() {$/;"	f	class:EReader
on_confirmation	algo/test.py	/^def on_confirmation(self, confirmation):$/;"	f
on_confirmation	opentrade/python.h	/^  PyObject* on_confirmation = nullptr;$/;"	m	struct:opentrade::PyModule
on_confirmation	xquant/python.h	/^  PyObject* on_confirmation = nullptr;$/;"	m	struct:opentrade::PyModule
on_market_quote	algo/test.py	/^def on_market_quote(self, instrument):$/;"	f
on_market_quote	opentrade/python.h	/^  PyObject* on_market_quote = nullptr;$/;"	m	struct:opentrade::PyModule
on_market_quote	xquant/python.h	/^  PyObject* on_market_quote = nullptr;$/;"	m	struct:opentrade::PyModule
on_market_trade	algo/test.py	/^def on_market_trade(self, instrument):$/;"	f
on_market_trade	opentrade/python.h	/^  PyObject* on_market_trade = nullptr;$/;"	m	struct:opentrade::PyModule
on_market_trade	xquant/python.h	/^  PyObject* on_market_trade = nullptr;$/;"	m	struct:opentrade::PyModule
on_start	algo/test.py	/^def on_start(self, params):$/;"	f
on_start	opentrade/python.h	/^  PyObject* on_start = nullptr;$/;"	m	struct:opentrade::PyModule
on_start	xquant/python.h	/^  PyObject* on_start = nullptr;$/;"	m	struct:opentrade::PyModule
on_stop	algo/test.py	/^def on_stop(self):$/;"	f
on_stop	opentrade/python.h	/^  PyObject* on_stop = nullptr;$/;"	m	struct:opentrade::PyModule
on_stop	xquant/python.h	/^  PyObject* on_stop = nullptr;$/;"	m	struct:opentrade::PyModule
only	ib/jts/shared_ptr.h	/^   bool only() const { return this == this->forward_; }$/;"	f	class:ibapi::shared_ptr_defs::Use
only	ib/jts/shared_ptr.h	/^   bool only() const { return use_.only(); }$/;"	f	class:ibapi::shared_ptr
open	ib/jts/EDecoder.h	/^   double open;$/;"	m	struct:__anon1::BarData
open	ib/jts/EReaderOSSignal.h	/^    bool open;$/;"	m	class:EReaderOSSignal
open	ib/jts/bar.h	/^	double open;$/;"	m	struct:Bar
open	opentrade/market_data.h	/^    double open = 0;$/;"	m	struct:opentrade::MarketData::Trade
open	opentrade/python.cc	/^static PyObject *open(PyObject *self, PyObject *args) {$/;"	f	namespace:opentrade::md_methods
open	xquant/market_data.h	/^    double open = 0;$/;"	m	struct:opentrade::MarketData::Trade
open	xquant/python.cc	/^static PyObject *open(PyObject *self, PyObject *args) {$/;"	f	namespace:opentrade::md_methods
openClose	ib/jts/Contract.h	/^	long		openClose; \/\/ LegOpenClose enum values$/;"	m	struct:ComboLeg
openClose	ib/jts/Order.h	/^	std::string openClose; \/\/ O=Open, C=Close$/;"	m	struct:Order
openOrder	ib/ib.cc	/^void IB::openOrder(OrderId orderId, const Contract& contract, const Order& ord,$/;"	f	class:IB
openOrder	ib/jts/DefaultEWrapper.cpp	/^void DefaultEWrapper::openOrder( OrderId orderId, const Contract&, const Order&, const OrderState&) { }$/;"	f	class:DefaultEWrapper
openOrderEnd	ib/jts/DefaultEWrapper.cpp	/^void DefaultEWrapper::openOrderEnd() { }$/;"	f	class:DefaultEWrapper
open_def	opentrade/python.cc	/^static PyMethodDef open_def = {"get_open", open, METH_VARARGS, "get_open()"};$/;"	m	namespace:opentrade::md_methods	file:
open_def	xquant/python.cc	/^static PyMethodDef open_def = {"get_open", open, METH_VARARGS, "get_open()"};$/;"	m	namespace:opentrade::md_methods	file:
opentrade	algo/twap/twap.cc	/^namespace opentrade {$/;"	n	file:
opentrade	algo/twap/twap.h	/^namespace opentrade {$/;"	n
opentrade	fix/fix.h	/^namespace opentrade {$/;"	n
opentrade	opentrade/account.cc	/^namespace opentrade {$/;"	n	file:
opentrade	opentrade/account.h	/^namespace opentrade {$/;"	n
opentrade	opentrade/adapter.cc	/^namespace opentrade {$/;"	n	file:
opentrade	opentrade/adapter.h	/^namespace opentrade {$/;"	n
opentrade	opentrade/algo.cc	/^namespace opentrade {$/;"	n	file:
opentrade	opentrade/algo.h	/^namespace opentrade {$/;"	n
opentrade	opentrade/common.h	/^namespace opentrade {$/;"	n
opentrade	opentrade/connection.cc	/^namespace opentrade {$/;"	n	file:
opentrade	opentrade/connection.h	/^namespace opentrade {$/;"	n
opentrade	opentrade/database.cc	/^namespace opentrade {$/;"	n	file:
opentrade	opentrade/database.h	/^namespace opentrade {$/;"	n
opentrade	opentrade/exchange_connectivity.cc	/^namespace opentrade {$/;"	n	file:
opentrade	opentrade/exchange_connectivity.h	/^namespace opentrade {$/;"	n
opentrade	opentrade/logger.h	/^namespace opentrade {$/;"	n
opentrade	opentrade/market_data.cc	/^namespace opentrade {$/;"	n	file:
opentrade	opentrade/market_data.h	/^namespace opentrade {$/;"	n
opentrade	opentrade/order.cc	/^namespace opentrade {$/;"	n	file:
opentrade	opentrade/order.h	/^namespace opentrade {$/;"	n
opentrade	opentrade/position.cc	/^namespace opentrade {$/;"	n	file:
opentrade	opentrade/position.h	/^namespace opentrade {$/;"	n
opentrade	opentrade/python.cc	/^namespace opentrade {$/;"	n	file:
opentrade	opentrade/python.h	/^namespace opentrade {$/;"	n
opentrade	opentrade/risk.cc	/^namespace opentrade {$/;"	n	file:
opentrade	opentrade/risk.h	/^namespace opentrade {$/;"	n
opentrade	opentrade/security.cc	/^namespace opentrade {$/;"	n	file:
opentrade	opentrade/security.h	/^namespace opentrade {$/;"	n
opentrade	opentrade/server.cc	/^namespace opentrade {$/;"	n	file:
opentrade	opentrade/server.h	/^namespace opentrade {$/;"	n
opentrade	opentrade/task_pool.h	/^namespace opentrade {$/;"	n
opentrade	opentrade/utility.h	/^namespace opentrade {$/;"	n
opentrade	xquant/account.cc	/^namespace opentrade {$/;"	n	file:
opentrade	xquant/account.h	/^namespace opentrade {$/;"	n
opentrade	xquant/account1.h	/^namespace opentrade {$/;"	n
opentrade	xquant/adapter.cc	/^namespace opentrade {$/;"	n	file:
opentrade	xquant/adapter.h	/^namespace opentrade {$/;"	n
opentrade	xquant/algo.cc	/^namespace opentrade {$/;"	n	file:
opentrade	xquant/algo.h	/^namespace opentrade {$/;"	n
opentrade	xquant/common1.h	/^namespace opentrade {$/;"	n
opentrade	xquant/connection.cc	/^namespace opentrade {$/;"	n	file:
opentrade	xquant/connection.h	/^namespace opentrade {$/;"	n
opentrade	xquant/database.cc	/^namespace opentrade {$/;"	n	file:
opentrade	xquant/database.h	/^namespace opentrade {$/;"	n
opentrade	xquant/exchange_connectivity.cc	/^namespace opentrade {$/;"	n	file:
opentrade	xquant/exchange_connectivity.h	/^namespace opentrade {$/;"	n
opentrade	xquant/logger.h	/^namespace opentrade {$/;"	n
opentrade	xquant/market_data.cc	/^namespace opentrade {$/;"	n	file:
opentrade	xquant/market_data.h	/^namespace opentrade {$/;"	n
opentrade	xquant/order.cc	/^namespace opentrade {$/;"	n	file:
opentrade	xquant/order.h	/^namespace opentrade {$/;"	n
opentrade	xquant/position.cc	/^namespace opentrade {$/;"	n	file:
opentrade	xquant/position.h	/^namespace opentrade {$/;"	n
opentrade	xquant/python.cc	/^namespace opentrade {$/;"	n	file:
opentrade	xquant/python.h	/^namespace opentrade {$/;"	n
opentrade	xquant/risk.cc	/^namespace opentrade {$/;"	n	file:
opentrade	xquant/risk.h	/^namespace opentrade {$/;"	n
opentrade	xquant/security.cc	/^namespace opentrade {$/;"	n	file:
opentrade	xquant/security.h	/^namespace opentrade {$/;"	n
opentrade	xquant/server.cc	/^namespace opentrade {$/;"	n	file:
opentrade	xquant/server.h	/^namespace opentrade {$/;"	n
operator !=	opentrade/market_data.h	/^    bool operator!=(const Quote& b) const {$/;"	f	struct:opentrade::MarketData::Quote
operator !=	opentrade/market_data.h	/^    bool operator!=(const Trade& b) const {$/;"	f	struct:opentrade::MarketData::Trade
operator !=	xquant/market_data.h	/^    bool operator!=(const Quote& b) const {$/;"	f	struct:opentrade::MarketData::Quote
operator !=	xquant/market_data.h	/^    bool operator!=(const Trade& b) const {$/;"	f	struct:opentrade::MarketData::Trade
operator ()	opentrade/algo.cc	/^inline void AlgoRunner::operator()() {$/;"	f	class:opentrade::AlgoRunner
operator ()	opentrade/common.h	/^  int operator()(int tm) const {$/;"	f	struct:opentrade::Throttle
operator ()	xquant/algo.cc	/^inline void AlgoRunner::operator()() {$/;"	f	class:opentrade::AlgoRunner
operator ()	xquant/common.h	/^  int operator()(int tm) const {$/;"	f	struct:xquant::Throttle
operator ()	xquant/common1.h	/^  int operator()(int tm) const {$/;"	f	struct:opentrade::Throttle
operator *	ib/jts/shared_ptr.h	/^   X& operator*()  const { return *ptr_; }$/;"	f	class:ibapi::shared_ptr
operator ->	ib/jts/shared_ptr.h	/^   X* operator->() const { return ptr_; }$/;"	f	class:ibapi::shared_ptr
operator <	opentrade/security.h	/^    bool operator<(const TickSizeTuple& b) const {$/;"	f	struct:opentrade::Exchange::TickSizeTuple
operator <	xquant/security.h	/^    bool operator<(const TickSizeTuple& b) const {$/;"	f	struct:opentrade::Exchange::TickSizeTuple
operator =	ib/jts/shared_ptr.h	/^   Use& operator=(const Use& u)$/;"	f	class:ibapi::shared_ptr_defs::Use
operator =	ib/jts/shared_ptr.h	/^   shared_ptr& operator=(const shared_ptr& other) {$/;"	f	class:ibapi::shared_ptr
operator ==	ib/jts/Contract.h	/^	bool operator==( const ComboLeg& other) const$/;"	f	struct:ComboLeg
operator ==	ib/jts/Order.h	/^	bool operator==( const OrderComboLeg& other) const$/;"	f	struct:OrderComboLeg
optOutSmartRouting	ib/jts/Order.h	/^	bool     optOutSmartRouting;$/;"	m	struct:Order
opt_attribute	opentrade/security.h	/^  char opt_attribute = 0;$/;"	m	struct:opentrade::Security
opt_attribute	xquant/security.h	/^  char opt_attribute = 0;$/;"	m	struct:opentrade::Security
optionalCapabilities	ib/jts/EClient.cpp	/^const std::string& EClient::optionalCapabilities() const$/;"	f	class:EClient
optional_	opentrade/order.h	/^      optional_ = nullptr;$/;"	m	struct:opentrade::Contract
optional_	xquant/order.h	/^      optional_ = nullptr;$/;"	m	struct:opentrade::Contract
options_	md/bpipe/bpipe.h	/^  bbg::SessionOptions options_;$/;"	m	class:BPIPE
order	opentrade/order.h	/^  Order* order = nullptr;$/;"	m	struct:opentrade::Confirmation
order	xquant/order.h	/^  Order* order = nullptr;$/;"	m	struct:opentrade::Confirmation
orderComboLegs	ib/jts/Order.h	/^	OrderComboLegListSPtr orderComboLegs;$/;"	m	struct:Order
orderId	ib/jts/Execution.h	/^	long		orderId;$/;"	m	struct:Execution
orderId	ib/jts/Order.h	/^	long     orderId;$/;"	m	struct:Order
orderMiscOptions	ib/jts/Order.h	/^	TagValueListSPtr orderMiscOptions;$/;"	m	struct:Order
orderRef	ib/jts/Execution.h	/^	std::string	orderRef;$/;"	m	struct:Execution
orderRef	ib/jts/Order.h	/^	std::string orderRef;      \/\/ order reference$/;"	m	struct:Order
orderStatus	ib/ib.cc	/^void IB::orderStatus(OrderId orderId, const std::string& status, double filled,$/;"	f	class:IB
orderStatus	ib/jts/DefaultEWrapper.cpp	/^void DefaultEWrapper::orderStatus( OrderId orderId, const std::string& status, double filled,$/;"	f	class:DefaultEWrapper
orderType	ib/jts/Order.h	/^	std::string orderType;$/;"	m	struct:Order
orderTypes	ib/jts/Contract.h	/^	std::string	orderTypes;$/;"	m	struct:ContractDetails
order_def	ib/jts/Order.h	6;"	d
order_id	opentrade/order.h	/^  std::string order_id;$/;"	m	struct:opentrade::Confirmation
order_id	xquant/order.h	/^  std::string order_id;$/;"	m	struct:opentrade::Confirmation
order_id_counter_	opentrade/order.h	/^  std::atomic<uint32_t> order_id_counter_ = 0;$/;"	m	class:opentrade::GlobalOrderBook
order_id_counter_	xquant/order.h	/^  std::atomic<uint32_t> order_id_counter_ = 0;$/;"	m	class:opentrade::GlobalOrderBook
order_methods	opentrade/python.cc	/^namespace order_methods {$/;"	n	namespace:opentrade	file:
order_methods	xquant/python.cc	/^namespace order_methods {$/;"	n	namespace:opentrade	file:
order_qty	opentrade/common.h	/^  double order_qty = 0;$/;"	m	struct:opentrade::Limits
order_qty	xquant/common.h	/^  double order_qty = 0;$/;"	m	struct:xquant::Limits
order_qty	xquant/common1.h	/^  double order_qty = 0;$/;"	m	struct:opentrade::Limits
order_value	opentrade/common.h	/^  double order_value = 0;$/;"	m	struct:opentrade::Limits
order_value	xquant/common.h	/^  double order_value = 0;$/;"	m	struct:xquant::Limits
order_value	xquant/common1.h	/^  double order_value = 0;$/;"	m	struct:opentrade::Limits
orders2_	ib/ib.h	/^  tbb::concurrent_unordered_map<uint32_t, uint32_t> orders2_;$/;"	m	class:IB
orders_	ib/ib.h	/^  tbb::concurrent_unordered_map<uint32_t, uint32_t> orders_;$/;"	m	class:IB
orders_	opentrade/order.h	/^  tbb::concurrent_unordered_map<Order::IdType, Order*> orders_;$/;"	m	class:opentrade::GlobalOrderBook
orders_	xquant/order.h	/^  tbb::concurrent_unordered_map<Order::IdType, Order*> orders_;$/;"	m	class:opentrade::GlobalOrderBook
orig_id	opentrade/order.h	/^  IdType orig_id = 0;$/;"	m	struct:opentrade::Order
orig_id	xquant/order.h	/^  IdType orig_id = 0;$/;"	m	struct:opentrade::Order
origin	ib/jts/Order.h	/^	Origin   origin;    \/\/ 0=Customer, 1=Firm$/;"	m	struct:Order
os_signal_	ib/ib.h	/^  EReaderOSSignal os_signal_ = 2000;  \/\/ 2-seconds timeout$/;"	m	class:IB
outsideRth	ib/jts/Order.h	/^	bool     outsideRth;$/;"	m	struct:Order
outstanding_buy_qty	opentrade/algo.h	/^  double outstanding_buy_qty() const { return outstanding_buy_qty_; }$/;"	f	class:opentrade::Instrument
outstanding_buy_qty	opentrade/python.cc	/^static PyObject *outstanding_buy_qty(PyObject *self, PyObject *args) {$/;"	f	namespace:opentrade::instrument_methods
outstanding_buy_qty	xquant/algo.h	/^  double outstanding_buy_qty() const { return outstanding_buy_qty_; }$/;"	f	class:opentrade::Instrument
outstanding_buy_qty	xquant/python.cc	/^static PyObject *outstanding_buy_qty(PyObject *self, PyObject *args) {$/;"	f	namespace:opentrade::instrument_methods
outstanding_buy_qty_	opentrade/algo.h	/^  double outstanding_buy_qty_ = 0;$/;"	m	class:opentrade::Instrument
outstanding_buy_qty_	xquant/algo.h	/^  double outstanding_buy_qty_ = 0;$/;"	m	class:opentrade::Instrument
outstanding_buy_qty_def	opentrade/python.cc	/^static PyMethodDef outstanding_buy_qty_def = {"get_outstanding_buy",$/;"	m	namespace:opentrade::instrument_methods	file:
outstanding_buy_qty_def	xquant/python.cc	/^static PyMethodDef outstanding_buy_qty_def = {"get_outstanding_buy",$/;"	m	namespace:opentrade::instrument_methods	file:
outstanding_sell_qty	opentrade/algo.h	/^  double outstanding_sell_qty() const { return outstanding_sell_qty_; }$/;"	f	class:opentrade::Instrument
outstanding_sell_qty	opentrade/python.cc	/^static PyObject *outstanding_sell_qty(PyObject *self, PyObject *args) {$/;"	f	namespace:opentrade::instrument_methods
outstanding_sell_qty	xquant/algo.h	/^  double outstanding_sell_qty() const { return outstanding_sell_qty_; }$/;"	f	class:opentrade::Instrument
outstanding_sell_qty	xquant/python.cc	/^static PyObject *outstanding_sell_qty(PyObject *self, PyObject *args) {$/;"	f	namespace:opentrade::instrument_methods
outstanding_sell_qty_	opentrade/algo.h	/^  double outstanding_sell_qty_ = 0;$/;"	m	class:opentrade::Instrument
outstanding_sell_qty_	xquant/algo.h	/^  double outstanding_sell_qty_ = 0;$/;"	m	class:opentrade::Instrument
outstanding_sell_qty_def	opentrade/python.cc	/^static PyMethodDef outstanding_sell_qty_def = {$/;"	m	namespace:opentrade::instrument_methods	file:
outstanding_sell_qty_def	xquant/python.cc	/^static PyMethodDef outstanding_sell_qty_def = {$/;"	m	namespace:opentrade::instrument_methods	file:
overflow	opentrade/database.cc	/^  int overflow(int c) {$/;"	f	class:opentrade::SqlLog
overflow	xquant/database.cc	/^  int overflow(int c) {$/;"	f	class:opentrade::SqlLog
override	algo/twap/twap.h	/^                     const MarketData& md0) noexcept override;$/;"	m	class:opentrade::TWAP
override	algo/twap/twap.h	/^  const ParamDefs& GetParamDefs() noexcept override;$/;"	m	class:opentrade::TWAP
override	algo/twap/twap.h	/^  std::string OnStart(const ParamMap& params) noexcept override;$/;"	m	class:opentrade::TWAP
override	algo/twap/twap.h	/^  void OnConfirmation(const Confirmation& cm) noexcept override;$/;"	m	class:opentrade::TWAP
override	algo/twap/twap.h	/^  void OnStop() noexcept override;$/;"	m	class:opentrade::TWAP
override	ib/ib.h	/^                   const Execution& execution) override;$/;"	m	class:IB
override	ib/ib.h	/^                   const std::string& whyHeld, double mktCapPrice) override;$/;"	m	class:IB
override	ib/ib.h	/^                 const OrderState&) override;$/;"	m	class:IB
override	ib/ib.h	/^                 const TickAttrib& attribs) override;$/;"	m	class:IB
override	ib/ib.h	/^             const std::string& errorString) override;$/;"	m	class:IB
override	ib/ib.h	/^  std::string Cancel(const opentrade::Order& ord) noexcept override;$/;"	m	class:IB
override	ib/ib.h	/^  std::string Place(const opentrade::Order& ord) noexcept override;$/;"	m	class:IB
override	ib/ib.h	/^  void Reconnect() noexcept override;$/;"	m	class:IB
override	ib/ib.h	/^  void Start() noexcept override;$/;"	m	class:IB
override	ib/ib.h	/^  void Subscribe(const opentrade::Security& sec) noexcept override;$/;"	m	class:IB
override	ib/ib.h	/^  void connectionClosed() override;$/;"	m	class:IB
override	ib/ib.h	/^  void currentTime(int64_t time) override;$/;"	m	class:IB
override	ib/ib.h	/^  void nextValidId(OrderId orderId) override;$/;"	m	class:IB
override	ib/ib.h	/^  void tickSize(TickerId tickerId, TickType field, int size) override;$/;"	m	class:IB
override	md/bpipe/bpipe.h	/^  bool processEvent(const bbg::Event& evt, bbg::Session* session) override;$/;"	m	class:BPIPE
override	md/bpipe/bpipe.h	/^  void Reconnect() noexcept override;$/;"	m	class:BPIPE
override	md/bpipe/bpipe.h	/^  void Start() noexcept override;$/;"	m	class:BPIPE
override	md/bpipe/bpipe.h	/^  void Subscribe(const opentrade::Security& sec) noexcept override;$/;"	m	class:BPIPE
override	opentrade/python.h	/^                     const MarketData& md0) noexcept override;$/;"	m	class:opentrade::Python
override	opentrade/python.h	/^  const ParamDefs& GetParamDefs() noexcept override;$/;"	m	class:opentrade::Python
override	opentrade/python.h	/^  std::string OnStart(const ParamMap& params) noexcept override;$/;"	m	class:opentrade::Python
override	opentrade/python.h	/^  void OnConfirmation(const Confirmation& cm) noexcept override;$/;"	m	class:opentrade::Python
override	opentrade/python.h	/^  void OnStop() noexcept override;$/;"	m	class:opentrade::Python
override	sim/server/server.cc	/^               const FIX::SessionID& session_id) override;$/;"	m	class:SimServer	file:
override	sim/server/server.cc	/^  void Start() noexcept override;$/;"	m	class:SimServer	file:
override	sim/server/server.cc	/^  void Subscribe(const Security& sec) noexcept override;$/;"	m	class:SimServer	file:
override	xquant/python.h	/^                     const MarketData& md0) noexcept override;$/;"	m	class:opentrade::Python
override	xquant/python.h	/^  const ParamDefs& GetParamDefs() noexcept override;$/;"	m	class:opentrade::Python
override	xquant/python.h	/^  std::string OnStart(const ParamMap& params) noexcept override;$/;"	m	class:opentrade::Python
override	xquant/python.h	/^  void OnConfirmation(const Confirmation& cm) noexcept override;$/;"	m	class:opentrade::Python
override	xquant/python.h	/^  void OnStop() noexcept override;$/;"	m	class:opentrade::Python
overridePercentageConstraints	ib/jts/Order.h	/^	bool     overridePercentageConstraints;$/;"	m	struct:Order
params	opentrade/account.h	/^  const StrMap* params = new StrMap();$/;"	m	struct:opentrade::BrokerAccount
params	xquant/account.h	/^  const StrMap* params = new StrMap();$/;"	m	struct:opentrade::BrokerAccount
params	xquant/account1.h	/^  const StrMap* params = new StrMap();$/;"	m	struct:opentrade::BrokerAccount
parentId	ib/jts/Order.h	/^	long     parentId;      \/\/ Parent order Id, to associate Auto STP or TRAIL orders with the original order.$/;"	m	struct:Order
parseAndProcessMsg	ib/jts/EDecoder.cpp	/^int EDecoder::parseAndProcessMsg(const char*& beginPtr, const char* endPtr) {$/;"	f	class:EDecoder
password	opentrade/account.h	/^  const char* password = "";$/;"	m	struct:opentrade::User
password	xquant/account.h	/^  const char* password = "";$/;"	m	struct:opentrade::User
password	xquant/account1.h	/^  const char* password = "";$/;"	m	struct:opentrade::User
pastLimit	ib/jts/TickAttrib.h	/^	bool pastLimit;$/;"	m	struct:TickAttrib
peggedChangeAmount	ib/jts/Order.h	/^	double peggedChangeAmount;$/;"	m	struct:Order
percent	ib/jts/MarginCondition.cpp	/^int MarginCondition::percent() {$/;"	f	class:MarginCondition
percent	ib/jts/MarginCondition.cpp	/^void MarginCondition::percent(int percent) {$/;"	f	class:MarginCondition
percentOffset	ib/jts/Order.h	/^	double   percentOffset; \/\/ REL orders only$/;"	m	struct:Order
permId	ib/jts/Execution.h	/^	int			permId;$/;"	m	struct:Execution
permId	ib/jts/Order.h	/^	int      permId;$/;"	m	struct:Order
place	opentrade/python.cc	/^static PyObject *place(PyObject *self, PyObject *args) {$/;"	f	namespace:opentrade::instrument_methods
place	xquant/python.cc	/^static PyObject *place(PyObject *self, PyObject *args) {$/;"	f	namespace:opentrade::instrument_methods
placeOrder	ib/jts/EClient.cpp	/^void EClient::placeOrder( OrderId id, const Contract& contract, const Order& order)$/;"	f	class:EClient
place_def	opentrade/python.cc	/^static PyMethodDef place_def = {$/;"	m	namespace:opentrade::instrument_methods	file:
place_def	xquant/python.cc	/^static PyMethodDef place_def = {$/;"	m	namespace:opentrade::instrument_methods	file:
pnl	ib/jts/DefaultEWrapper.cpp	/^void DefaultEWrapper::pnl(int reqId, double dailyPnL, double unrealizedPnL, double realizedPnL) { }$/;"	f	class:DefaultEWrapper
pnlSingle	ib/jts/DefaultEWrapper.cpp	/^void DefaultEWrapper::pnlSingle(int reqId, int pos, double dailyPnL, double unrealizedPnL, double realizedPnL, double value) { }$/;"	f	class:DefaultEWrapper
pnls_	opentrade/connection.h	/^  std::map<SubAccount::IdType, std::pair<double, double>> pnls_;$/;"	m	class:opentrade::Connection
pnls_	opentrade/position.h	/^  tbb::concurrent_unordered_map<SubAccount::IdType, Pnl> pnls_;$/;"	m	class:opentrade::PositionManager
pnls_	xquant/connection.h	/^  std::map<SubAccount::IdType, std::pair<double, double>> pnls_;$/;"	m	class:opentrade::Connection
pnls_	xquant/position.h	/^  tbb::concurrent_unordered_map<SubAccount::IdType, Pnl> pnls_;$/;"	m	class:opentrade::PositionManager
pool_	fix/filelog.h	/^  opentrade::TaskPool pool_;$/;"	m	class:FIX::AsyncFileLog
pool_	fix/filestore.h	/^  opentrade::TaskPool pool_;$/;"	m	class:FIX::AsyncFileStore
pool_	opentrade/database.h	/^  inline static soci::connection_pool* pool_ = nullptr;$/;"	m	class:opentrade::Database
pool_	xquant/database.h	/^  inline static soci::connection_pool* pool_ = nullptr;$/;"	m	class:opentrade::Database
port	ib/jts/EClient.h	/^	int port() const { return m_port; }$/;"	f	class:EClient
port_	ib/ib.h	/^  int port_ = 0;$/;"	m	class:IB
position	ib/jts/DefaultEWrapper.cpp	/^void DefaultEWrapper::position( const std::string& account, const Contract& contract, double position, double avgCost) { }$/;"	f	class:DefaultEWrapper
positionEnd	ib/jts/DefaultEWrapper.cpp	/^void DefaultEWrapper::positionEnd() { }$/;"	f	class:DefaultEWrapper
positionMulti	ib/jts/DefaultEWrapper.cpp	/^void DefaultEWrapper::positionMulti( int reqId, const std::string& account,const std::string& modelCode, const Contract& contract, double pos, double avgCost) { }$/;"	f	class:DefaultEWrapper
positionMultiEnd	ib/jts/DefaultEWrapper.cpp	/^void DefaultEWrapper::positionMultiEnd( int reqId) { }$/;"	f	class:DefaultEWrapper
position_value	opentrade/account.h	/^  PositionValue position_value;$/;"	m	struct:opentrade::AccountBase
position_value	xquant/account.h	/^  PositionValue position_value;$/;"	m	struct:opentrade::AccountBase
position_value	xquant/account1.h	/^  PositionValue position_value;$/;"	m	struct:opentrade::AccountBase
preOpen	ib/jts/TickAttrib.h	/^	bool preOpen;$/;"	m	struct:TickAttrib
precision	opentrade/algo.h	/^  int precision = 0;$/;"	m	struct:opentrade::ParamDef
precision	xquant/algo.h	/^  int precision = 0;$/;"	m	struct:opentrade::ParamDef
prepareBuffer	ib/jts/EClientSocket.cpp	/^void EClientSocket::prepareBuffer(std::ostream& buf) const$/;"	f	class:EClientSocket
prepareBufferImpl	ib/jts/EClientSocket.cpp	/^void EClientSocket::prepareBufferImpl(std::ostream& buf) const$/;"	f	class:EClientSocket
price	ib/jts/Contract.h	/^	double	price;$/;"	m	struct:DeltaNeutralContract
price	ib/jts/Execution.h	/^	double		price;$/;"	m	struct:Execution
price	ib/jts/HistogramEntry.h	/^	double price;$/;"	m	struct:HistogramEntry
price	ib/jts/HistoricalTick.h	/^    double price;$/;"	m	struct:HistoricalTick
price	ib/jts/HistoricalTickLast.h	/^    double price;$/;"	m	struct:HistoricalTickLast
price	ib/jts/Order.h	/^	double price;$/;"	m	struct:OrderComboLeg
price	ib/jts/PriceCondition.cpp	/^double PriceCondition::price() {$/;"	f	class:PriceCondition
price	ib/jts/PriceCondition.cpp	/^void PriceCondition::price(double price) {$/;"	f	class:PriceCondition
price	opentrade/order.h	/^  double price = 0;$/;"	m	struct:opentrade::Contract
price	xquant/order.h	/^  double price = 0;$/;"	m	struct:opentrade::Contract
priceAsk	ib/jts/HistoricalTickBidAsk.h	/^    double priceAsk;$/;"	m	struct:HistoricalTickBidAsk
priceBid	ib/jts/HistoricalTickBidAsk.h	/^    double priceBid;$/;"	m	struct:HistoricalTickBidAsk
priceMagnifier	ib/jts/Contract.h	/^	long		priceMagnifier;$/;"	m	struct:ContractDetails
price_	algo/twap/twap.h	/^  double price_ = 0;$/;"	m	class:opentrade::TWAP
priceincrement_def	ib/jts/PriceIncrement.h	6;"	d
primaryExchange	ib/jts/Contract.h	/^	std::string	primaryExchange; \/\/ pick an actual (ie non-aggregate) exchange that the contract trades on.  DO NOT SET TO SMART.$/;"	m	struct:Contract
private	fix/filelog.h	4;"	d
private	fix/filelog.h	7;"	d
private	fix/filestore.h	4;"	d
private	fix/filestore.h	7;"	d
processAccountSummaryEndMsg	ib/jts/EDecoder.cpp	/^const char* EDecoder::processAccountSummaryEndMsg(const char* ptr, const char* endPtr) {$/;"	f	class:EDecoder
processAccountSummaryMsg	ib/jts/EDecoder.cpp	/^const char* EDecoder::processAccountSummaryMsg(const char* ptr, const char* endPtr) {$/;"	f	class:EDecoder
processAccountUpdateMultiEndMsg	ib/jts/EDecoder.cpp	/^const char* EDecoder::processAccountUpdateMultiEndMsg(const char* ptr, const char* endPtr) {$/;"	f	class:EDecoder
processAccountUpdateMultiMsg	ib/jts/EDecoder.cpp	/^const char* EDecoder::processAccountUpdateMultiMsg(const char* ptr, const char* endPtr) {$/;"	f	class:EDecoder
processAcctDownloadEndMsg	ib/jts/EDecoder.cpp	/^const char* EDecoder::processAcctDownloadEndMsg(const char* ptr, const char* endPtr) {$/;"	f	class:EDecoder
processAcctUpdateTimeMsg	ib/jts/EDecoder.cpp	/^const char* EDecoder::processAcctUpdateTimeMsg(const char* ptr, const char* endPtr) {$/;"	f	class:EDecoder
processAcctValueMsg	ib/jts/EDecoder.cpp	/^const char* EDecoder::processAcctValueMsg(const char* ptr, const char* endPtr) {$/;"	f	class:EDecoder
processBondContractDataMsg	ib/jts/EDecoder.cpp	/^const char* EDecoder::processBondContractDataMsg(const char* ptr, const char* endPtr) {$/;"	f	class:EDecoder
processCommissionReportMsg	ib/jts/EDecoder.cpp	/^const char* EDecoder::processCommissionReportMsg(const char* ptr, const char* endPtr) {$/;"	f	class:EDecoder
processConnectAck	ib/jts/EDecoder.cpp	/^int EDecoder::processConnectAck(const char*& beginPtr, const char* endPtr)$/;"	f	class:EDecoder
processContractDataEndMsg	ib/jts/EDecoder.cpp	/^const char* EDecoder::processContractDataEndMsg(const char* ptr, const char* endPtr) {$/;"	f	class:EDecoder
processContractDataMsg	ib/jts/EDecoder.cpp	/^const char* EDecoder::processContractDataMsg(const char* ptr, const char* endPtr) {$/;"	f	class:EDecoder
processCurrentTimeMsg	ib/jts/EDecoder.cpp	/^const char* EDecoder::processCurrentTimeMsg(const char* ptr, const char* endPtr) {$/;"	f	class:EDecoder
processDeltaNeutralValidationMsg	ib/jts/EDecoder.cpp	/^const char* EDecoder::processDeltaNeutralValidationMsg(const char* ptr, const char* endPtr) {$/;"	f	class:EDecoder
processDisplayGroupListMsg	ib/jts/EDecoder.cpp	/^const char* EDecoder::processDisplayGroupListMsg(const char* ptr, const char* endPtr) {$/;"	f	class:EDecoder
processDisplayGroupUpdatedMsg	ib/jts/EDecoder.cpp	/^const char* EDecoder::processDisplayGroupUpdatedMsg(const char* ptr, const char* endPtr) {$/;"	f	class:EDecoder
processErrMsgMsg	ib/jts/EDecoder.cpp	/^const char* EDecoder::processErrMsgMsg(const char* ptr, const char* endPtr) {$/;"	f	class:EDecoder
processEvent	md/bpipe/bpipe.cc	/^bool BPIPE::processEvent(const bbg::Event& evt, bbg::Session* session) {$/;"	f	class:BPIPE
processExecutionDetailsEndMsg	ib/jts/EDecoder.cpp	/^const char* EDecoder::processExecutionDetailsEndMsg(const char* ptr, const char* endPtr) {$/;"	f	class:EDecoder
processExecutionDetailsMsg	ib/jts/EDecoder.cpp	/^const char* EDecoder::processExecutionDetailsMsg(const char* ptr, const char* endPtr) {$/;"	f	class:EDecoder
processFamilyCodesMsg	ib/jts/EDecoder.cpp	/^const char* EDecoder::processFamilyCodesMsg(const char* ptr, const char* endPtr) $/;"	f	class:EDecoder
processFundamentalDataMsg	ib/jts/EDecoder.cpp	/^const char* EDecoder::processFundamentalDataMsg(const char* ptr, const char* endPtr) {$/;"	f	class:EDecoder
processHeadTimestampMsg	ib/jts/EDecoder.cpp	/^const char* EDecoder::processHeadTimestampMsg(const char* ptr, const char* endPtr) {$/;"	f	class:EDecoder
processHistogramDataMsg	ib/jts/EDecoder.cpp	/^const char* EDecoder::processHistogramDataMsg(const char* ptr, const char* endPtr) {$/;"	f	class:EDecoder
processHistoricalDataMsg	ib/jts/EDecoder.cpp	/^const char* EDecoder::processHistoricalDataMsg(const char* ptr, const char* endPtr) {$/;"	f	class:EDecoder
processHistoricalDataUpdateMsg	ib/jts/EDecoder.cpp	/^const char* EDecoder::processHistoricalDataUpdateMsg(const char* ptr, const char* endPtr) {$/;"	f	class:EDecoder
processHistoricalNewsEndMsg	ib/jts/EDecoder.cpp	/^const char* EDecoder::processHistoricalNewsEndMsg(const char* ptr, const char* endPtr) $/;"	f	class:EDecoder
processHistoricalNewsMsg	ib/jts/EDecoder.cpp	/^const char* EDecoder::processHistoricalNewsMsg(const char* ptr, const char* endPtr) $/;"	f	class:EDecoder
processHistoricalTicks	ib/jts/EDecoder.cpp	/^const char* EDecoder::processHistoricalTicks(const char* ptr, const char* endPtr) {$/;"	f	class:EDecoder
processHistoricalTicksBidAsk	ib/jts/EDecoder.cpp	/^const char* EDecoder::processHistoricalTicksBidAsk(const char* ptr, const char* endPtr) {$/;"	f	class:EDecoder
processHistoricalTicksLast	ib/jts/EDecoder.cpp	/^const char* EDecoder::processHistoricalTicksLast(const char* ptr, const char* endPtr) {$/;"	f	class:EDecoder
processManagedAcctsMsg	ib/jts/EDecoder.cpp	/^const char* EDecoder::processManagedAcctsMsg(const char* ptr, const char* endPtr) {$/;"	f	class:EDecoder
processMarketDataTypeMsg	ib/jts/EDecoder.cpp	/^const char* EDecoder::processMarketDataTypeMsg(const char* ptr, const char* endPtr) {$/;"	f	class:EDecoder
processMarketDepthL2Msg	ib/jts/EDecoder.cpp	/^const char* EDecoder::processMarketDepthL2Msg(const char* ptr, const char* endPtr) {$/;"	f	class:EDecoder
processMarketDepthMsg	ib/jts/EDecoder.cpp	/^const char* EDecoder::processMarketDepthMsg(const char* ptr, const char* endPtr) {$/;"	f	class:EDecoder
processMarketRuleMsg	ib/jts/EDecoder.cpp	/^const char* EDecoder::processMarketRuleMsg(const char* ptr, const char* endPtr)$/;"	f	class:EDecoder
processMktDepthExchangesMsg	ib/jts/EDecoder.cpp	/^const char* EDecoder::processMktDepthExchangesMsg(const char* ptr, const char* endPtr) $/;"	f	class:EDecoder
processMsgs	ib/jts/EReader.cpp	/^void EReader::processMsgs(void) {$/;"	f	class:EReader
processMsgsDecoder_	ib/jts/EReader.h	/^    EDecoder processMsgsDecoder_;$/;"	m	class:EReader
processNewsArticleMsg	ib/jts/EDecoder.cpp	/^const char* EDecoder::processNewsArticleMsg(const char* ptr, const char* endPtr) $/;"	f	class:EDecoder
processNewsBulletinsMsg	ib/jts/EDecoder.cpp	/^const char* EDecoder::processNewsBulletinsMsg(const char* ptr, const char* endPtr) {$/;"	f	class:EDecoder
processNewsProvidersMsg	ib/jts/EDecoder.cpp	/^const char* EDecoder::processNewsProvidersMsg(const char* ptr, const char* endPtr) $/;"	f	class:EDecoder
processNextValidIdMsg	ib/jts/EDecoder.cpp	/^const char* EDecoder::processNextValidIdMsg(const char* ptr, const char* endPtr) {$/;"	f	class:EDecoder
processNonBlockingSelect	ib/jts/EReader.cpp	/^bool EReader::processNonBlockingSelect() {$/;"	f	class:EReader
processOpenOrderEndMsg	ib/jts/EDecoder.cpp	/^const char* EDecoder::processOpenOrderEndMsg(const char* ptr, const char* endPtr) {$/;"	f	class:EDecoder
processOpenOrderMsg	ib/jts/EDecoder.cpp	/^const char* EDecoder::processOpenOrderMsg(const char* ptr, const char* endPtr) {$/;"	f	class:EDecoder
processOrderStatusMsg	ib/jts/EDecoder.cpp	/^const char* EDecoder::processOrderStatusMsg(const char* ptr, const char* endPtr) {$/;"	f	class:EDecoder
processPnLMsg	ib/jts/EDecoder.cpp	/^const char* EDecoder::processPnLMsg(const char* ptr, const char* endPtr) {$/;"	f	class:EDecoder
processPnLSingleMsg	ib/jts/EDecoder.cpp	/^const char* EDecoder::processPnLSingleMsg(const char* ptr, const char* endPtr) {$/;"	f	class:EDecoder
processPortfolioValueMsg	ib/jts/EDecoder.cpp	/^const char* EDecoder::processPortfolioValueMsg(const char* ptr, const char* endPtr) {$/;"	f	class:EDecoder
processPositionDataMsg	ib/jts/EDecoder.cpp	/^const char* EDecoder::processPositionDataMsg(const char* ptr, const char* endPtr) {$/;"	f	class:EDecoder
processPositionEndMsg	ib/jts/EDecoder.cpp	/^const char* EDecoder::processPositionEndMsg(const char* ptr, const char* endPtr) {$/;"	f	class:EDecoder
processPositionMultiEndMsg	ib/jts/EDecoder.cpp	/^const char* EDecoder::processPositionMultiEndMsg(const char* ptr, const char* endPtr) {$/;"	f	class:EDecoder
processPositionMultiMsg	ib/jts/EDecoder.cpp	/^const char* EDecoder::processPositionMultiMsg(const char* ptr, const char* endPtr) {$/;"	f	class:EDecoder
processRealTimeBarsMsg	ib/jts/EDecoder.cpp	/^const char* EDecoder::processRealTimeBarsMsg(const char* ptr, const char* endPtr) {$/;"	f	class:EDecoder
processReceiveFaMsg	ib/jts/EDecoder.cpp	/^const char* EDecoder::processReceiveFaMsg(const char* ptr, const char* endPtr) {$/;"	f	class:EDecoder
processRerouteMktDataReqMsg	ib/jts/EDecoder.cpp	/^const char* EDecoder::processRerouteMktDataReqMsg(const char* ptr, const char* endPtr) {$/;"	f	class:EDecoder
processRerouteMktDepthReqMsg	ib/jts/EDecoder.cpp	/^const char* EDecoder::processRerouteMktDepthReqMsg(const char* ptr, const char* endPtr) {$/;"	f	class:EDecoder
processScannerDataMsg	ib/jts/EDecoder.cpp	/^const char* EDecoder::processScannerDataMsg(const char* ptr, const char* endPtr) {$/;"	f	class:EDecoder
processScannerParametersMsg	ib/jts/EDecoder.cpp	/^const char* EDecoder::processScannerParametersMsg(const char* ptr, const char* endPtr) {$/;"	f	class:EDecoder
processSecurityDefinitionOptionalParameterEndMsg	ib/jts/EDecoder.cpp	/^const char* EDecoder::processSecurityDefinitionOptionalParameterEndMsg(const char* ptr, const char* endPtr) {$/;"	f	class:EDecoder
processSecurityDefinitionOptionalParameterMsg	ib/jts/EDecoder.cpp	/^const char* EDecoder::processSecurityDefinitionOptionalParameterMsg(const char* ptr, const char* endPtr) {$/;"	f	class:EDecoder
processSmartComponentsMsg	ib/jts/EDecoder.cpp	/^const char* EDecoder::processSmartComponentsMsg(const char* ptr, const char* endPtr) {$/;"	f	class:EDecoder
processSoftDollarTiersMsg	ib/jts/EDecoder.cpp	/^const char* EDecoder::processSoftDollarTiersMsg(const char* ptr, const char* endPtr) $/;"	f	class:EDecoder
processSymbolSamplesMsg	ib/jts/EDecoder.cpp	/^const char* EDecoder::processSymbolSamplesMsg(const char* ptr, const char* endPtr) $/;"	f	class:EDecoder
processTickByTickDataMsg	ib/jts/EDecoder.cpp	/^const char* EDecoder::processTickByTickDataMsg(const char* ptr, const char* endPtr) {$/;"	f	class:EDecoder
processTickEfpMsg	ib/jts/EDecoder.cpp	/^const char* EDecoder::processTickEfpMsg(const char* ptr, const char* endPtr) {$/;"	f	class:EDecoder
processTickGenericMsg	ib/jts/EDecoder.cpp	/^const char* EDecoder::processTickGenericMsg(const char* ptr, const char* endPtr) {$/;"	f	class:EDecoder
processTickNewsMsg	ib/jts/EDecoder.cpp	/^const char* EDecoder::processTickNewsMsg(const char* ptr, const char* endPtr) $/;"	f	class:EDecoder
processTickOptionComputationMsg	ib/jts/EDecoder.cpp	/^const char* EDecoder::processTickOptionComputationMsg(const char* ptr, const char* endPtr) {$/;"	f	class:EDecoder
processTickPriceMsg	ib/jts/EDecoder.cpp	/^const char* EDecoder::processTickPriceMsg(const char* ptr, const char* endPtr) {$/;"	f	class:EDecoder
processTickReqParamsMsg	ib/jts/EDecoder.cpp	/^const char* EDecoder::processTickReqParamsMsg(const char* ptr, const char* endPtr) {$/;"	f	class:EDecoder
processTickSizeMsg	ib/jts/EDecoder.cpp	/^const char* EDecoder::processTickSizeMsg(const char* ptr, const char* endPtr) {$/;"	f	class:EDecoder
processTickSnapshotEndMsg	ib/jts/EDecoder.cpp	/^const char* EDecoder::processTickSnapshotEndMsg(const char* ptr, const char* endPtr) {$/;"	f	class:EDecoder
processTickStringMsg	ib/jts/EDecoder.cpp	/^const char* EDecoder::processTickStringMsg(const char* ptr, const char* endPtr) {$/;"	f	class:EDecoder
processVerifyAndAuthCompletedMsg	ib/jts/EDecoder.cpp	/^const char* EDecoder::processVerifyAndAuthCompletedMsg(const char* ptr, const char* endPtr) {$/;"	f	class:EDecoder
processVerifyAndAuthMessageApiMsg	ib/jts/EDecoder.cpp	/^const char* EDecoder::processVerifyAndAuthMessageApiMsg(const char* ptr, const char* endPtr) {$/;"	f	class:EDecoder
processVerifyCompletedMsg	ib/jts/EDecoder.cpp	/^const char* EDecoder::processVerifyCompletedMsg(const char* ptr, const char* endPtr) {$/;"	f	class:EDecoder
processVerifyMessageApiMsg	ib/jts/EDecoder.cpp	/^const char* EDecoder::processVerifyMessageApiMsg(const char* ptr, const char* endPtr) {$/;"	f	class:EDecoder
projection	ib/jts/EDecoder.h	/^   std::string projection;$/;"	m	struct:__anon1::ScanData
providerCode	ib/jts/NewsProvider.h	/^	std::string providerCode;$/;"	m	struct:NewsProvider
providerName	ib/jts/NewsProvider.h	/^	std::string providerName;$/;"	m	struct:NewsProvider
ptr_	ib/jts/shared_ptr.h	/^   X *ptr_;$/;"	m	class:ibapi::shared_ptr
putMessageToQueue	ib/jts/EReader.cpp	/^bool EReader::putMessageToQueue() {$/;"	f	class:EReader
put_or_call	opentrade/security.h	/^  bool put_or_call = 0;$/;"	m	struct:opentrade::Security
put_or_call	xquant/security.h	/^  bool put_or_call = 0;$/;"	m	struct:opentrade::Security
putable	ib/jts/Contract.h	/^	bool		putable;$/;"	m	struct:ContractDetails
px	sim/server/server.cc	/^    double px = 0;$/;"	m	struct:SimServer::OrderTuple	file:
py_	opentrade/python.h	/^  PyModule py_;$/;"	m	class:opentrade::Python
py_	xquant/python.h	/^  PyModule py_;$/;"	m	class:opentrade::Python
qty	opentrade/market_data.h	/^    double qty = 0;$/;"	m	struct:opentrade::MarketData::Trade
qty	opentrade/order.h	/^  double qty = 0;$/;"	m	struct:opentrade::Contract
qty	opentrade/position.h	/^  double qty = 0;$/;"	m	struct:opentrade::Bod
qty	opentrade/position.h	/^  double qty = 0;$/;"	m	struct:opentrade::Position
qty	opentrade/python.cc	/^static PyObject *qty(PyObject *self, PyObject *args) {$/;"	f	namespace:opentrade::md_methods
qty	xquant/market_data.h	/^    double qty = 0;$/;"	m	struct:opentrade::MarketData::Trade
qty	xquant/order.h	/^  double qty = 0;$/;"	m	struct:opentrade::Contract
qty	xquant/position.h	/^  double qty = 0;$/;"	m	struct:opentrade::Bod
qty	xquant/position.h	/^  double qty = 0;$/;"	m	struct:opentrade::Position
qty	xquant/python.cc	/^static PyObject *qty(PyObject *self, PyObject *args) {$/;"	f	namespace:opentrade::md_methods
qty_	algo/twap/twap.h	/^  double qty_ = 0;$/;"	m	class:opentrade::TWAP
qty_def	opentrade/python.cc	/^static PyMethodDef qty_def = {"get_qty", qty, METH_VARARGS, "get_qty()"};$/;"	m	namespace:opentrade::md_methods	file:
qty_def	xquant/python.cc	/^static PyMethodDef qty_def = {"get_qty", qty, METH_VARARGS, "get_qty()"};$/;"	m	namespace:opentrade::md_methods	file:
queryDisplayGroups	ib/jts/EClient.cpp	/^void EClient::queryDisplayGroups( int reqId)$/;"	f	class:EClient
quote	opentrade/market_data.h	/^  const Quote& quote() const { return depth[0]; }$/;"	f	struct:opentrade::MarketData
quote	xquant/market_data.h	/^  const Quote& quote() const { return depth[0]; }$/;"	f	struct:opentrade::MarketData
randomizePrice	ib/jts/Order.h	/^    bool randomizePrice;$/;"	m	struct:Order
randomizeSize	ib/jts/Order.h	/^    bool randomizeSize;$/;"	m	struct:Order
rank	ib/jts/EDecoder.h	/^   int rank;$/;"	m	struct:__anon1::ScanData
rate	opentrade/security.h	/^  double rate = 1;$/;"	m	struct:opentrade::Security
rate	xquant/security.h	/^  double rate = 1;$/;"	m	struct:opentrade::Security
ratings	ib/jts/Contract.h	/^	std::string	ratings;$/;"	m	struct:ContractDetails
ratio	ib/jts/Contract.h	/^	long		ratio;$/;"	m	struct:ComboLeg
readExternal	ib/jts/ContractCondition.cpp	/^const char* ContractCondition::readExternal(const char* ptr, const char* endPtr) {$/;"	f	class:ContractCondition
readExternal	ib/jts/OperatorCondition.cpp	/^const char* OperatorCondition::readExternal(const char* ptr, const char* endPtr) {$/;"	f	class:OperatorCondition
readExternal	ib/jts/OrderCondition.cpp	/^const char* OrderCondition::readExternal(const char* ptr, const char* endPtr) {$/;"	f	class:OrderCondition
readExternal	ib/jts/PriceCondition.cpp	/^const char* PriceCondition::readExternal(const char* ptr, const char* endPtr) {$/;"	f	class:PriceCondition
readExternal	ib/jts/executioncondition.cpp	/^const char* ExecutionCondition::readExternal(const char* ptr, const char* endPtr) {$/;"	f	class:ExecutionCondition
readSingleMsg	ib/jts/EReader.cpp	/^EMessage * EReader::readSingleMsg() {$/;"	f	class:EReader
readToQueue	ib/jts/EReader.cpp	/^void EReader::readToQueue() {$/;"	f	class:EReader
readToQueueThread	ib/jts/EReader.cpp	/^void * EReader::readToQueueThread(void * lpParam)$/;"	f	class:EReader
reader_	ib/ib.h	/^  EReader* reader_ = nullptr;$/;"	m	class:IB
reader_tp_	ib/ib.h	/^  opentrade::TaskPool reader_tp_;$/;"	m	class:IB
realExpirationDate	ib/jts/Contract.h	/^	std::string realExpirationDate;$/;"	m	struct:ContractDetails
realized	opentrade/position.h	/^    double realized = 0;$/;"	m	struct:opentrade::PositionManager::Pnl
realized	xquant/position.h	/^    double realized = 0;$/;"	m	struct:opentrade::PositionManager::Pnl
realizedPNL	ib/jts/CommissionReport.h	/^	double		realizedPNL;$/;"	m	struct:CommissionReport
realized_pnl	opentrade/position.h	/^  double realized_pnl = 0;$/;"	m	struct:opentrade::Bod
realized_pnl	opentrade/position.h	/^  double realized_pnl = 0;$/;"	m	struct:opentrade::Position
realized_pnl	xquant/position.h	/^  double realized_pnl = 0;$/;"	m	struct:opentrade::Bod
realized_pnl	xquant/position.h	/^  double realized_pnl = 0;$/;"	m	struct:opentrade::Position
realtimeBar	ib/jts/DefaultEWrapper.cpp	/^void DefaultEWrapper::realtimeBar(TickerId reqId, long time, double open, double high, double low, double close,$/;"	f	class:DefaultEWrapper
receive	ib/jts/EClientSocket.cpp	/^int EClientSocket::receive(char* buf, size_t sz)$/;"	f	class:EClientSocket
receiveFA	ib/jts/DefaultEWrapper.cpp	/^void DefaultEWrapper::receiveFA(faDataType pFaDataType, const std::string& cxml) { }$/;"	f	class:DefaultEWrapper
reconnect_interval_	md/bpipe/bpipe.h	/^  int reconnect_interval_ = 5;$/;"	m	class:BPIPE
redirect	ib/jts/EClientSocket.cpp	/^void EClientSocket::redirect(const char *host, int port) {$/;"	f	class:EClientSocket
referenceChangeAmount	ib/jts/Order.h	/^	double referenceChangeAmount;$/;"	m	struct:Order
referenceContractId	ib/jts/Order.h	/^	int referenceContractId;$/;"	m	struct:Order
referenceExchangeId	ib/jts/Order.h	/^	std::string referenceExchangeId;$/;"	m	struct:Order
referencePriceType	ib/jts/Order.h	/^	int      referencePriceType; \/\/ 1=Average, 2 = BidOrAsk$/;"	m	struct:Order
remove	ib/jts/shared_ptr.h	/^   void remove() const {$/;"	f	class:ibapi::shared_ptr_defs::Use
replaceFA	ib/jts/EClient.cpp	/^void EClient::replaceFA(faDataType pFaDataType, const std::string& cxml)$/;"	f	class:EClient
reqAccountSummary	ib/jts/EClient.cpp	/^void EClient::reqAccountSummary( int reqId, const std::string& groupName, const std::string& tags)$/;"	f	class:EClient
reqAccountUpdates	ib/jts/EClient.cpp	/^void EClient::reqAccountUpdates(bool subscribe, const std::string& acctCode)$/;"	f	class:EClient
reqAccountUpdatesMulti	ib/jts/EClient.cpp	/^void EClient::reqAccountUpdatesMulti( int reqId, const std::string& account, const std::string& modelCode, bool ledgerAndNLV)$/;"	f	class:EClient
reqAllOpenOrders	ib/jts/EClient.cpp	/^void EClient::reqAllOpenOrders()$/;"	f	class:EClient
reqAutoOpenOrders	ib/jts/EClient.cpp	/^void EClient::reqAutoOpenOrders(bool bAutoBind)$/;"	f	class:EClient
reqContractDetails	ib/jts/EClient.cpp	/^void EClient::reqContractDetails( int reqId, const Contract& contract)$/;"	f	class:EClient
reqCurrentTime	ib/jts/EClient.cpp	/^void EClient::reqCurrentTime()$/;"	f	class:EClient
reqExecutions	ib/jts/EClient.cpp	/^void EClient::reqExecutions(int reqId, const ExecutionFilter& filter)$/;"	f	class:EClient
reqFamilyCodes	ib/jts/EClient.cpp	/^void EClient::reqFamilyCodes()$/;"	f	class:EClient
reqFundamentalData	ib/jts/EClient.cpp	/^void EClient::reqFundamentalData(TickerId reqId, const Contract& contract, $/;"	f	class:EClient
reqGlobalCancel	ib/jts/EClient.cpp	/^void EClient::reqGlobalCancel()$/;"	f	class:EClient
reqHeadTimestamp	ib/jts/EClient.cpp	/^void EClient::reqHeadTimestamp(int tickerId, const Contract &contract, const std::string& whatToShow, int useRTH, int formatDate)$/;"	f	class:EClient
reqHistogramData	ib/jts/EClient.cpp	/^void EClient::reqHistogramData(int reqId, const Contract &contract, bool useRTH, const std::string& timePeriod) {$/;"	f	class:EClient
reqHistoricalData	ib/jts/EClient.cpp	/^void EClient::reqHistoricalData(TickerId tickerId, const Contract& contract,$/;"	f	class:EClient
reqHistoricalNews	ib/jts/EClient.cpp	/^void EClient::reqHistoricalNews(int requestId, int conId, const std::string& providerCodes, const std::string& startDateTime, const std::string& endDateTime, int totalResults,$/;"	f	class:EClient
reqHistoricalTicks	ib/jts/EClient.cpp	/^void EClient::reqHistoricalTicks(int reqId, const Contract &contract, const std::string& startDateTime,$/;"	f	class:EClient
reqIds	ib/jts/EClient.cpp	/^void EClient::reqIds( int numIds)$/;"	f	class:EClient
reqManagedAccts	ib/jts/EClient.cpp	/^void EClient::reqManagedAccts()$/;"	f	class:EClient
reqMarketDataType	ib/jts/EClient.cpp	/^void EClient::reqMarketDataType( int marketDataType)$/;"	f	class:EClient
reqMarketRule	ib/jts/EClient.cpp	/^void EClient::reqMarketRule(int marketRuleId) {$/;"	f	class:EClient
reqMatchingSymbols	ib/jts/EClient.cpp	/^void EClient::reqMatchingSymbols(int reqId, const std::string& pattern)$/;"	f	class:EClient
reqMktData	ib/jts/EClient.cpp	/^void EClient::reqMktData(TickerId tickerId, const Contract& contract,$/;"	f	class:EClient
reqMktDepth	ib/jts/EClient.cpp	/^void EClient::reqMktDepth( TickerId tickerId, const Contract& contract, int numRows, const TagValueListSPtr& mktDepthOptions)$/;"	f	class:EClient
reqMktDepthExchanges	ib/jts/EClient.cpp	/^void EClient::reqMktDepthExchanges()$/;"	f	class:EClient
reqNewsArticle	ib/jts/EClient.cpp	/^void EClient::reqNewsArticle(int requestId, const std::string& providerCode, const std::string& articleId, const TagValueListSPtr& newsArticleOptions)$/;"	f	class:EClient
reqNewsBulletins	ib/jts/EClient.cpp	/^void EClient::reqNewsBulletins(bool allMsgs)$/;"	f	class:EClient
reqNewsProviders	ib/jts/EClient.cpp	/^void EClient::reqNewsProviders()$/;"	f	class:EClient
reqOpenOrders	ib/jts/EClient.cpp	/^void EClient::reqOpenOrders()$/;"	f	class:EClient
reqPnL	ib/jts/EClient.cpp	/^void EClient::reqPnL(int reqId, const std::string& account, const std::string& modelCode) {$/;"	f	class:EClient
reqPnLSingle	ib/jts/EClient.cpp	/^void EClient::reqPnLSingle(int reqId, const std::string& account, const std::string& modelCode, int conId) {$/;"	f	class:EClient
reqPositions	ib/jts/EClient.cpp	/^void EClient::reqPositions()$/;"	f	class:EClient
reqPositionsMulti	ib/jts/EClient.cpp	/^void EClient::reqPositionsMulti( int reqId, const std::string& account, const std::string& modelCode)$/;"	f	class:EClient
reqRealTimeBars	ib/jts/EClient.cpp	/^void EClient::reqRealTimeBars(TickerId tickerId, const Contract& contract,$/;"	f	class:EClient
reqScannerParameters	ib/jts/EClient.cpp	/^void EClient::reqScannerParameters()$/;"	f	class:EClient
reqScannerSubscription	ib/jts/EClient.cpp	/^void EClient::reqScannerSubscription(int tickerId,$/;"	f	class:EClient
reqSecDefOptParams	ib/jts/EClient.cpp	/^void EClient::reqSecDefOptParams(int reqId, const std::string& underlyingSymbol, const std::string& futFopExchange, const std::string& underlyingSecType, int underlyingConId)$/;"	f	class:EClient
reqSmartComponents	ib/jts/EClient.cpp	/^void EClient::reqSmartComponents(int reqId, std::string bboExchange) $/;"	f	class:EClient
reqSoftDollarTiers	ib/jts/EClient.cpp	/^void EClient::reqSoftDollarTiers(int reqId)$/;"	f	class:EClient
reqTickByTickData	ib/jts/EClient.cpp	/^void EClient::reqTickByTickData(int reqId, const Contract &contract, const std::string& tickType, int numberOfTicks, bool ignoreSize) {$/;"	f	class:EClient
requestFA	ib/jts/EClient.cpp	/^void EClient::requestFA(faDataType pFaDataType)$/;"	f	class:EClient
required	opentrade/algo.h	/^  bool required = false;$/;"	m	struct:opentrade::ParamDef
required	xquant/algo.h	/^  bool required = false;$/;"	m	struct:opentrade::ParamDef
rerouteMktDataReq	ib/jts/DefaultEWrapper.cpp	/^void DefaultEWrapper::rerouteMktDataReq(int reqId, int conid, const std::string& exchange) { }$/;"	f	class:DefaultEWrapper
rerouteMktDepthReq	ib/jts/DefaultEWrapper.cpp	/^void DefaultEWrapper::rerouteMktDepthReq(int reqId, int conid, const std::string& exchange) { }$/;"	f	class:DefaultEWrapper
reset	ib/jts/shared_ptr.h	/^   void reset(X* ptr = 0) {$/;"	f	class:ibapi::shared_ptr
resp	sim/server/server.cc	/^    FIX::Message resp;$/;"	m	struct:SimServer::OrderTuple	file:
right	ib/jts/Contract.h	/^	std::string	right;$/;"	m	struct:Contract
routes_	opentrade/market_data.h	/^      routes_;$/;"	m	class:opentrade::MarketDataManager
routes_	xquant/market_data.h	/^      routes_;$/;"	m	class:opentrade::MarketDataManager
rule80A	ib/jts/Order.h	/^	std::string rule80A; \/\/ Individual = 'I', Agency = 'A', AgentOtherMember = 'W', IndividualPTIA = 'J', AgencyPTIA = 'U', AgentOtherMemberPTIA = 'M', IndividualPT = 'K', AgencyPT = 'Y', AgentOtherMemberPT = 'N'$/;"	m	struct:Order
runners_	opentrade/algo.h	/^  AlgoRunner* runners_ = nullptr;$/;"	m	class:opentrade::AlgoManager
runners_	xquant/algo.h	/^  AlgoRunner* runners_ = nullptr;$/;"	m	class:opentrade::AlgoManager
scaleAutoReset	ib/jts/Order.h	/^	bool     scaleAutoReset;$/;"	m	struct:Order
scaleInitFillQty	ib/jts/Order.h	/^	int      scaleInitFillQty;$/;"	m	struct:Order
scaleInitLevelSize	ib/jts/Order.h	/^	int      scaleInitLevelSize;$/;"	m	struct:Order
scaleInitPosition	ib/jts/Order.h	/^	int      scaleInitPosition;$/;"	m	struct:Order
scalePriceAdjustInterval	ib/jts/Order.h	/^	int      scalePriceAdjustInterval;$/;"	m	struct:Order
scalePriceAdjustValue	ib/jts/Order.h	/^	double   scalePriceAdjustValue;$/;"	m	struct:Order
scalePriceIncrement	ib/jts/Order.h	/^	double   scalePriceIncrement;$/;"	m	struct:Order
scaleProfitOffset	ib/jts/Order.h	/^	double   scaleProfitOffset;$/;"	m	struct:Order
scaleRandomPercent	ib/jts/Order.h	/^	bool     scaleRandomPercent;$/;"	m	struct:Order
scaleSubsLevelSize	ib/jts/Order.h	/^	int      scaleSubsLevelSize;$/;"	m	struct:Order
scaleTable	ib/jts/Order.h	/^	std::string scaleTable;$/;"	m	struct:Order
scanCode	ib/jts/ScannerSubscription.h	/^    std::string scanCode;$/;"	m	struct:ScannerSubscription
scannerData	ib/jts/DefaultEWrapper.cpp	/^void DefaultEWrapper::scannerData(int reqId, int rank, const ContractDetails& contractDetails,$/;"	f	class:DefaultEWrapper
scannerDataEnd	ib/jts/DefaultEWrapper.cpp	/^void DefaultEWrapper::scannerDataEnd(int reqId) { }$/;"	f	class:DefaultEWrapper
scannerParameters	ib/jts/DefaultEWrapper.cpp	/^void DefaultEWrapper::scannerParameters(const std::string& xml) { }$/;"	f	class:DefaultEWrapper
scannerSettingPairs	ib/jts/ScannerSubscription.h	/^	std::string scannerSettingPairs;$/;"	m	struct:ScannerSubscription
scanner_def	ib/jts/ScannerSubscription.h	6;"	d
sec	opentrade/algo.h	/^  const Security& sec() const { return sec_; }$/;"	f	class:opentrade::Instrument
sec	opentrade/order.h	/^  const Security* sec = nullptr;$/;"	m	struct:opentrade::Contract
sec	xquant/algo.h	/^  const Security& sec() const { return sec_; }$/;"	f	class:opentrade::Instrument
sec	xquant/order.h	/^  const Security* sec = nullptr;$/;"	m	struct:opentrade::Contract
secId	ib/jts/Contract.h	/^	std::string	secId;$/;"	m	struct:Contract
secIdList	ib/jts/Contract.h	/^	TagValueListSPtr secIdList;$/;"	m	struct:ContractDetails
secIdType	ib/jts/Contract.h	/^	std::string	secIdType;		\/\/ CUSIP;SEDOL;ISIN;RIC$/;"	m	struct:Contract
secType	ib/jts/Contract.h	/^	std::string	secType;$/;"	m	struct:Contract
secType	ib/jts/DepthMktDataDescription.h	/^	std::string secType;$/;"	m	struct:DepthMktDataDescription
secType	ib/jts/executioncondition.cpp	/^std::string ExecutionCondition::secType() {$/;"	f	class:ExecutionCondition
secType	ib/jts/executioncondition.cpp	/^void ExecutionCondition::secType(const std::string &secType) {$/;"	f	class:ExecutionCondition
sec_	opentrade/algo.h	/^  const Security& sec_;$/;"	m	class:opentrade::Instrument
sec_	xquant/algo.h	/^  const Security& sec_;$/;"	m	class:opentrade::Instrument
sec_of_name_	sim/server/server.cc	/^      sec_of_name_;$/;"	m	class:SimServer	file:
sector	opentrade/security.h	/^  int sector = 0;$/;"	m	struct:opentrade::Security
sector	xquant/security.h	/^  int sector = 0;$/;"	m	struct:opentrade::Security
securities	opentrade/security.h	/^  const SecurityMap& securities() const { return securities_; }$/;"	f	class:opentrade::SecurityManager
securities	xquant/security.h	/^  const SecurityMap& securities() const { return securities_; }$/;"	f	class:opentrade::SecurityManager
securities_	opentrade/security.h	/^  SecurityMap securities_;$/;"	m	class:opentrade::SecurityManager
securities_	xquant/security.h	/^  SecurityMap securities_;$/;"	m	class:opentrade::SecurityManager
securityDefinitionOptionalParameter	ib/jts/DefaultEWrapper.cpp	/^void DefaultEWrapper::securityDefinitionOptionalParameter(int reqId, const std::string& exchange, int underlyingConId, const std::string& tradingClass,$/;"	f	class:DefaultEWrapper
securityDefinitionOptionalParameterEnd	ib/jts/DefaultEWrapper.cpp	/^void DefaultEWrapper::securityDefinitionOptionalParameterEnd(int reqId) { }$/;"	f	class:DefaultEWrapper
security_methods	opentrade/python.cc	/^namespace security_methods {$/;"	n	namespace:opentrade	file:
security_methods	xquant/python.cc	/^namespace security_methods {$/;"	n	namespace:opentrade	file:
sedol	opentrade/security.h	/^  const char* sedol = "";$/;"	m	struct:opentrade::Security
sedol	xquant/security.h	/^  const char* sedol = "";$/;"	m	struct:opentrade::Security
send	ib/jts/ESocket.cpp	/^int ESocket::send(EMessage *pMsg) {$/;"	f	class:ESocket
send	ib/jts/ESocket.cpp	/^int ESocket::send(const char* buf, size_t sz)$/;"	f	class:ESocket
sendBufferedData	ib/jts/ESocket.cpp	/^int ESocket::sendBufferedData()$/;"	f	class:ESocket
sendConnectRequest	ib/jts/EClient.cpp	/^int EClient::sendConnectRequest()$/;"	f	class:EClient
seq	opentrade/order.h	/^  uint32_t seq = 0;$/;"	m	struct:opentrade::Confirmation
seq	xquant/order.h	/^  uint32_t seq = 0;$/;"	m	struct:opentrade::Confirmation
seq_counter_	opentrade/algo.h	/^  uint32_t seq_counter_ = 0;$/;"	m	class:opentrade::AlgoManager
seq_counter_	opentrade/order.h	/^  uint32_t seq_counter_ = 0;$/;"	m	class:opentrade::GlobalOrderBook
seq_counter_	xquant/algo.h	/^  uint32_t seq_counter_ = 0;$/;"	m	class:opentrade::AlgoManager
seq_counter_	xquant/order.h	/^  uint32_t seq_counter_ = 0;$/;"	m	class:opentrade::GlobalOrderBook
serverVersion	ib/jts/EClient.cpp	/^int EClient::serverVersion()$/;"	f	class:EClient
serverVersion	ib/jts/EClientSocket.cpp	/^void EClientSocket::serverVersion(int version, const char *time) {$/;"	f	class:EClientSocket
serviceDataType	ib/jts/DepthMktDataDescription.h	/^	std::string serviceDataType;$/;"	m	struct:DepthMktDataDescription
service_	opentrade/task_pool.h	/^  boost::asio::io_service service_;$/;"	m	class:opentrade::TaskPool
service_	xquant/task_pool.h	/^  boost::asio::io_service service_;$/;"	m	class:xquant::TaskPool
session	opentrade/position.h	/^  auto session() { return session_; }$/;"	f	class:opentrade::PositionManager
session	xquant/position.h	/^  auto session() { return session_; }$/;"	f	class:opentrade::PositionManager
session_	fix/fix.h	/^  FIX::Session* session_ = nullptr;$/;"	m	class:opentrade::Fix
session_	md/bpipe/bpipe.h	/^  bbg::Session* session_ = nullptr;$/;"	m	class:BPIPE
session_	opentrade/position.h	/^  std::string session_;$/;"	m	class:opentrade::PositionManager
session_	sim/server/server.cc	/^  FIX::Session* session_ = nullptr;$/;"	m	class:SimServer	file:
session_	xquant/position.h	/^  std::string session_;$/;"	m	class:opentrade::PositionManager
setClientId	ib/jts/EClient.cpp	/^void EClient::setClientId( int clientId)$/;"	f	class:EClient
setConnectOptions	ib/jts/EClient.cpp	/^void EClient::setConnectOptions(const std::string& connectOptions)$/;"	f	class:EClient
setExtraAuth	ib/jts/EClient.cpp	/^void EClient::setExtraAuth( bool extraAuth)$/;"	f	class:EClient
setHost	ib/jts/EClient.cpp	/^void EClient::setHost( const std::string& host)$/;"	f	class:EClient
setOptionalCapabilities	ib/jts/EClient.cpp	/^void EClient::setOptionalCapabilities(const std::string& optCapts)$/;"	f	class:EClient
setPort	ib/jts/EClient.cpp	/^void EClient::setPort( int port)$/;"	f	class:EClient
setSeqNum_	fix/filestore.h	/^  void setSeqNum_() {$/;"	f	class:FIX::AsyncFileStore
setServerLogLevel	ib/jts/EClient.cpp	/^void EClient::setServerLogLevel(int logLevel)$/;"	f	class:EClient
set_	fix/filestore.h	/^  void set_(int seq, const std::string& msg) {$/;"	f	class:FIX::AsyncFileStore
set_config	opentrade/adapter.h	/^  void set_config(const StrMap& config) { config_ = config; }$/;"	f	class:opentrade::Adapter
set_config	xquant/adapter.h	/^  void set_config(const StrMap& config) { config_ = config; }$/;"	f	class:opentrade::Adapter
set_name	opentrade/adapter.h	/^  void set_name(const std::string& name) { name_ = name; }$/;"	f	class:opentrade::Adapter
set_name	xquant/adapter.h	/^  void set_name(const std::string& name) { name_ = name; }$/;"	f	class:opentrade::Adapter
set_params	opentrade/account.cc	/^void BrokerAccount::set_params(const std::string& params) {$/;"	f	class:opentrade::BrokerAccount
set_params	xquant/account.cc	/^void BrokerAccount::set_params(const std::string& params) {$/;"	f	class:opentrade::BrokerAccount
set_timeout	opentrade/python.cc	/^static PyObject *set_timeout(PyObject *self, PyObject *args) {$/;"	f	namespace:opentrade::algo_methods
set_timeout	xquant/python.cc	/^static PyObject *set_timeout(PyObject *self, PyObject *args) {$/;"	f	namespace:opentrade::algo_methods
set_timeout_def	opentrade/python.cc	/^static PyMethodDef set_timeout_def = {"set_timeout", set_timeout, METH_VARARGS,$/;"	m	namespace:opentrade::algo_methods	file:
set_timeout_def	xquant/python.cc	/^static PyMethodDef set_timeout_def = {"set_timeout", set_timeout, METH_VARARGS,$/;"	m	namespace:opentrade::algo_methods	file:
settlingFirm	ib/jts/Order.h	/^	std::string settlingFirm;$/;"	m	struct:Order
sha1	opentrade/connection.cc	/^std::string sha1(const std::string& str) {$/;"	f	namespace:opentrade
sha1	xquant/connection.cc	/^std::string sha1(const std::string& str) {$/;"	f	namespace:opentrade
shared_ptr	ib/jts/shared_ptr.h	/^   explicit shared_ptr(X* ptr = 0) : ptr_(ptr) {}$/;"	f	class:ibapi::shared_ptr
shared_ptr	ib/jts/shared_ptr.h	/^   shared_ptr(const shared_ptr<Y>& other)$/;"	f	class:ibapi::shared_ptr
shared_ptr	ib/jts/shared_ptr.h	/^template<typename X> class shared_ptr {$/;"	c	namespace:ibapi
shared_ptr_defs	ib/jts/shared_ptr.h	/^namespace shared_ptr_defs {$/;"	n	namespace:ibapi
shared_ptr_h_INCLUDED	ib/jts/shared_ptr.h	6;"	d
shares	ib/jts/Execution.h	/^	double		shares;$/;"	m	struct:Execution
shortSaleSlot	ib/jts/Contract.h	/^	long		shortSaleSlot; \/\/ 1 = clearing broker, 2 = third party$/;"	m	struct:ComboLeg
shortSaleSlot	ib/jts/Order.h	/^	int      shortSaleSlot; \/\/ 1 if you hold the shares, 2 if they will be delivered from elsewhere.  Only for Action="SSHORT$/;"	m	struct:Order
side	ib/jts/Execution.h	/^	std::string	side;$/;"	m	struct:Execution
side	opentrade/order.h	/^  OrderSide side = kBuy;$/;"	m	struct:opentrade::Contract
side	xquant/order.h	/^  OrderSide side = kBuy;$/;"	m	struct:opentrade::Contract
side_	algo/twap/twap.h	/^  OrderSide side_ = kBuy;$/;"	m	class:opentrade::TWAP
single_pnls_	opentrade/connection.h	/^      single_pnls_;$/;"	m	class:opentrade::Connection
single_pnls_	xquant/connection.h	/^      single_pnls_;$/;"	m	class:opentrade::Connection
size	ib/jts/HistogramEntry.h	/^	long long size;$/;"	m	struct:HistogramEntry
size	ib/jts/HistoricalTick.h	/^    long long size;$/;"	m	struct:HistoricalTick
size	ib/jts/HistoricalTickLast.h	/^    long long size;$/;"	m	struct:HistoricalTickLast
sizeAsk	ib/jts/HistoricalTickBidAsk.h	/^    long long sizeAsk;$/;"	m	struct:HistoricalTickBidAsk
sizeBid	ib/jts/HistoricalTickBidAsk.h	/^    long long sizeBid;$/;"	m	struct:HistoricalTickBidAsk
smartComboRoutingParams	ib/jts/Order.h	/^	TagValueListSPtr smartComboRoutingParams;$/;"	m	struct:Order
smartComponents	ib/jts/DefaultEWrapper.cpp	/^void DefaultEWrapper::smartComponents(int reqId, const SmartComponentsMap& theMap) { }$/;"	f	class:DefaultEWrapper
snprintf	ib/jts/StdAfx.h	14;"	d
softDollarTier	ib/jts/Order.h	/^	SoftDollarTier softDollarTier;$/;"	m	struct:Order
softDollarTiers	ib/jts/DefaultEWrapper.cpp	/^void DefaultEWrapper::softDollarTiers(int reqId, const std::vector<SoftDollarTier> &tiers) { }$/;"	f	class:DefaultEWrapper
sold_qty	opentrade/algo.h	/^  double sold_qty() const { return sold_qty_; }$/;"	f	class:opentrade::Instrument
sold_qty	opentrade/python.cc	/^static PyObject *sold_qty(PyObject *self, PyObject *args) {$/;"	f	namespace:opentrade::instrument_methods
sold_qty	xquant/algo.h	/^  double sold_qty() const { return sold_qty_; }$/;"	f	class:opentrade::Instrument
sold_qty	xquant/python.cc	/^static PyObject *sold_qty(PyObject *self, PyObject *args) {$/;"	f	namespace:opentrade::instrument_methods
sold_qty_	opentrade/algo.h	/^  double sold_qty_ = 0;$/;"	m	class:opentrade::Instrument
sold_qty_	xquant/algo.h	/^  double sold_qty_ = 0;$/;"	m	class:opentrade::Instrument
sold_qty_def	opentrade/python.cc	/^static PyMethodDef sold_qty_def = {"get_sold", sold_qty, METH_VARARGS,$/;"	m	namespace:opentrade::instrument_methods	file:
sold_qty_def	xquant/python.cc	/^static PyMethodDef sold_qty_def = {"get_sold", sold_qty, METH_VARARGS,$/;"	m	namespace:opentrade::instrument_methods	file:
solicited	ib/jts/Order.h	/^	bool     solicited;$/;"	m	struct:Order
spRatingAbove	ib/jts/ScannerSubscription.h	/^    std::string spRatingAbove;$/;"	m	struct:ScannerSubscription
spRatingBelow	ib/jts/ScannerSubscription.h	/^    std::string spRatingBelow;$/;"	m	struct:ScannerSubscription
specialConditions	ib/jts/HistoricalTickLast.h	/^    std::string specialConditions;$/;"	m	struct:HistoricalTickLast
sql_	opentrade/position.h	/^  std::unique_ptr<soci::session> sql_;$/;"	m	class:opentrade::PositionManager
sql_	xquant/position.h	/^  std::unique_ptr<soci::session> sql_;$/;"	m	class:opentrade::PositionManager
src	opentrade/algo.h	/^  DataSrc::IdType src() const { return src_; }$/;"	f	class:opentrade::Instrument
src	opentrade/market_data.h	/^  DataSrc::IdType src() const { return src_; }$/;"	f	class:opentrade::MarketDataAdapter
src	xquant/algo.h	/^  DataSrc::IdType src() const { return src_; }$/;"	f	class:opentrade::Instrument
src	xquant/market_data.h	/^  DataSrc::IdType src() const { return src_; }$/;"	f	class:opentrade::MarketDataAdapter
src_	opentrade/algo.h	/^  const DataSrc::IdType src_;$/;"	m	class:opentrade::Instrument
src_	opentrade/market_data.h	/^  DataSrc::IdType src_ = 0;$/;"	m	class:opentrade::MarketDataAdapter
src_	xquant/algo.h	/^  const DataSrc::IdType src_;$/;"	m	class:opentrade::Instrument
src_	xquant/market_data.h	/^  DataSrc::IdType src_ = 0;$/;"	m	class:opentrade::MarketDataAdapter
start	ib/jts/EReader.cpp	/^void EReader::start() {$/;"	f	class:EReader
startApi	ib/jts/EClient.cpp	/^void EClient::startApi()$/;"	f	class:EClient
startingPrice	ib/jts/Order.h	/^	double   startingPrice;$/;"	m	struct:Order
status	ib/jts/OrderState.h	/^	std::string status;$/;"	m	struct:OrderState
status	opentrade/order.h	/^  OrderStatus status = kUnconfirmedNew;$/;"	m	struct:opentrade::Order
status	opentrade/python.cc	/^static PyObject *status(PyObject *self, PyObject *args) {$/;"	f	namespace:opentrade::order_methods
status	xquant/order.h	/^  OrderStatus status = kUnconfirmedNew;$/;"	m	struct:opentrade::Order
status	xquant/python.cc	/^static PyObject *status(PyObject *self, PyObject *args) {$/;"	f	namespace:opentrade::order_methods
status_def	opentrade/python.cc	/^static PyMethodDef status_def = {"get_status", status, METH_VARARGS,$/;"	m	namespace:opentrade::order_methods	file:
status_def	xquant/python.cc	/^static PyMethodDef status_def = {"get_status", status, METH_VARARGS,$/;"	m	namespace:opentrade::order_methods	file:
stockRangeLower	ib/jts/Order.h	/^	double   stockRangeLower;$/;"	m	struct:Order
stockRangeUpper	ib/jts/Order.h	/^	double   stockRangeUpper;$/;"	m	struct:Order
stockRefPrice	ib/jts/Order.h	/^	double   stockRefPrice;$/;"	m	struct:Order
stockTypeFilter	ib/jts/ScannerSubscription.h	/^	std::string stockTypeFilter;$/;"	m	struct:ScannerSubscription
stop	opentrade/python.cc	/^static PyObject *stop(PyObject *self, PyObject *args) {$/;"	f	namespace:opentrade::algo_methods
stop	xquant/python.cc	/^static PyObject *stop(PyObject *self, PyObject *args) {$/;"	f	namespace:opentrade::algo_methods
stop_def	opentrade/python.cc	/^static PyMethodDef stop_def = {"stop", stop, METH_VARARGS, "stop()"};$/;"	m	namespace:opentrade::algo_methods	file:
stop_def	xquant/python.cc	/^static PyMethodDef stop_def = {"stop", stop, METH_VARARGS, "stop()"};$/;"	m	namespace:opentrade::algo_methods	file:
stop_price	opentrade/order.h	/^  double stop_price = 0;$/;"	m	struct:opentrade::Contract
stop_price	xquant/order.h	/^  double stop_price = 0;$/;"	m	struct:opentrade::Contract
strTriggerMethod	ib/jts/PriceCondition.cpp	/^std::string PriceCondition::strTriggerMethod() {$/;"	f	class:PriceCondition
strand_	opentrade/connection.h	/^  boost::asio::strand strand_;$/;"	m	class:opentrade::Connection
strand_	xquant/connection.h	/^  boost::asio::strand strand_;$/;"	m	class:opentrade::Connection
strands_	opentrade/algo.h	/^  std::vector<boost::asio::strand> strands_;$/;"	m	class:opentrade::AlgoManager
strands_	xquant/algo.h	/^  std::vector<boost::asio::strand> strands_;$/;"	m	class:opentrade::AlgoManager
strike	ib/jts/Contract.h	/^	double		strike;$/;"	m	struct:Contract
strike_price	opentrade/security.h	/^  double strike_price = 0;$/;"	m	struct:opentrade::Security
strike_price	xquant/security.h	/^  double strike_price = 0;$/;"	m	struct:opentrade::Security
sub_account	opentrade/order.h	/^  const SubAccount* sub_account = nullptr;$/;"	m	struct:opentrade::Contract
sub_account	xquant/order.h	/^  const SubAccount* sub_account = nullptr;$/;"	m	struct:opentrade::Contract
sub_account_id	opentrade/account.h	/^  SubAccount::IdType sub_account_id = 0;$/;"	m	struct:opentrade::SubAccountBrokerAccountMap
sub_account_id	opentrade/account.h	/^  SubAccount::IdType sub_account_id = 0;$/;"	m	struct:opentrade::UserSubAccountMap
sub_account_id	xquant/account.h	/^  SubAccount::IdType sub_account_id = 0;$/;"	m	struct:opentrade::SubAccountBrokerAccountMap
sub_account_id	xquant/account.h	/^  SubAccount::IdType sub_account_id = 0;$/;"	m	struct:opentrade::UserSubAccountMap
sub_account_id	xquant/account1.h	/^  SubAccount::IdType sub_account_id = 0;$/;"	m	struct:opentrade::SubAccountBrokerAccountMap
sub_account_id	xquant/account1.h	/^  SubAccount::IdType sub_account_id = 0;$/;"	m	struct:opentrade::UserSubAccountMap
sub_account_of_name_	opentrade/account.h	/^  tbb::concurrent_unordered_map<std::string, SubAccount*> sub_account_of_name_;$/;"	m	class:opentrade::AccountManager
sub_account_of_name_	xquant/account.h	/^  tbb::concurrent_unordered_map<std::string, SubAccount*> sub_account_of_name_;$/;"	m	class:opentrade::AccountManager
sub_account_of_name_	xquant/account1.h	/^  tbb::concurrent_unordered_map<std::string, SubAccount*> sub_account_of_name_;$/;"	m	class:opentrade::AccountManager
sub_accounts	opentrade/account.h	/^  const SubAccountMap* sub_accounts = new SubAccountMap();$/;"	m	struct:opentrade::User
sub_accounts	xquant/account.h	/^  const SubAccountMap* sub_accounts = new SubAccountMap();$/;"	m	struct:opentrade::User
sub_accounts	xquant/account1.h	/^  const SubAccountMap* sub_accounts = new SubAccountMap();$/;"	m	struct:opentrade::User
sub_accounts_	opentrade/account.h	/^  tbb::concurrent_unordered_map<SubAccount::IdType, SubAccount*> sub_accounts_;$/;"	m	class:opentrade::AccountManager
sub_accounts_	xquant/account.h	/^  tbb::concurrent_unordered_map<SubAccount::IdType, SubAccount*> sub_accounts_;$/;"	m	class:opentrade::AccountManager
sub_accounts_	xquant/account1.h	/^  tbb::concurrent_unordered_map<SubAccount::IdType, SubAccount*> sub_accounts_;$/;"	m	class:opentrade::AccountManager
sub_industry	opentrade/security.h	/^  int sub_industry = 0;$/;"	m	struct:opentrade::Security
sub_industry	xquant/security.h	/^  int sub_industry = 0;$/;"	m	struct:opentrade::Security
sub_pnl_	opentrade/connection.h	/^  bool sub_pnl_ = false;$/;"	m	class:opentrade::Connection
sub_pnl_	xquant/connection.h	/^  bool sub_pnl_ = false;$/;"	m	class:opentrade::Connection
sub_positions_	opentrade/position.h	/^      sub_positions_;$/;"	m	class:opentrade::PositionManager
sub_positions_	xquant/position.h	/^      sub_positions_;$/;"	m	class:opentrade::PositionManager
subcategory	ib/jts/Contract.h	/^	std::string	subcategory;$/;"	m	struct:ContractDetails
subs_	ib/ib.h	/^  tbb::concurrent_unordered_set<opentrade::Security::IdType> subs_;$/;"	m	class:IB
subs_	md/bpipe/bpipe.h	/^  tbb::concurrent_unordered_set<opentrade::Security::IdType> subs_;$/;"	m	class:BPIPE
subs_	opentrade/connection.h	/^  std::unordered_map<Security::IdType, std::pair<MarketData, uint32_t>> subs_;$/;"	m	class:opentrade::Connection
subs_	sim/server/server.cc	/^  tbb::concurrent_unordered_set<Security::IdType> subs_;$/;"	m	class:SimServer	file:
subs_	xquant/connection.h	/^  std::unordered_map<Security::IdType, std::pair<MarketData, uint32_t>> subs_;$/;"	m	class:opentrade::Connection
subscribe	opentrade/python.cc	/^static PyObject *subscribe(PyObject *self, PyObject *args) {$/;"	f	namespace:opentrade::algo_methods
subscribe	xquant/python.cc	/^static PyObject *subscribe(PyObject *self, PyObject *args) {$/;"	f	namespace:opentrade::algo_methods
subscribeToGroupEvents	ib/jts/EClient.cpp	/^void EClient::subscribeToGroupEvents( int reqId, int groupId)$/;"	f	class:EClient
subscribe_def	opentrade/python.cc	/^static PyMethodDef subscribe_def = {"subscribe", subscribe, METH_VARARGS,$/;"	m	namespace:opentrade::algo_methods	file:
subscribe_def	xquant/python.cc	/^static PyMethodDef subscribe_def = {"subscribe", subscribe, METH_VARARGS,$/;"	m	namespace:opentrade::algo_methods	file:
sweepToFill	ib/jts/Order.h	/^	bool     sweepToFill;$/;"	m	struct:Order
symbol	ib/jts/Contract.h	/^	std::string	symbol;$/;"	m	struct:Contract
symbol	ib/jts/executioncondition.cpp	/^std::string ExecutionCondition::symbol() {$/;"	f	class:ExecutionCondition
symbol	ib/jts/executioncondition.cpp	/^void ExecutionCondition::symbol(const std::string &symbol) {$/;"	f	class:ExecutionCondition
symbol	opentrade/security.h	/^  const char* symbol = "";$/;"	m	struct:opentrade::Security
symbol	xquant/security.h	/^  const char* symbol = "";$/;"	m	struct:opentrade::Security
symbolSamples	ib/jts/DefaultEWrapper.cpp	/^void DefaultEWrapper::symbolSamples(int reqId, const std::vector<ContractDescription> &contractDescriptions) { }$/;"	f	class:DefaultEWrapper
tag	ib/jts/TagValue.h	/^	std::string tag;$/;"	m	struct:TagValue
tagvalue_def	ib/jts/TagValue.h	6;"	d
text	opentrade/order.h	/^  std::string text;$/;"	m	struct:opentrade::Confirmation
text	xquant/order.h	/^  std::string text;$/;"	m	struct:opentrade::Confirmation
threaded_socket_acceptor_	sim/server/server.cc	/^  std::unique_ptr<FIX::ThreadedSocketAcceptor> threaded_socket_acceptor_;$/;"	m	class:SimServer	file:
threaded_socket_initiator_	fix/fix.h	/^  std::unique_ptr<FIX::ThreadedSocketInitiator> threaded_socket_initiator_;$/;"	m	class:opentrade::Fix
threads_	opentrade/algo.h	/^  std::vector<std::thread> threads_;$/;"	m	class:opentrade::AlgoManager
threads_	opentrade/task_pool.h	/^  std::vector<std::thread> threads_;$/;"	m	class:opentrade::TaskPool
threads_	xquant/algo.h	/^  std::vector<std::thread> threads_;$/;"	m	class:opentrade::AlgoManager
threads_	xquant/task_pool.h	/^  std::vector<std::thread> threads_;$/;"	m	class:xquant::TaskPool
throttle_in_sec	opentrade/account.h	/^  Throttle throttle_in_sec;$/;"	m	struct:opentrade::AccountBase
throttle_in_sec	xquant/account.h	/^  Throttle throttle_in_sec;$/;"	m	struct:opentrade::AccountBase
throttle_in_sec	xquant/account1.h	/^  Throttle throttle_in_sec;$/;"	m	struct:opentrade::AccountBase
throttle_per_security_in_sec	opentrade/account.h	/^      throttle_per_security_in_sec;$/;"	m	struct:opentrade::AccountBase
throttle_per_security_in_sec	xquant/account.h	/^      throttle_per_security_in_sec;$/;"	m	struct:opentrade::AccountBase
throttle_per_security_in_sec	xquant/account1.h	/^      throttle_per_security_in_sec;$/;"	m	struct:opentrade::AccountBase
throw	fix/filelog.h	5;"	d
throw	fix/filelog.h	8;"	d
throw	fix/filestore.h	5;"	d
throw	fix/filestore.h	8;"	d
throw	fix/fix.h	12;"	d
throw	fix/fix.h	7;"	d
throw	sim/client/client.cc	14;"	d	file:
throw	sim/client/client.cc	4;"	d	file:
throw	sim/server/server.cc	13;"	d	file:
throw	sim/server/server.cc	17;"	d	file:
tickByTickAllLast	ib/jts/DefaultEWrapper.cpp	/^void DefaultEWrapper::tickByTickAllLast(int reqId, int tickType, time_t time, double price, int size, const TickAttrib& attribs, const std::string& exchange, const std::string& specialConditions) { }$/;"	f	class:DefaultEWrapper
tickByTickBidAsk	ib/jts/DefaultEWrapper.cpp	/^void DefaultEWrapper::tickByTickBidAsk(int reqId, time_t time, double bidPrice, double askPrice, int bidSize, int askSize, const TickAttrib& attribs) { }$/;"	f	class:DefaultEWrapper
tickByTickMidPoint	ib/jts/DefaultEWrapper.cpp	/^void DefaultEWrapper::tickByTickMidPoint(int reqId, time_t time, double midPoint) { }$/;"	f	class:DefaultEWrapper
tickEFP	ib/jts/DefaultEWrapper.cpp	/^void DefaultEWrapper::tickEFP(TickerId tickerId, TickType tickType, double basisPoints, const std::string& formattedBasisPoints,$/;"	f	class:DefaultEWrapper
tickGeneric	ib/jts/DefaultEWrapper.cpp	/^void DefaultEWrapper::tickGeneric(TickerId tickerId, TickType tickType, double value) { }$/;"	f	class:DefaultEWrapper
tickNews	ib/jts/DefaultEWrapper.cpp	/^void DefaultEWrapper::tickNews(int tickerId, time_t timeStamp, const std::string& providerCode, const std::string& articleId, const std::string& headline, const std::string& extraData) { }$/;"	f	class:DefaultEWrapper
tickOptionComputation	ib/jts/DefaultEWrapper.cpp	/^void DefaultEWrapper::tickOptionComputation( TickerId tickerId, TickType tickType, double impliedVol, double delta,$/;"	f	class:DefaultEWrapper
tickPrice	ib/ib.cc	/^void IB::tickPrice(TickerId tickerId, TickType field, double price,$/;"	f	class:IB
tickPrice	ib/jts/DefaultEWrapper.cpp	/^void DefaultEWrapper::tickPrice( TickerId tickerId, TickType field, double price, const TickAttrib& attribs) { }$/;"	f	class:DefaultEWrapper
tickReqParams	ib/jts/DefaultEWrapper.cpp	/^void DefaultEWrapper::tickReqParams(int tickerId, double minTick, const std::string& bboExchange, int snapshotPermissions) { }$/;"	f	class:DefaultEWrapper
tickSize	ib/ib.cc	/^void IB::tickSize(TickerId tickerId, TickType field, int size) {$/;"	f	class:IB
tickSize	ib/jts/DefaultEWrapper.cpp	/^void DefaultEWrapper::tickSize( TickerId tickerId, TickType field, int size) { }$/;"	f	class:DefaultEWrapper
tickSnapshotEnd	ib/jts/DefaultEWrapper.cpp	/^void DefaultEWrapper::tickSnapshotEnd( int reqId) { }$/;"	f	class:DefaultEWrapper
tickString	ib/jts/DefaultEWrapper.cpp	/^void DefaultEWrapper::tickString(TickerId tickerId, TickType tickType, const std::string& value) { }$/;"	f	class:DefaultEWrapper
tick_size	opentrade/security.h	/^  double tick_size = 0;$/;"	m	struct:opentrade::Security
tick_size	xquant/security.h	/^  double tick_size = 0;$/;"	m	struct:opentrade::Security
tick_size_table	opentrade/security.h	/^  const TickSizeTable* tick_size_table = nullptr;$/;"	m	struct:opentrade::Exchange
tick_size_table	xquant/security.h	/^  const TickSizeTable* tick_size_table = nullptr;$/;"	m	struct:opentrade::Exchange
tickattrib_h__INCLUDED	ib/jts/TickAttrib.h	6;"	d
ticker_counter_	md/bpipe/bpipe.h	/^  std::atomic<int64_t> ticker_counter_ = 0;$/;"	m	class:BPIPE
ticker_id_counter_	ib/ib.h	/^  TickerId ticker_id_counter_ = 0;$/;"	m	class:IB
tickers_	ib/ib.h	/^  tbb::concurrent_unordered_map<TickerId, const opentrade::Security*> tickers_;$/;"	m	class:IB
tickers_	md/bpipe/bpipe.h	/^  tbb::concurrent_unordered_map<int64_t, const opentrade::Security*> tickers_;$/;"	m	class:BPIPE
tid_	opentrade/algo.h	/^  std::thread::id tid_;$/;"	m	class:opentrade::AlgoRunner
tid_	xquant/algo.h	/^  std::thread::id tid_;$/;"	m	class:opentrade::AlgoRunner
tif	ib/jts/Order.h	/^	std::string tif;           \/\/ "Time in Force" - DAY, GTC, etc.$/;"	m	struct:Order
tif	opentrade/order.h	/^  TimeInForce tif = kDay;$/;"	m	struct:opentrade::Contract
tif	xquant/order.h	/^  TimeInForce tif = kDay;$/;"	m	struct:opentrade::Contract
time	ib/jts/Execution.h	/^	std::string	time;$/;"	m	struct:Execution
time	ib/jts/HistoricalTick.h	/^    long long time;$/;"	m	struct:HistoricalTick
time	ib/jts/HistoricalTickBidAsk.h	/^    long long time;$/;"	m	struct:HistoricalTickBidAsk
time	ib/jts/HistoricalTickLast.h	/^    long long time;$/;"	m	struct:HistoricalTickLast
time	ib/jts/TimeCondition.cpp	/^std::string TimeCondition::time() {$/;"	f	class:TimeCondition
time	ib/jts/TimeCondition.cpp	/^void TimeCondition::time(const std::string & time) {$/;"	f	class:TimeCondition
time	ib/jts/bar.h	/^	std::string time;$/;"	m	struct:Bar
timeZoneId	ib/jts/Contract.h	/^	std::string	timeZoneId;$/;"	m	struct:ContractDetails
timer	algo/test.py	/^def timer(self):$/;"	f
timer_	opentrade/connection.h	/^  boost::asio::deadline_timer timer_;$/;"	m	class:opentrade::Connection
timer_	xquant/connection.h	/^  boost::asio::deadline_timer timer_;$/;"	m	class:opentrade::Connection
tm	opentrade/common.h	/^  int tm = 0;$/;"	m	struct:opentrade::Throttle
tm	opentrade/market_data.h	/^  time_t tm = 0;$/;"	m	struct:opentrade::MarketData
tm	opentrade/order.h	/^  int64_t tm = 0;$/;"	m	struct:opentrade::Order
tm	opentrade/position.h	/^  time_t tm = 0;$/;"	m	struct:opentrade::Bod
tm	xquant/common.h	/^  int tm = 0;$/;"	m	struct:xquant::Throttle
tm	xquant/common1.h	/^  int tm = 0;$/;"	m	struct:opentrade::Throttle
tm	xquant/market_data.h	/^  time_t tm = 0;$/;"	m	struct:opentrade::MarketData
tm	xquant/order.h	/^  int64_t tm = 0;$/;"	m	struct:opentrade::Order
tm	xquant/position.h	/^  time_t tm = 0;$/;"	m	struct:opentrade::Bod
toString	ib/jts/ContractCondition.cpp	/^std::string ContractCondition::toString() {$/;"	f	class:ContractCondition
toString	ib/jts/MarginCondition.cpp	/^std::string MarginCondition::toString() {$/;"	f	class:MarginCondition
toString	ib/jts/OperatorCondition.cpp	/^std::string OperatorCondition::toString() {$/;"	f	class:OperatorCondition
toString	ib/jts/OrderCondition.cpp	/^std::string OrderCondition::toString() {$/;"	f	class:OrderCondition
toString	ib/jts/PriceCondition.cpp	/^std::string PriceCondition::toString() {$/;"	f	class:PriceCondition
toString	ib/jts/TimeCondition.cpp	/^std::string TimeCondition::toString() {$/;"	f	class:TimeCondition
toString	ib/jts/executioncondition.cpp	/^std::string ExecutionCondition::toString() {$/;"	f	class:ExecutionCondition
token	opentrade/algo.h	/^  const std::string& token() const { return token_; }$/;"	f	class:opentrade::Algo
token	xquant/algo.h	/^  const std::string& token() const { return token_; }$/;"	f	class:opentrade::Algo
token_	opentrade/algo.h	/^  std::string token_;$/;"	m	class:opentrade::Algo
token_	xquant/algo.h	/^  std::string token_;$/;"	m	class:opentrade::Algo
totalQuantity	ib/jts/Order.h	/^	double     totalQuantity;$/;"	m	struct:Order
total_bought	opentrade/common.h	/^  double total_bought = 0;$/;"	m	struct:opentrade::PositionValue
total_bought	xquant/common.h	/^  double total_bought = 0;$/;"	m	struct:xquant::PositionValue
total_bought	xquant/common1.h	/^  double total_bought = 0;$/;"	m	struct:opentrade::PositionValue
total_bought_qty	opentrade/position.h	/^  double total_bought_qty = 0;$/;"	m	struct:opentrade::Position
total_bought_qty	xquant/position.h	/^  double total_bought_qty = 0;$/;"	m	struct:opentrade::Position
total_exposure	opentrade/algo.h	/^  double total_exposure() const {$/;"	f	class:opentrade::Instrument
total_exposure	opentrade/python.cc	/^static PyObject *total_exposure(PyObject *self, PyObject *args) {$/;"	f	namespace:opentrade::instrument_methods
total_exposure	xquant/algo.h	/^  double total_exposure() const {$/;"	f	class:opentrade::Instrument
total_exposure	xquant/python.cc	/^static PyObject *total_exposure(PyObject *self, PyObject *args) {$/;"	f	namespace:opentrade::instrument_methods
total_exposure_def	opentrade/python.cc	/^static PyMethodDef total_exposure_def = {"get_total_exposure", total_exposure,$/;"	m	namespace:opentrade::instrument_methods	file:
total_exposure_def	xquant/python.cc	/^static PyMethodDef total_exposure_def = {"get_total_exposure", total_exposure,$/;"	m	namespace:opentrade::instrument_methods	file:
total_outstanding_buy	opentrade/common.h	/^  double total_outstanding_buy = 0;$/;"	m	struct:opentrade::PositionValue
total_outstanding_buy	xquant/common.h	/^  double total_outstanding_buy = 0;$/;"	m	struct:xquant::PositionValue
total_outstanding_buy	xquant/common1.h	/^  double total_outstanding_buy = 0;$/;"	m	struct:opentrade::PositionValue
total_outstanding_buy_qty	opentrade/position.h	/^  double total_outstanding_buy_qty = 0;$/;"	m	struct:opentrade::Position
total_outstanding_buy_qty	xquant/position.h	/^  double total_outstanding_buy_qty = 0;$/;"	m	struct:opentrade::Position
total_outstanding_qty	opentrade/algo.h	/^  double total_outstanding_qty() const {$/;"	f	class:opentrade::Instrument
total_outstanding_qty	opentrade/python.cc	/^static PyObject *total_outstanding_qty(PyObject *self, PyObject *args) {$/;"	f	namespace:opentrade::instrument_methods
total_outstanding_qty	xquant/algo.h	/^  double total_outstanding_qty() const {$/;"	f	class:opentrade::Instrument
total_outstanding_qty	xquant/python.cc	/^static PyObject *total_outstanding_qty(PyObject *self, PyObject *args) {$/;"	f	namespace:opentrade::instrument_methods
total_outstanding_qty_def	opentrade/python.cc	/^static PyMethodDef total_outstanding_qty_def = {$/;"	m	namespace:opentrade::instrument_methods	file:
total_outstanding_qty_def	xquant/python.cc	/^static PyMethodDef total_outstanding_qty_def = {$/;"	m	namespace:opentrade::instrument_methods	file:
total_outstanding_sell	opentrade/common.h	/^  double total_outstanding_sell = 0;$/;"	m	struct:opentrade::PositionValue
total_outstanding_sell	xquant/common.h	/^  double total_outstanding_sell = 0;$/;"	m	struct:xquant::PositionValue
total_outstanding_sell	xquant/common1.h	/^  double total_outstanding_sell = 0;$/;"	m	struct:opentrade::PositionValue
total_outstanding_sell_qty	opentrade/position.h	/^  double total_outstanding_sell_qty = 0;$/;"	m	struct:opentrade::Position
total_outstanding_sell_qty	xquant/position.h	/^  double total_outstanding_sell_qty = 0;$/;"	m	struct:opentrade::Position
total_qty	opentrade/algo.h	/^  double total_qty() const { return bought_qty_ + sold_qty_; }$/;"	f	class:opentrade::Instrument
total_qty	opentrade/python.cc	/^static PyObject *total_qty(PyObject *self, PyObject *args) {$/;"	f	namespace:opentrade::instrument_methods
total_qty	xquant/algo.h	/^  double total_qty() const { return bought_qty_ + sold_qty_; }$/;"	f	class:opentrade::Instrument
total_qty	xquant/python.cc	/^static PyObject *total_qty(PyObject *self, PyObject *args) {$/;"	f	namespace:opentrade::instrument_methods
total_qty_def	opentrade/python.cc	/^static PyMethodDef total_qty_def = {"get_total_qty", total_qty, METH_VARARGS,$/;"	m	namespace:opentrade::instrument_methods	file:
total_qty_def	xquant/python.cc	/^static PyMethodDef total_qty_def = {"get_total_qty", total_qty, METH_VARARGS,$/;"	m	namespace:opentrade::instrument_methods	file:
total_sold	opentrade/common.h	/^  double total_sold = 0;$/;"	m	struct:opentrade::PositionValue
total_sold	xquant/common.h	/^  double total_sold = 0;$/;"	m	struct:xquant::PositionValue
total_sold	xquant/common1.h	/^  double total_sold = 0;$/;"	m	struct:opentrade::PositionValue
total_sold_qty	opentrade/position.h	/^  double total_sold_qty = 0;$/;"	m	struct:opentrade::Position
total_sold_qty	xquant/position.h	/^  double total_sold_qty = 0;$/;"	m	struct:opentrade::Position
total_turnover	opentrade/common.h	/^  double total_turnover = 0;$/;"	m	struct:opentrade::Limits
total_turnover	xquant/common.h	/^  double total_turnover = 0;$/;"	m	struct:xquant::Limits
total_turnover	xquant/common1.h	/^  double total_turnover = 0;$/;"	m	struct:opentrade::Limits
total_value	opentrade/common.h	/^  double total_value = 0;$/;"	m	struct:opentrade::Limits
total_value	xquant/common.h	/^  double total_value = 0;$/;"	m	struct:xquant::Limits
total_value	xquant/common1.h	/^  double total_value = 0;$/;"	m	struct:opentrade::Limits
tp_	fix/fix.h	/^  TaskPool tp_;$/;"	m	class:opentrade::Fix
tp_	ib/ib.h	/^  opentrade::TaskPool tp_;$/;"	m	class:IB
tp_	md/bpipe/bpipe.h	/^  opentrade::TaskPool tp_;$/;"	m	class:BPIPE
tp_	sim/server/server.cc	/^  opentrade::TaskPool tp_;$/;"	m	class:SimServer	file:
trade	opentrade/market_data.h	/^  Trade trade;$/;"	m	struct:opentrade::MarketData
trade	xquant/market_data.h	/^  Trade trade;$/;"	m	struct:opentrade::MarketData
trade_end	opentrade/security.h	/^  int trade_end = 0;$/;"	m	struct:opentrade::Exchange
trade_end	xquant/security.h	/^  int trade_end = 0;$/;"	m	struct:opentrade::Exchange
trade_start	opentrade/security.h	/^  int trade_start = 0;  \/\/ seconds since midnight$/;"	m	struct:opentrade::Exchange
trade_start	xquant/security.h	/^  int trade_start = 0;  \/\/ seconds since midnight$/;"	m	struct:opentrade::Exchange
tradingClass	ib/jts/Contract.h	/^	std::string	tradingClass;$/;"	m	struct:Contract
tradingHours	ib/jts/Contract.h	/^	std::string	tradingHours;$/;"	m	struct:ContractDetails
trailStopPrice	ib/jts/Order.h	/^	double   trailStopPrice; \/\/ TRAILLIMIT orders only$/;"	m	struct:Order
trailingPercent	ib/jts/Order.h	/^	double   trailingPercent;$/;"	m	struct:Order
transact_time_	fix/fix.h	/^  int64_t transact_time_ = 0;$/;"	m	class:opentrade::Fix
transaction_time	opentrade/order.h	/^  int64_t transaction_time = 0;  \/\/ utc in microseconds$/;"	m	struct:opentrade::Confirmation
transaction_time	xquant/order.h	/^  int64_t transaction_time = 0;  \/\/ utc in microseconds$/;"	m	struct:opentrade::Confirmation
transmit	ib/jts/Order.h	/^	bool     transmit;      \/\/ if false, order will be created but not transmited$/;"	m	struct:Order
transport_	opentrade/connection.h	/^  Transport::Ptr transport_;$/;"	m	class:opentrade::Connection
transport_	xquant/connection.h	/^  Transport::Ptr transport_;$/;"	m	class:opentrade::Connection
triggerMethod	ib/jts/Order.h	/^	int      triggerMethod; \/\/ 0=Default, 1=Double_Bid_Ask, 2=Last, 3=Double_Last, 4=Bid_Ask, 7=Last_or_Bid_Ask, 8=Mid-point$/;"	m	struct:Order
triggerMethod	ib/jts/PriceCondition.cpp	/^PriceCondition::Method PriceCondition::triggerMethod() {$/;"	f	class:PriceCondition
triggerMethod	ib/jts/PriceCondition.cpp	/^void PriceCondition::triggerMethod(Method triggerMethod) {$/;"	f	class:PriceCondition
triggerPrice	ib/jts/Order.h	/^	double triggerPrice;$/;"	m	struct:Order
tswsocketclienterrors_def	ib/jts/TwsSocketClientErrors.h	6;"	d
turnover	opentrade/common.h	/^  double turnover = 0;$/;"	m	struct:opentrade::Limits
turnover	xquant/common.h	/^  double turnover = 0;$/;"	m	struct:xquant::Limits
turnover	xquant/common1.h	/^  double turnover = 0;$/;"	m	struct:opentrade::Limits
type	ib/jts/OrderCondition.cpp	/^OrderCondition::OrderConditionType OrderCondition::type() { return m_type; }$/;"	f	class:OrderCondition
type	opentrade/order.h	/^  OrderType type = kLimit;$/;"	m	struct:opentrade::Contract
type	opentrade/security.h	/^  const char* type = "";$/;"	m	struct:opentrade::Security
type	xquant/order.h	/^  OrderType type = kLimit;$/;"	m	struct:opentrade::Contract
type	xquant/security.h	/^  const char* type = "";$/;"	m	struct:opentrade::Security
tz	opentrade/security.h	/^  const char* tz = "";$/;"	m	struct:opentrade::Exchange
tz	xquant/security.h	/^  const char* tz = "";$/;"	m	struct:opentrade::Exchange
underConId	ib/jts/Contract.h	/^	int			underConId;$/;"	m	struct:ContractDetails
underSecType	ib/jts/Contract.h	/^	std::string	underSecType;$/;"	m	struct:ContractDetails
underSymbol	ib/jts/Contract.h	/^	std::string	underSymbol;$/;"	m	struct:ContractDetails
underlying	opentrade/security.h	/^  const Security* underlying = nullptr;$/;"	m	struct:opentrade::Security
underlying	xquant/security.h	/^  const Security* underlying = nullptr;$/;"	m	struct:opentrade::Security
unrealized	opentrade/position.h	/^    double unrealized = 0;$/;"	m	struct:opentrade::PositionManager::Pnl
unrealized	xquant/position.h	/^    double unrealized = 0;$/;"	m	struct:opentrade::PositionManager::Pnl
unrealized_pnl	opentrade/position.h	/^  double unrealized_pnl = 0;$/;"	m	struct:opentrade::Position
unrealized_pnl	xquant/position.h	/^  double unrealized_pnl = 0;$/;"	m	struct:opentrade::Position
unreported	ib/jts/TickAttrib.h	/^	bool unreported;$/;"	m	struct:TickAttrib
unsubscribeFromGroupEvents	ib/jts/EClient.cpp	/^void EClient::unsubscribeFromGroupEvents( int reqId)$/;"	f	class:EClient
updateAccountTime	ib/jts/DefaultEWrapper.cpp	/^void DefaultEWrapper::updateAccountTime(const std::string& timeStamp) { }$/;"	f	class:DefaultEWrapper
updateAccountValue	ib/jts/DefaultEWrapper.cpp	/^void DefaultEWrapper::updateAccountValue(const std::string& key, const std::string& val,$/;"	f	class:DefaultEWrapper
updateDisplayGroup	ib/jts/EClient.cpp	/^void EClient::updateDisplayGroup( int reqId, const std::string& contractInfo)$/;"	f	class:EClient
updateMktDepth	ib/jts/DefaultEWrapper.cpp	/^void DefaultEWrapper::updateMktDepth(TickerId id, int position, int operation, int side,$/;"	f	class:DefaultEWrapper
updateMktDepthL2	ib/jts/DefaultEWrapper.cpp	/^void DefaultEWrapper::updateMktDepthL2(TickerId id, int position, const std::string& marketMaker, int operation,$/;"	f	class:DefaultEWrapper
updateNewsBulletin	ib/jts/DefaultEWrapper.cpp	/^void DefaultEWrapper::updateNewsBulletin(int msgId, int msgType, const std::string& newsMessage, const std::string& originExch) { }$/;"	f	class:DefaultEWrapper
updatePortfolio	ib/jts/DefaultEWrapper.cpp	/^void DefaultEWrapper::updatePortfolio( const Contract& contract, double position,$/;"	f	class:DefaultEWrapper
upper_bound	opentrade/security.h	/^    double upper_bound = 0;$/;"	m	struct:opentrade::Exchange::TickSizeTuple
upper_bound	xquant/security.h	/^    double upper_bound = 0;$/;"	m	struct:opentrade::Exchange::TickSizeTuple
use_	ib/jts/shared_ptr.h	/^   Use use_;$/;"	m	class:ibapi::shared_ptr
used_ids_	sim/server/server.cc	/^  tbb::concurrent_unordered_set<std::string> used_ids_;$/;"	m	class:SimServer	file:
user	opentrade/algo.h	/^  const User& user() const { return *user_; }$/;"	f	class:opentrade::Algo
user	opentrade/order.h	/^  const User* user = nullptr;$/;"	m	struct:opentrade::Order
user	xquant/algo.h	/^  const User& user() const { return *user_; }$/;"	f	class:opentrade::Algo
user	xquant/order.h	/^  const User* user = nullptr;$/;"	m	struct:opentrade::Order
user_	opentrade/algo.h	/^  const User* user_ = nullptr;$/;"	m	class:opentrade::Algo
user_	opentrade/connection.h	/^  const User* user_ = nullptr;$/;"	m	class:opentrade::Connection
user_	xquant/algo.h	/^  const User* user_ = nullptr;$/;"	m	class:opentrade::Algo
user_	xquant/connection.h	/^  const User* user_ = nullptr;$/;"	m	class:opentrade::Connection
user_id	opentrade/account.h	/^  User::IdType user_id = 0;$/;"	m	struct:opentrade::UserSubAccountMap
user_id	xquant/account.h	/^  User::IdType user_id = 0;$/;"	m	struct:opentrade::UserSubAccountMap
user_id	xquant/account1.h	/^  User::IdType user_id = 0;$/;"	m	struct:opentrade::UserSubAccountMap
user_of_name_	opentrade/account.h	/^  tbb::concurrent_unordered_map<std::string, User*> user_of_name_;$/;"	m	class:opentrade::AccountManager
user_of_name_	xquant/account.h	/^  tbb::concurrent_unordered_map<std::string, User*> user_of_name_;$/;"	m	class:opentrade::AccountManager
user_of_name_	xquant/account1.h	/^  tbb::concurrent_unordered_map<std::string, User*> user_of_name_;$/;"	m	class:opentrade::AccountManager
user_positions_	opentrade/position.h	/^      user_positions_;$/;"	m	class:opentrade::PositionManager
user_positions_	xquant/position.h	/^      user_positions_;$/;"	m	class:opentrade::PositionManager
users_	opentrade/account.h	/^  tbb::concurrent_unordered_map<User::IdType, User*> users_;$/;"	m	class:opentrade::AccountManager
users_	xquant/account.h	/^  tbb::concurrent_unordered_map<User::IdType, User*> users_;$/;"	m	class:opentrade::AccountManager
users_	xquant/account1.h	/^  tbb::concurrent_unordered_map<User::IdType, User*> users_;$/;"	m	class:opentrade::AccountManager
usingV100Plus	ib/jts/EClient.cpp	/^bool EClient::usingV100Plus() {$/;"	f	class:EClient
utc_time_offset	opentrade/security.h	/^  int utc_time_offset = 0;$/;"	m	struct:opentrade::Exchange
utc_time_offset	xquant/security.h	/^  int utc_time_offset = 0;$/;"	m	struct:opentrade::Exchange
val	ib/jts/SoftDollarTier.cpp	/^std::string SoftDollarTier::val() const$/;"	f	class:SoftDollarTier
validExchanges	ib/jts/Contract.h	/^	std::string	validExchanges;$/;"	m	struct:ContractDetails
value	ib/jts/TagValue.h	/^	std::string value;$/;"	m	struct:TagValue
value	opentrade/common.h	/^  double value = 0;  \/\/ per security$/;"	m	struct:opentrade::Limits
value	opentrade/security.h	/^    double value = 0;$/;"	m	struct:opentrade::Exchange::TickSizeTuple
value	xquant/common.h	/^  double value = 0;                  \/\/ per security$/;"	m	struct:xquant::Limits
value	xquant/common1.h	/^  double value = 0;  \/\/ per security$/;"	m	struct:opentrade::Limits
value	xquant/security.h	/^    double value = 0;$/;"	m	struct:opentrade::Exchange::TickSizeTuple
valueFromString	ib/jts/MarginCondition.cpp	/^void MarginCondition::valueFromString(const std::string & v) {$/;"	f	class:MarginCondition
valueFromString	ib/jts/PercentChangeCondition.cpp	/^void PercentChangeCondition::valueFromString(const std::string & v) {$/;"	f	class:PercentChangeCondition
valueFromString	ib/jts/PriceCondition.cpp	/^void PriceCondition::valueFromString(const std::string & v) {$/;"	f	class:PriceCondition
valueFromString	ib/jts/TimeCondition.cpp	/^void TimeCondition::valueFromString(const std::string & v) {$/;"	f	class:TimeCondition
valueFromString	ib/jts/VolumeCondition.cpp	/^void VolumeCondition::valueFromString(const std::string & v) {$/;"	f	class:VolumeCondition
valueToString	ib/jts/MarginCondition.cpp	/^std::string MarginCondition::valueToString() const {$/;"	f	class:MarginCondition
valueToString	ib/jts/PercentChangeCondition.cpp	/^std::string PercentChangeCondition::valueToString() const {$/;"	f	class:PercentChangeCondition
valueToString	ib/jts/PriceCondition.cpp	/^std::string PriceCondition::valueToString() const {$/;"	f	class:PriceCondition
valueToString	ib/jts/TimeCondition.cpp	/^std::string TimeCondition::valueToString() const {$/;"	f	class:TimeCondition
valueToString	ib/jts/VolumeCondition.cpp	/^std::string VolumeCondition::valueToString() const {$/;"	f	class:VolumeCondition
verifyAndAuthCompleted	ib/jts/DefaultEWrapper.cpp	/^void DefaultEWrapper::verifyAndAuthCompleted( bool isSuccessful, const std::string& errorText) { }$/;"	f	class:DefaultEWrapper
verifyAndAuthMessage	ib/jts/EClient.cpp	/^void EClient::verifyAndAuthMessage(const std::string& apiData, const std::string& xyzResponse)$/;"	f	class:EClient
verifyAndAuthMessageAPI	ib/jts/DefaultEWrapper.cpp	/^void DefaultEWrapper::verifyAndAuthMessageAPI( const std::string& apiData, const std::string& xyzChallange) { }$/;"	f	class:DefaultEWrapper
verifyAndAuthRequest	ib/jts/EClient.cpp	/^void EClient::verifyAndAuthRequest(const std::string& apiName, const std::string& apiVersion, const std::string& opaqueIsvKey)$/;"	f	class:EClient
verifyCompleted	ib/jts/DefaultEWrapper.cpp	/^void DefaultEWrapper::verifyCompleted( bool isSuccessful, const std::string& errorText) { }$/;"	f	class:DefaultEWrapper
verifyMessage	ib/jts/EClient.cpp	/^void EClient::verifyMessage(const std::string& apiData)$/;"	f	class:EClient
verifyMessageAPI	ib/jts/DefaultEWrapper.cpp	/^void DefaultEWrapper::verifyMessageAPI( const std::string& apiData) { }$/;"	f	class:DefaultEWrapper
verifyRequest	ib/jts/EClient.cpp	/^void EClient::verifyRequest(const std::string& apiName, const std::string& apiVersion)$/;"	f	class:EClient
volatility	ib/jts/Order.h	/^	double   volatility;$/;"	m	struct:Order
volatilityType	ib/jts/Order.h	/^	int      volatilityType;     \/\/ 1=daily, 2=annual$/;"	m	struct:Order
volume	ib/jts/EDecoder.h	/^   int volume;$/;"	m	struct:__anon1::BarData
volume	ib/jts/VolumeCondition.cpp	/^int VolumeCondition::volume() {$/;"	f	class:VolumeCondition
volume	ib/jts/VolumeCondition.cpp	/^void VolumeCondition::volume(int volume) {$/;"	f	class:VolumeCondition
volume	ib/jts/bar.h	/^	long long volume;$/;"	m	struct:Bar
volume	opentrade/market_data.h	/^    double volume = 0;$/;"	m	struct:opentrade::MarketData::Trade
volume	opentrade/python.cc	/^static PyObject *volume(PyObject *self, PyObject *args) {$/;"	f	namespace:opentrade::md_methods
volume	xquant/market_data.h	/^    double volume = 0;$/;"	m	struct:opentrade::MarketData::Trade
volume	xquant/python.cc	/^static PyObject *volume(PyObject *self, PyObject *args) {$/;"	f	namespace:opentrade::md_methods
volume_def	opentrade/python.cc	/^static PyMethodDef volume_def = {"get_volume", volume, METH_VARARGS,$/;"	m	namespace:opentrade::md_methods	file:
volume_def	xquant/python.cc	/^static PyMethodDef volume_def = {"get_volume", volume, METH_VARARGS,$/;"	m	namespace:opentrade::md_methods	file:
vwap	opentrade/market_data.h	/^    double vwap = 0;$/;"	m	struct:opentrade::MarketData::Trade
vwap	opentrade/python.cc	/^static PyObject *vwap(PyObject *self, PyObject *args) {$/;"	f	namespace:opentrade::md_methods
vwap	xquant/market_data.h	/^    double vwap = 0;$/;"	m	struct:opentrade::MarketData::Trade
vwap	xquant/python.cc	/^static PyObject *vwap(PyObject *self, PyObject *args) {$/;"	f	namespace:opentrade::md_methods
vwap_def	opentrade/python.cc	/^static PyMethodDef vwap_def = {"get_vwap", vwap, METH_VARARGS, "get_vwap()"};$/;"	m	namespace:opentrade::md_methods	file:
vwap_def	xquant/python.cc	/^static PyMethodDef vwap_def = {"get_vwap", vwap, METH_VARARGS, "get_vwap()"};$/;"	m	namespace:opentrade::md_methods	file:
waitForSignal	ib/jts/EReaderOSSignal.cpp	/^void EReaderOSSignal::waitForSignal() {$/;"	f	class:EReaderOSSignal
waitForSignal	ib/jts/EReaderWMSignal.cpp	/^void EReaderWMSignal::waitForSignal() {$/;"	f	class:EReaderWMSignal
wap	ib/jts/bar.h	/^	double wap;$/;"	m	struct:Bar
warningText	ib/jts/OrderState.h	/^	std::string warningText;$/;"	m	struct:OrderState
whatIf	ib/jts/Order.h	/^	bool     whatIf;$/;"	m	struct:Order
winError	ib/jts/DefaultEWrapper.cpp	/^void DefaultEWrapper::winError( const std::string& str, int lastError) { }$/;"	f	class:DefaultEWrapper
work_	opentrade/algo.h	/^  std::unique_ptr<boost::asio::io_service::work> work_;$/;"	m	class:opentrade::AlgoManager
work_	opentrade/task_pool.h	/^  std::unique_ptr<boost::asio::io_service::work> work_;$/;"	m	class:opentrade::TaskPool
work_	xquant/algo.h	/^  std::unique_ptr<boost::asio::io_service::work> work_;$/;"	m	class:opentrade::AlgoManager
work_	xquant/task_pool.h	/^  std::unique_ptr<boost::asio::io_service::work> work_;$/;"	m	class:xquant::TaskPool
writeExternal	ib/jts/ContractCondition.cpp	/^void ContractCondition::writeExternal(std::ostream & msg) const {$/;"	f	class:ContractCondition
writeExternal	ib/jts/OperatorCondition.cpp	/^void OperatorCondition::writeExternal(std::ostream & msg) const {$/;"	f	class:OperatorCondition
writeExternal	ib/jts/OrderCondition.cpp	/^void OrderCondition::writeExternal(std::ostream & msg) const {$/;"	f	class:OrderCondition
writeExternal	ib/jts/PriceCondition.cpp	/^void PriceCondition::writeExternal(std::ostream & msg) const {$/;"	f	class:PriceCondition
writeExternal	ib/jts/executioncondition.cpp	/^void ExecutionCondition::writeExternal(std::ostream & msg) const {$/;"	f	class:ExecutionCondition
ws_	opentrade/server.cc	/^  WsConnPtr ws_;$/;"	m	struct:opentrade::WsSocketWrapper	file:
ws_	xquant/server.cc	/^  WsConnPtr ws_;$/;"	m	struct:opentrade::WsSocketWrapper	file:
xquant	xquant/common.h	/^namespace xquant {$/;"	n
xquant	xquant/task_pool.h	/^namespace xquant {$/;"	n
xquant	xquant/utility.h	/^namespace xquant {$/;"	n
yield	ib/jts/CommissionReport.h	/^	double		yield;$/;"	m	struct:CommissionReport
yieldRedemptionDate	ib/jts/CommissionReport.h	/^	int			yieldRedemptionDate; \/\/ YYYYMMDD format$/;"	m	struct:CommissionReport
~Adapter	opentrade/adapter.cc	/^Adapter::~Adapter() {}$/;"	f	class:opentrade::Adapter
~Adapter	xquant/adapter.cc	/^Adapter::~Adapter() {}$/;"	f	class:opentrade::Adapter
~Connection	opentrade/connection.cc	/^Connection::~Connection() {$/;"	f	class:opentrade::Connection
~Connection	xquant/connection.cc	/^Connection::~Connection() {$/;"	f	class:opentrade::Connection
~EClient	ib/jts/EClient.cpp	/^EClient::~EClient()$/;"	f	class:EClient
~EClientMsgSink	ib/jts/EClientMsgSink.h	/^    virtual ~EClientMsgSink() {}$/;"	f	struct:EClientMsgSink
~EClientSocket	ib/jts/EClientSocket.cpp	/^EClientSocket::~EClientSocket()$/;"	f	class:EClientSocket
~EMutex	ib/jts/EMutex.cpp	/^EMutex::~EMutex(void) {$/;"	f	class:EMutex
~EMutexGuard	ib/jts/EMutex.cpp	/^EMutexGuard::~EMutexGuard() {$/;"	f	class:EMutexGuard
~EReader	ib/jts/EReader.cpp	/^EReader::~EReader(void) {$/;"	f	class:EReader
~EReaderOSSignal	ib/jts/EReaderOSSignal.cpp	/^EReaderOSSignal::~EReaderOSSignal(void)$/;"	f	class:EReaderOSSignal
~EReaderSignal	ib/jts/EReaderSignal.h	/^    virtual ~EReaderSignal() {}$/;"	f	struct:EReaderSignal
~ESocket	ib/jts/ESocket.cpp	/^ESocket::~ESocket(void) {$/;"	f	class:ESocket
~ETransport	ib/jts/ETransport.h	/^    virtual ~ETransport() {}$/;"	f	struct:ETransport
~EWrapper	ib/jts/EWrapper.h	/^   virtual ~EWrapper() {};$/;"	f	class:EWrapper
~IB	ib/ib.cc	/^IB::~IB() {$/;"	f	class:IB
~LockGIL	opentrade/python.cc	/^  ~LockGIL() { m.unlock(); }$/;"	f	struct:opentrade::LockGIL
~LockGIL	xquant/python.cc	/^  ~LockGIL() { m.unlock(); }$/;"	f	struct:opentrade::LockGIL
~OrderCondition	ib/jts/OrderCondition.h	/^	virtual ~OrderCondition() {}$/;"	f	class:OrderCondition
~Python	opentrade/python.cc	/^Python::~Python() {$/;"	f	class:opentrade::Python
~Python	xquant/python.cc	/^Python::~Python() {$/;"	f	class:opentrade::Python
~TaskPool	opentrade/task_pool.h	/^  ~TaskPool() {$/;"	f	class:opentrade::TaskPool
~TaskPool	xquant/task_pool.h	/^  ~TaskPool() {$/;"	f	class:xquant::TaskPool
~Use	ib/jts/shared_ptr.h	/^   ~Use() { remove(); }$/;"	f	class:ibapi::shared_ptr_defs::Use
~shared_ptr	ib/jts/shared_ptr.h	/^   ~shared_ptr() { if (use_.only()) delete ptr_; }$/;"	f	class:ibapi::shared_ptr
